
Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d0  080042d0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042d4  080042d4  000052d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000068  08004340  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004340  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6cb  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002015  00000000  00000000  00014763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00016778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000969  00000000  00000000  000173b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d64  00000000  00000000  00017d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e724  00000000  00000000  0003da85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed3bc  00000000  00000000  0004c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  001395a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0013d0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004190 	.word	0x08004190

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004190 	.word	0x08004190

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fb83 	bl	8000cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f81e 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f8f0 	bl	80007a0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c0:	f000 f866 	bl	8000690 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005c4:	f000 f8ae 	bl	8000724 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  Random = rand() % 20;
 80005c8:	f002 fe02 	bl	80031d0 <rand>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <main+0x40>)
 80005d0:	fb83 1302 	smull	r1, r3, r3, r2
 80005d4:	10d9      	asrs	r1, r3, #3
 80005d6:	17d3      	asrs	r3, r2, #31
 80005d8:	1ac9      	subs	r1, r1, r3
 80005da:	460b      	mov	r3, r1
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	440b      	add	r3, r1
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	1ad1      	subs	r1, r2, r3
 80005e4:	460a      	mov	r2, r1
 80005e6:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <main+0x44>)
 80005e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x3a>
 80005ee:	bf00      	nop
 80005f0:	66666667 	.word	0x66666667
 80005f4:	2000017c 	.word	0x2000017c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2238      	movs	r2, #56	@ 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fee2 	bl	80033d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fe8e 	bl	800133c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2340      	movs	r3, #64	@ 0x40
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000636:	2304      	movs	r3, #4
 8000638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	4618      	mov	r0, r3
 8000650:	f000 ff28 	bl	80014a4 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800065a:	f000 f931 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2303      	movs	r3, #3
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2104      	movs	r1, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fa26 	bl	8001ac8 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000682:	f000 f91d 	bl	80008c0 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000694:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 8000696:	4a22      	ldr	r2, [pc, #136]	@ (8000720 <MX_LPUART1_UART_Init+0x90>)
 8000698:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800069a:	4b20      	ldr	r3, [pc, #128]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c0:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d2:	4812      	ldr	r0, [pc, #72]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006d4:	f001 ff0d 	bl	80024f2 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f8ef 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006e6:	f002 fca9 	bl	800303c <HAL_UARTEx_SetTxFifoThreshold>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006f0:	f000 f8e6 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 80006f8:	f002 fcde 	bl	80030b8 <HAL_UARTEx_SetRxFifoThreshold>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000702:	f000 f8dd 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f002 fc5f 	bl	8002fca <HAL_UARTEx_DisableFifoMode>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000712:	f000 f8d5 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000084 	.word	0x20000084
 8000720:	40008000 	.word	0x40008000

08000724 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_SPI3_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <MX_SPI3_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_SPI3_Init+0x74>)
 800073e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000742:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_SPI3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000756:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_SPI3_Init+0x74>)
 800075a:	2238      	movs	r2, #56	@ 0x38
 800075c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000772:	2207      	movs	r2, #7
 8000774:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_SPI3_Init+0x74>)
 800077e:	2208      	movs	r2, #8
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_SPI3_Init+0x74>)
 8000784:	f001 fe0a 	bl	800239c <HAL_SPI_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f897 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000118 	.word	0x20000118
 800079c:	40003c00 	.word	0x40003c00

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b3f      	ldr	r3, [pc, #252]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a3e      	ldr	r2, [pc, #248]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b3c      	ldr	r3, [pc, #240]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ce:	4b39      	ldr	r3, [pc, #228]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a38      	ldr	r2, [pc, #224]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b36      	ldr	r3, [pc, #216]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b33      	ldr	r3, [pc, #204]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a32      	ldr	r2, [pc, #200]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b30      	ldr	r3, [pc, #192]	@ (80008b4 <MX_GPIO_Init+0x114>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_GPIO_Init+0x114>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a2c      	ldr	r2, [pc, #176]	@ (80008b4 <MX_GPIO_Init+0x114>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_GPIO_Init+0x114>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_GPIO_Init+0x114>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a26      	ldr	r2, [pc, #152]	@ (80008b4 <MX_GPIO_Init+0x114>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_GPIO_Init+0x114>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000836:	f000 fd45 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2104      	movs	r1, #4
 800083e:	481e      	ldr	r0, [pc, #120]	@ (80008b8 <MX_GPIO_Init+0x118>)
 8000840:	f000 fd40 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4818      	ldr	r0, [pc, #96]	@ (80008bc <MX_GPIO_Init+0x11c>)
 800085c:	f000 fbb0 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000860:	2320      	movs	r3, #32
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f000 fba1 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800087e:	2304      	movs	r3, #4
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <MX_GPIO_Init+0x118>)
 8000896:	f000 fb93 	bl	8000fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2028      	movs	r0, #40	@ 0x28
 80008a0:	f000 fb59 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a4:	2028      	movs	r0, #40	@ 0x28
 80008a6:	f000 fb70 	bl	8000f8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000c00 	.word	0x48000c00
 80008bc:	48000800 	.word	0x48000800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <Error_Handler+0x8>

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000910 <HAL_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000902:	f000 fdbf 	bl	8001484 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09e      	sub	sp, #120	@ 0x78
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2254      	movs	r2, #84	@ 0x54
 8000932:	2100      	movs	r1, #0
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fd4b 	bl	80033d0 <memset>
  if(huart->Instance==LPUART1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <HAL_UART_MspInit+0xa8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d136      	bne.n	80009b2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000944:	2320      	movs	r3, #32
 8000946:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fad5 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800095c:	f7ff ffb0 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <HAL_UART_MspInit+0xac>)
 8000962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000964:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <HAL_UART_MspInit+0xac>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <HAL_UART_MspInit+0xac>)
 800096e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_UART_MspInit+0xac>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097c:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <HAL_UART_MspInit+0xac>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_UART_MspInit+0xac>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000990:	230c      	movs	r3, #12
 8000992:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009a0:	230c      	movs	r3, #12
 80009a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f000 fb07 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3778      	adds	r7, #120	@ 0x78
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40008000 	.word	0x40008000
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a17      	ldr	r2, [pc, #92]	@ (8000a40 <HAL_SPI_MspInit+0x7c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d128      	bne.n	8000a38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_SPI_MspInit+0x80>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ea:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <HAL_SPI_MspInit+0x80>)
 80009ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_SPI_MspInit+0x80>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_SPI_MspInit+0x80>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a10      	ldr	r2, [pc, #64]	@ (8000a44 <HAL_SPI_MspInit+0x80>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_SPI_MspInit+0x80>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a16:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a28:	2306      	movs	r3, #6
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <HAL_SPI_MspInit+0x84>)
 8000a34:	f000 fac4 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	@ 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40003c00 	.word	0x40003c00
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000800 	.word	0x48000800

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f95f 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000aae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ab2:	f000 fc1f 	bl	80012f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_kill>:

int _kill(int pid, int sig)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ad4:	f002 fc84 	bl	80033e0 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2216      	movs	r2, #22
 8000adc:	601a      	str	r2, [r3, #0]
  return -1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_exit>:

void _exit (int status)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000af2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffe7 	bl	8000aca <_kill>
  while (1) {}    /* Make sure we hang here */
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <_exit+0x12>

08000b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
  }

  return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
  }
  return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f002 fbe8 	bl	80033e0 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000180 	.word	0x20000180
 8000c44:	200002d8 	.word	0x200002d8

08000c48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c6c:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 fba7 	bl	80033ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc87 	bl	80005b0 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   r0, =_estack
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cb0:	080042d8 	.word	0x080042d8
  ldr r2, =_sbss
 8000cb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb8:	200002d4 	.word	0x200002d4

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f939 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fdf4 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_InitTick+0x68>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d022      	beq.n	8000d4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_InitTick+0x6c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_InitTick+0x68>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f944 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d809      	bhi.n	8000d3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d32:	f000 f910 	bl	8000f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_InitTick+0x70>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e004      	b.n	8000d4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e001      	b.n	8000d4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a03      	ldr	r2, [pc, #12]	@ (8000d80 <HAL_IncTick+0x1c>)
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000184 	.word	0x20000184
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000184 	.word	0x20000184

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff40 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff90 	bl	8000e94 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5f 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff33 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa4 	bl	8000efc <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fce:	e15a      	b.n	8001286 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 814c 	beq.w	8001280 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 0201 	and.w	r2, r3, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	6939      	ldr	r1, [r7, #16]
 80010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0203 	and.w	r2, r3, #3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80a6 	beq.w	8001280 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b5b      	ldr	r3, [pc, #364]	@ (80012a4 <HAL_GPIO_Init+0x2e4>)
 8001136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001138:	4a5a      	ldr	r2, [pc, #360]	@ (80012a4 <HAL_GPIO_Init+0x2e4>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001140:	4b58      	ldr	r3, [pc, #352]	@ (80012a4 <HAL_GPIO_Init+0x2e4>)
 8001142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114c:	4a56      	ldr	r2, [pc, #344]	@ (80012a8 <HAL_GPIO_Init+0x2e8>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001176:	d01f      	beq.n	80011b8 <HAL_GPIO_Init+0x1f8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a4c      	ldr	r2, [pc, #304]	@ (80012ac <HAL_GPIO_Init+0x2ec>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d019      	beq.n	80011b4 <HAL_GPIO_Init+0x1f4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a4b      	ldr	r2, [pc, #300]	@ (80012b0 <HAL_GPIO_Init+0x2f0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d013      	beq.n	80011b0 <HAL_GPIO_Init+0x1f0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <HAL_GPIO_Init+0x2f4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d00d      	beq.n	80011ac <HAL_GPIO_Init+0x1ec>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a49      	ldr	r2, [pc, #292]	@ (80012b8 <HAL_GPIO_Init+0x2f8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d007      	beq.n	80011a8 <HAL_GPIO_Init+0x1e8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a48      	ldr	r2, [pc, #288]	@ (80012bc <HAL_GPIO_Init+0x2fc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d101      	bne.n	80011a4 <HAL_GPIO_Init+0x1e4>
 80011a0:	2305      	movs	r3, #5
 80011a2:	e00a      	b.n	80011ba <HAL_GPIO_Init+0x1fa>
 80011a4:	2306      	movs	r3, #6
 80011a6:	e008      	b.n	80011ba <HAL_GPIO_Init+0x1fa>
 80011a8:	2304      	movs	r3, #4
 80011aa:	e006      	b.n	80011ba <HAL_GPIO_Init+0x1fa>
 80011ac:	2303      	movs	r3, #3
 80011ae:	e004      	b.n	80011ba <HAL_GPIO_Init+0x1fa>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0x1fa>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <HAL_GPIO_Init+0x1fa>
 80011b8:	2300      	movs	r3, #0
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	f002 0203 	and.w	r2, r2, #3
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	4093      	lsls	r3, r2
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ca:	4937      	ldr	r1, [pc, #220]	@ (80012a8 <HAL_GPIO_Init+0x2e8>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d8:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011fc:	4a30      	ldr	r2, [pc, #192]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001226:	4a26      	ldr	r2, [pc, #152]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800122c:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001250:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127a:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <HAL_GPIO_Init+0x300>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	f47f ae9d 	bne.w	8000fd0 <HAL_GPIO_Init+0x10>
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010000 	.word	0x40010000
 80012ac:	48000400 	.word	0x48000400
 80012b0:	48000800 	.word	0x48000800
 80012b4:	48000c00 	.word	0x48000c00
 80012b8:	48001000 	.word	0x48001000
 80012bc:	48001400 	.word	0x48001400
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f806 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40010400 	.word	0x40010400

08001324 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d141      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d131      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001358:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135e:	4a46      	ldr	r2, [pc, #280]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001370:	4a41      	ldr	r2, [pc, #260]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001378:	4b40      	ldr	r3, [pc, #256]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2232      	movs	r2, #50	@ 0x32
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a3f      	ldr	r2, [pc, #252]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9b      	lsrs	r3, r3, #18
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138e:	e002      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001396:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a2:	d102      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f2      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b6:	d158      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e057      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013cc:	e04d      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d4:	d141      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d6:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d131      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ea:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2232      	movs	r2, #50	@ 0x32
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	e002      	b.n	8001422 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142e:	d102      	bne.n	8001436 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001442:	d112      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e011      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001458:	e007      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001468:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40007000 	.word	0x40007000
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83

08001484 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800148e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001492:	6093      	str	r3, [r2, #8]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40007000 	.word	0x40007000

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e2fe      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c2:	4b97      	ldr	r3, [pc, #604]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014cc:	4b94      	ldr	r3, [pc, #592]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d102      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3e>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d002      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e2d9      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b85      	ldr	r3, [pc, #532]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a84      	ldr	r2, [pc, #528]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7e      	ldr	r2, [pc, #504]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b7c      	ldr	r3, [pc, #496]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7b      	ldr	r2, [pc, #492]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b78      	ldr	r3, [pc, #480]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a77      	ldr	r2, [pc, #476]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b75      	ldr	r3, [pc, #468]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a74      	ldr	r2, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fc14 	bl	8000d88 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fc10 	bl	8000d88 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	@ 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e29e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fc00 	bl	8000d88 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fbfc 	bl	8000d88 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e28a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159e:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ba:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	4b56      	ldr	r3, [pc, #344]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b0c      	cmp	r3, #12
 80015d2:	d102      	bne.n	80015da <HAL_RCC_OscConfig+0x136>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_OscConfig+0x13c>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d11f      	bne.n	8001620 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x154>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e25d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	4946      	ldr	r1, [pc, #280]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800160c:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <HAL_RCC_OscConfig+0x280>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb6d 	bl	8000cf0 <HAL_InitTick>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d043      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e249      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d023      	beq.n	8001670 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a3c      	ldr	r2, [pc, #240]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fba8 	bl	8000d88 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fba4 	bl	8000d88 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e232      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164e:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	492d      	ldr	r1, [pc, #180]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	e01a      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2a      	ldr	r2, [pc, #168]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001676:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb84 	bl	8000d88 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fb80 	bl	8000d88 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e20e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001696:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1e0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d041      	beq.n	8001736 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb5d 	bl	8000d88 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb59 	bl	8000d88 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1e7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ef      	beq.n	80016d2 <HAL_RCC_OscConfig+0x22e>
 80016f2:	e020      	b.n	8001736 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fb40 	bl	8000d88 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170a:	e00d      	b.n	8001728 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fb3c 	bl	8000d88 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d906      	bls.n	8001728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1ca      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001728:	4b8c      	ldr	r3, [pc, #560]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ea      	bne.n	800170c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a6 	beq.w	8001890 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001748:	4b84      	ldr	r3, [pc, #528]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_OscConfig+0x2b4>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x2b6>
 8001758:	2300      	movs	r3, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b7f      	ldr	r3, [pc, #508]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	4a7e      	ldr	r2, [pc, #504]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	@ 0x58
 800176a:	4b7c      	ldr	r3, [pc, #496]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001786:	4b76      	ldr	r3, [pc, #472]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff faf9 	bl	8000d88 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff faf5 	bl	8000d88 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e183      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_RCC_OscConfig+0x32e>
 80017c0:	4b66      	ldr	r3, [pc, #408]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a65      	ldr	r2, [pc, #404]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d0:	e024      	b.n	800181c <HAL_RCC_OscConfig+0x378>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d110      	bne.n	80017fc <HAL_RCC_OscConfig+0x358>
 80017da:	4b60      	ldr	r3, [pc, #384]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	4a5e      	ldr	r2, [pc, #376]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ea:	4b5c      	ldr	r3, [pc, #368]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	4a5a      	ldr	r2, [pc, #360]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017fa:	e00f      	b.n	800181c <HAL_RCC_OscConfig+0x378>
 80017fc:	4b57      	ldr	r3, [pc, #348]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	4a56      	ldr	r2, [pc, #344]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800180c:	4b53      	ldr	r3, [pc, #332]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a52      	ldr	r2, [pc, #328]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d016      	beq.n	8001852 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fab0 	bl	8000d88 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff faac 	bl	8000d88 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e138      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	4b46      	ldr	r3, [pc, #280]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ed      	beq.n	800182c <HAL_RCC_OscConfig+0x388>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fa99 	bl	8000d88 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa95 	bl	8000d88 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e121      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b3a      	ldr	r3, [pc, #232]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ed      	bne.n	800185a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	4a34      	ldr	r2, [pc, #208]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a4:	4b2d      	ldr	r3, [pc, #180]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018aa:	4a2c      	ldr	r2, [pc, #176]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa68 	bl	8000d88 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff fa64 	bl	8000d88 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0f2      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ce:	4b23      	ldr	r3, [pc, #140]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x418>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e4:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa4b 	bl	8000d88 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f6:	f7ff fa47 	bl	8000d88 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0d5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80c9 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b0c      	cmp	r3, #12
 800192a:	f000 8083 	beq.w	8001a34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d15e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fa21 	bl	8000d88 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e00c      	b.n	8001964 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fa1d 	bl	8000d88 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d905      	bls.n	8001964 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0ab      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
 800195c:	40021000 	.word	0x40021000
 8001960:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ec      	bne.n	800194a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b52      	ldr	r3, [pc, #328]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4b52      	ldr	r3, [pc, #328]	@ (8001ac0 <HAL_RCC_OscConfig+0x61c>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a11      	ldr	r1, [r2, #32]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001980:	3a01      	subs	r2, #1
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800198a:	0212      	lsls	r2, r2, #8
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001992:	0852      	lsrs	r2, r2, #1
 8001994:	3a01      	subs	r2, #1
 8001996:	0552      	lsls	r2, r2, #21
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800199e:	0852      	lsrs	r2, r2, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0652      	lsls	r2, r2, #25
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019aa:	06d2      	lsls	r2, r2, #27
 80019ac:	430a      	orrs	r2, r1
 80019ae:	4943      	ldr	r1, [pc, #268]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a40      	ldr	r2, [pc, #256]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a3d      	ldr	r2, [pc, #244]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f9dc 	bl	8000d88 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f9d8 	bl	8000d88 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e066      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b35      	ldr	r3, [pc, #212]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x530>
 80019f2:	e05e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a30      	ldr	r2, [pc, #192]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f9c2 	bl	8000d88 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f9be 	bl	8000d88 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1a:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a26:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	4924      	ldr	r1, [pc, #144]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
 8001a32:	e03e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e039      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d12c      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d123      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d11b      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d113      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	3b01      	subs	r3, #1
 8001a94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	019f800c 	.word	0x019f800c
 8001ac4:	feeefffc 	.word	0xfeeefffc

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e11e      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b91      	ldr	r3, [pc, #580]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b8e      	ldr	r3, [pc, #568]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 020f 	bic.w	r2, r3, #15
 8001af6:	498c      	ldr	r1, [pc, #560]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b8a      	ldr	r3, [pc, #552]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e106      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d073      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d129      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b24:	4b81      	ldr	r3, [pc, #516]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0f4      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b34:	f000 f99e 	bl	8001e74 <RCC_GetSysClockFreqFromPLLSource>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d30 <HAL_RCC_ClockConfig+0x268>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d93f      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b42:	4b7a      	ldr	r3, [pc, #488]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d033      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d12f      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b62:	4b72      	ldr	r3, [pc, #456]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b6a:	4a70      	ldr	r2, [pc, #448]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e024      	b.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0c6      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0be      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ba0:	f000 f8ce 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4a61      	ldr	r2, [pc, #388]	@ (8001d30 <HAL_RCC_ClockConfig+0x268>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d909      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bae:	4b5f      	ldr	r3, [pc, #380]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4957      	ldr	r1, [pc, #348]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f8d8 	bl	8000d88 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff f8d4 	bl	8000d88 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e095      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b43      	ldr	r3, [pc, #268]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a42      	ldr	r2, [pc, #264]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c34:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4936      	ldr	r1, [pc, #216]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b80      	cmp	r3, #128	@ 0x80
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c5e:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a32      	ldr	r2, [pc, #200]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d21d      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c78:	4b2b      	ldr	r3, [pc, #172]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 020f 	bic.w	r2, r3, #15
 8001c80:	4929      	ldr	r1, [pc, #164]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c88:	f7ff f87e 	bl	8000d88 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f87a 	bl	8000d88 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e03b      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1ed      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4917      	ldr	r1, [pc, #92]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	490f      	ldr	r1, [pc, #60]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf2:	f000 f825 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	490c      	ldr	r1, [pc, #48]	@ (8001d34 <HAL_RCC_ClockConfig+0x26c>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ffea 	bl	8000cf0 <HAL_InitTick>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	04c4b400 	.word	0x04c4b400
 8001d34:	080041a8 	.word	0x080041a8
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d46:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e047      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d64:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e03e      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d136      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d94:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9e:	68d2      	ldr	r2, [r2, #12]
 8001da0:	0a12      	lsrs	r2, r2, #8
 8001da2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
      break;
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dae:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	68d2      	ldr	r2, [r2, #12]
 8001dba:	0a12      	lsrs	r2, r2, #8
 8001dbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
      break;
 8001dc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0e5b      	lsrs	r3, r3, #25
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e001      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001de8:	693b      	ldr	r3, [r7, #16]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	016e3600 	.word	0x016e3600

08001e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4904      	ldr	r1, [pc, #16]	@ (8001e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	080041b8 	.word	0x080041b8

08001e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e4c:	f7ff ffda 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0adb      	lsrs	r3, r3, #11
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	@ (8001e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080041b8 	.word	0x080041b8

08001e74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d10c      	bne.n	8001eb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e98:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ea2:	68d2      	ldr	r2, [r2, #12]
 8001ea4:	0a12      	lsrs	r2, r2, #8
 8001ea6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
    break;
 8001eb0:	e00c      	b.n	8001ecc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	0a12      	lsrs	r2, r2, #8
 8001ec0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    break;
 8001eca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0e5b      	lsrs	r3, r3, #25
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	016e3600 	.word	0x016e3600
 8001efc:	00f42400 	.word	0x00f42400

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8098 	beq.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b43      	ldr	r3, [pc, #268]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a3f      	ldr	r2, [pc, #252]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a39      	ldr	r2, [pc, #228]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f56:	f7fe ff17 	bl	8000d88 <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f5c:	e009      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe ff13 	bl	8000d88 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d902      	bls.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	74fb      	strb	r3, [r7, #19]
        break;
 8001f70:	e005      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f72:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ef      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f7e:	7cfb      	ldrb	r3, [r7, #19]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d159      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f84:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01e      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d019      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001faa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fac:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fcc:	4a18      	ldr	r2, [pc, #96]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe fed3 	bl	8000d88 <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe fecf 	bl	8000d88 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d902      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	74fb      	strb	r3, [r7, #19]
            break;
 8001ffc:	e006      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ec      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10b      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002028:	e008      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	74bb      	strb	r3, [r7, #18]
 800202e:	e005      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203c:	7c7b      	ldrb	r3, [r7, #17]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4ba7      	ldr	r3, [pc, #668]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	4aa6      	ldr	r2, [pc, #664]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205a:	4ba1      	ldr	r3, [pc, #644]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002060:	f023 0203 	bic.w	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	499d      	ldr	r1, [pc, #628]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207c:	4b98      	ldr	r3, [pc, #608]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	f023 020c 	bic.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	4995      	ldr	r1, [pc, #596]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800209e:	4b90      	ldr	r3, [pc, #576]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	498c      	ldr	r1, [pc, #560]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020c0:	4b87      	ldr	r3, [pc, #540]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	4984      	ldr	r1, [pc, #528]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020e2:	4b7f      	ldr	r3, [pc, #508]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	497b      	ldr	r1, [pc, #492]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002104:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4973      	ldr	r1, [pc, #460]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002126:	4b6e      	ldr	r3, [pc, #440]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	496a      	ldr	r1, [pc, #424]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002148:	4b65      	ldr	r3, [pc, #404]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4962      	ldr	r1, [pc, #392]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800216a:	4b5d      	ldr	r3, [pc, #372]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	4959      	ldr	r1, [pc, #356]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800218c:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	4951      	ldr	r1, [pc, #324]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ae:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021bc:	4948      	ldr	r1, [pc, #288]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d0:	4b43      	ldr	r3, [pc, #268]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4940      	ldr	r1, [pc, #256]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a3a      	ldr	r2, [pc, #232]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002216:	4932      	ldr	r1, [pc, #200]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002226:	d105      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002228:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a2c      	ldr	r2, [pc, #176]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002232:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	4924      	ldr	r1, [pc, #144]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225e:	d105      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002260:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800226a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002286:	4916      	ldr	r1, [pc, #88]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002296:	d105      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d019      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ce:	d109      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a02      	ldr	r2, [pc, #8]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022da:	60d3      	str	r3, [r2, #12]
 80022dc:	e002      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022f0:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4926      	ldr	r1, [pc, #152]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a20      	ldr	r2, [pc, #128]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002336:	4918      	ldr	r1, [pc, #96]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002346:	d105      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002352:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002360:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	490a      	ldr	r1, [pc, #40]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800238c:	7cbb      	ldrb	r3, [r7, #18]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e09d      	b.n	80024ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023be:	d009      	beq.n	80023d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
 80023c6:	e005      	b.n	80023d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fae8 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002414:	d902      	bls.n	800241c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e002      	b.n	8002422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800241c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800242a:	d007      	beq.n	800243c <HAL_SPI_Init+0xa0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002434:	d002      	beq.n	800243c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	ea42 0103 	orr.w	r1, r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	f003 0204 	and.w	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80024b8:	ea42 0103 	orr.w	r1, r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e042      	b.n	800258a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe f9fc 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2224      	movs	r2, #36	@ 0x24
 8002520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb25 	bl	8002b8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f826 	bl	8002594 <UART_SetConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e01b      	b.n	800258a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002560:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002570:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0201 	orr.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fba4 	bl	8002cd0 <UART_CheckIdleState>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b08c      	sub	sp, #48	@ 0x30
 800259a:	af00      	add	r7, sp, #0
 800259c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4baa      	ldr	r3, [pc, #680]	@ (800286c <UART_SetConfig+0x2d8>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a9f      	ldr	r2, [pc, #636]	@ (8002870 <UART_SetConfig+0x2dc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fc:	4313      	orrs	r3, r2
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800260a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002614:	430b      	orrs	r3, r1
 8002616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	f023 010f 	bic.w	r1, r3, #15
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a90      	ldr	r2, [pc, #576]	@ (8002874 <UART_SetConfig+0x2e0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d125      	bne.n	8002684 <UART_SetConfig+0xf0>
 8002638:	4b8f      	ldr	r3, [pc, #572]	@ (8002878 <UART_SetConfig+0x2e4>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b03      	cmp	r3, #3
 8002644:	d81a      	bhi.n	800267c <UART_SetConfig+0xe8>
 8002646:	a201      	add	r2, pc, #4	@ (adr r2, 800264c <UART_SetConfig+0xb8>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	0800266d 	.word	0x0800266d
 8002654:	08002665 	.word	0x08002665
 8002658:	08002675 	.word	0x08002675
 800265c:	2301      	movs	r3, #1
 800265e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002662:	e116      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002664:	2302      	movs	r3, #2
 8002666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800266a:	e112      	b.n	8002892 <UART_SetConfig+0x2fe>
 800266c:	2304      	movs	r3, #4
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002672:	e10e      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002674:	2308      	movs	r3, #8
 8002676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800267a:	e10a      	b.n	8002892 <UART_SetConfig+0x2fe>
 800267c:	2310      	movs	r3, #16
 800267e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002682:	e106      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a7c      	ldr	r2, [pc, #496]	@ (800287c <UART_SetConfig+0x2e8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d138      	bne.n	8002700 <UART_SetConfig+0x16c>
 800268e:	4b7a      	ldr	r3, [pc, #488]	@ (8002878 <UART_SetConfig+0x2e4>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d82d      	bhi.n	80026f8 <UART_SetConfig+0x164>
 800269c:	a201      	add	r2, pc, #4	@ (adr r2, 80026a4 <UART_SetConfig+0x110>)
 800269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a2:	bf00      	nop
 80026a4:	080026d9 	.word	0x080026d9
 80026a8:	080026f9 	.word	0x080026f9
 80026ac:	080026f9 	.word	0x080026f9
 80026b0:	080026f9 	.word	0x080026f9
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	080026f9 	.word	0x080026f9
 80026bc:	080026f9 	.word	0x080026f9
 80026c0:	080026f9 	.word	0x080026f9
 80026c4:	080026e1 	.word	0x080026e1
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	080026f9 	.word	0x080026f9
 80026d0:	080026f9 	.word	0x080026f9
 80026d4:	080026f1 	.word	0x080026f1
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026de:	e0d8      	b.n	8002892 <UART_SetConfig+0x2fe>
 80026e0:	2302      	movs	r3, #2
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026e6:	e0d4      	b.n	8002892 <UART_SetConfig+0x2fe>
 80026e8:	2304      	movs	r3, #4
 80026ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ee:	e0d0      	b.n	8002892 <UART_SetConfig+0x2fe>
 80026f0:	2308      	movs	r3, #8
 80026f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026f6:	e0cc      	b.n	8002892 <UART_SetConfig+0x2fe>
 80026f8:	2310      	movs	r3, #16
 80026fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026fe:	e0c8      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5e      	ldr	r2, [pc, #376]	@ (8002880 <UART_SetConfig+0x2ec>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d125      	bne.n	8002756 <UART_SetConfig+0x1c2>
 800270a:	4b5b      	ldr	r3, [pc, #364]	@ (8002878 <UART_SetConfig+0x2e4>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002714:	2b30      	cmp	r3, #48	@ 0x30
 8002716:	d016      	beq.n	8002746 <UART_SetConfig+0x1b2>
 8002718:	2b30      	cmp	r3, #48	@ 0x30
 800271a:	d818      	bhi.n	800274e <UART_SetConfig+0x1ba>
 800271c:	2b20      	cmp	r3, #32
 800271e:	d00a      	beq.n	8002736 <UART_SetConfig+0x1a2>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d814      	bhi.n	800274e <UART_SetConfig+0x1ba>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <UART_SetConfig+0x19a>
 8002728:	2b10      	cmp	r3, #16
 800272a:	d008      	beq.n	800273e <UART_SetConfig+0x1aa>
 800272c:	e00f      	b.n	800274e <UART_SetConfig+0x1ba>
 800272e:	2300      	movs	r3, #0
 8002730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002734:	e0ad      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002736:	2302      	movs	r3, #2
 8002738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800273c:	e0a9      	b.n	8002892 <UART_SetConfig+0x2fe>
 800273e:	2304      	movs	r3, #4
 8002740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002744:	e0a5      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002746:	2308      	movs	r3, #8
 8002748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800274c:	e0a1      	b.n	8002892 <UART_SetConfig+0x2fe>
 800274e:	2310      	movs	r3, #16
 8002750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002754:	e09d      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a4a      	ldr	r2, [pc, #296]	@ (8002884 <UART_SetConfig+0x2f0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d125      	bne.n	80027ac <UART_SetConfig+0x218>
 8002760:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <UART_SetConfig+0x2e4>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800276a:	2bc0      	cmp	r3, #192	@ 0xc0
 800276c:	d016      	beq.n	800279c <UART_SetConfig+0x208>
 800276e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002770:	d818      	bhi.n	80027a4 <UART_SetConfig+0x210>
 8002772:	2b80      	cmp	r3, #128	@ 0x80
 8002774:	d00a      	beq.n	800278c <UART_SetConfig+0x1f8>
 8002776:	2b80      	cmp	r3, #128	@ 0x80
 8002778:	d814      	bhi.n	80027a4 <UART_SetConfig+0x210>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <UART_SetConfig+0x1f0>
 800277e:	2b40      	cmp	r3, #64	@ 0x40
 8002780:	d008      	beq.n	8002794 <UART_SetConfig+0x200>
 8002782:	e00f      	b.n	80027a4 <UART_SetConfig+0x210>
 8002784:	2300      	movs	r3, #0
 8002786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800278a:	e082      	b.n	8002892 <UART_SetConfig+0x2fe>
 800278c:	2302      	movs	r3, #2
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002792:	e07e      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002794:	2304      	movs	r3, #4
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800279a:	e07a      	b.n	8002892 <UART_SetConfig+0x2fe>
 800279c:	2308      	movs	r3, #8
 800279e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027a2:	e076      	b.n	8002892 <UART_SetConfig+0x2fe>
 80027a4:	2310      	movs	r3, #16
 80027a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027aa:	e072      	b.n	8002892 <UART_SetConfig+0x2fe>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a35      	ldr	r2, [pc, #212]	@ (8002888 <UART_SetConfig+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12a      	bne.n	800280c <UART_SetConfig+0x278>
 80027b6:	4b30      	ldr	r3, [pc, #192]	@ (8002878 <UART_SetConfig+0x2e4>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027c4:	d01a      	beq.n	80027fc <UART_SetConfig+0x268>
 80027c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027ca:	d81b      	bhi.n	8002804 <UART_SetConfig+0x270>
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d0:	d00c      	beq.n	80027ec <UART_SetConfig+0x258>
 80027d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027d6:	d815      	bhi.n	8002804 <UART_SetConfig+0x270>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <UART_SetConfig+0x250>
 80027dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e0:	d008      	beq.n	80027f4 <UART_SetConfig+0x260>
 80027e2:	e00f      	b.n	8002804 <UART_SetConfig+0x270>
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ea:	e052      	b.n	8002892 <UART_SetConfig+0x2fe>
 80027ec:	2302      	movs	r3, #2
 80027ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027f2:	e04e      	b.n	8002892 <UART_SetConfig+0x2fe>
 80027f4:	2304      	movs	r3, #4
 80027f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027fa:	e04a      	b.n	8002892 <UART_SetConfig+0x2fe>
 80027fc:	2308      	movs	r3, #8
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002802:	e046      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002804:	2310      	movs	r3, #16
 8002806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800280a:	e042      	b.n	8002892 <UART_SetConfig+0x2fe>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <UART_SetConfig+0x2dc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d13a      	bne.n	800288c <UART_SetConfig+0x2f8>
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <UART_SetConfig+0x2e4>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002820:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002824:	d01a      	beq.n	800285c <UART_SetConfig+0x2c8>
 8002826:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800282a:	d81b      	bhi.n	8002864 <UART_SetConfig+0x2d0>
 800282c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002830:	d00c      	beq.n	800284c <UART_SetConfig+0x2b8>
 8002832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002836:	d815      	bhi.n	8002864 <UART_SetConfig+0x2d0>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <UART_SetConfig+0x2b0>
 800283c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002840:	d008      	beq.n	8002854 <UART_SetConfig+0x2c0>
 8002842:	e00f      	b.n	8002864 <UART_SetConfig+0x2d0>
 8002844:	2300      	movs	r3, #0
 8002846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800284a:	e022      	b.n	8002892 <UART_SetConfig+0x2fe>
 800284c:	2302      	movs	r3, #2
 800284e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002852:	e01e      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002854:	2304      	movs	r3, #4
 8002856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285a:	e01a      	b.n	8002892 <UART_SetConfig+0x2fe>
 800285c:	2308      	movs	r3, #8
 800285e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002862:	e016      	b.n	8002892 <UART_SetConfig+0x2fe>
 8002864:	2310      	movs	r3, #16
 8002866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286a:	e012      	b.n	8002892 <UART_SetConfig+0x2fe>
 800286c:	cfff69f3 	.word	0xcfff69f3
 8002870:	40008000 	.word	0x40008000
 8002874:	40013800 	.word	0x40013800
 8002878:	40021000 	.word	0x40021000
 800287c:	40004400 	.word	0x40004400
 8002880:	40004800 	.word	0x40004800
 8002884:	40004c00 	.word	0x40004c00
 8002888:	40005000 	.word	0x40005000
 800288c:	2310      	movs	r3, #16
 800288e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4aae      	ldr	r2, [pc, #696]	@ (8002b50 <UART_SetConfig+0x5bc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 8097 	bne.w	80029cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800289e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d823      	bhi.n	80028ee <UART_SetConfig+0x35a>
 80028a6:	a201      	add	r2, pc, #4	@ (adr r2, 80028ac <UART_SetConfig+0x318>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	080028d1 	.word	0x080028d1
 80028b0:	080028ef 	.word	0x080028ef
 80028b4:	080028d9 	.word	0x080028d9
 80028b8:	080028ef 	.word	0x080028ef
 80028bc:	080028df 	.word	0x080028df
 80028c0:	080028ef 	.word	0x080028ef
 80028c4:	080028ef 	.word	0x080028ef
 80028c8:	080028ef 	.word	0x080028ef
 80028cc:	080028e7 	.word	0x080028e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028d0:	f7ff faa4 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 80028d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028d6:	e010      	b.n	80028fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d8:	4b9e      	ldr	r3, [pc, #632]	@ (8002b54 <UART_SetConfig+0x5c0>)
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028dc:	e00d      	b.n	80028fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028de:	f7ff fa2f 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80028e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80028e4:	e009      	b.n	80028fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80028ec:	e005      	b.n	80028fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80028f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8130 	beq.w	8002b62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	4a94      	ldr	r2, [pc, #592]	@ (8002b58 <UART_SetConfig+0x5c4>)
 8002908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800290c:	461a      	mov	r2, r3
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	fbb3 f3f2 	udiv	r3, r3, r2
 8002914:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	429a      	cmp	r2, r3
 8002924:	d305      	bcc.n	8002932 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	429a      	cmp	r2, r3
 8002930:	d903      	bls.n	800293a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002938:	e113      	b.n	8002b62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	2200      	movs	r2, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	60fa      	str	r2, [r7, #12]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	4a84      	ldr	r2, [pc, #528]	@ (8002b58 <UART_SetConfig+0x5c4>)
 8002948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800294c:	b29b      	uxth	r3, r3
 800294e:	2200      	movs	r2, #0
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800295c:	f7fd fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	020b      	lsls	r3, r1, #8
 8002972:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002976:	0202      	lsls	r2, r0, #8
 8002978:	6979      	ldr	r1, [r7, #20]
 800297a:	6849      	ldr	r1, [r1, #4]
 800297c:	0849      	lsrs	r1, r1, #1
 800297e:	2000      	movs	r0, #0
 8002980:	460c      	mov	r4, r1
 8002982:	4605      	mov	r5, r0
 8002984:	eb12 0804 	adds.w	r8, r2, r4
 8002988:	eb43 0905 	adc.w	r9, r3, r5
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	469a      	mov	sl, r3
 8002994:	4693      	mov	fp, r2
 8002996:	4652      	mov	r2, sl
 8002998:	465b      	mov	r3, fp
 800299a:	4640      	mov	r0, r8
 800299c:	4649      	mov	r1, r9
 800299e:	f7fd fc8f 	bl	80002c0 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4613      	mov	r3, r2
 80029a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029b0:	d308      	bcc.n	80029c4 <UART_SetConfig+0x430>
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029b8:	d204      	bcs.n	80029c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a3a      	ldr	r2, [r7, #32]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	e0ce      	b.n	8002b62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80029ca:	e0ca      	b.n	8002b62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029d4:	d166      	bne.n	8002aa4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80029d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d827      	bhi.n	8002a2e <UART_SetConfig+0x49a>
 80029de:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <UART_SetConfig+0x450>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a11 	.word	0x08002a11
 80029ec:	08002a19 	.word	0x08002a19
 80029f0:	08002a2f 	.word	0x08002a2f
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002a2f 	.word	0x08002a2f
 80029fc:	08002a2f 	.word	0x08002a2f
 8002a00:	08002a2f 	.word	0x08002a2f
 8002a04:	08002a27 	.word	0x08002a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a08:	f7ff fa08 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8002a0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a0e:	e014      	b.n	8002a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a10:	f7ff fa1a 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002a14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a16:	e010      	b.n	8002a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a18:	4b4e      	ldr	r3, [pc, #312]	@ (8002b54 <UART_SetConfig+0x5c0>)
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a1c:	e00d      	b.n	8002a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1e:	f7ff f98f 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a24:	e009      	b.n	8002a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a2c:	e005      	b.n	8002a3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8090 	beq.w	8002b62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	4a44      	ldr	r2, [pc, #272]	@ (8002b58 <UART_SetConfig+0x5c4>)
 8002a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a54:	005a      	lsls	r2, r3, #1
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	441a      	add	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d916      	bls.n	8002a9c <UART_SetConfig+0x508>
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a74:	d212      	bcs.n	8002a9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f023 030f 	bic.w	r3, r3, #15
 8002a7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	8bfb      	ldrh	r3, [r7, #30]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	8bfa      	ldrh	r2, [r7, #30]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e062      	b.n	8002b62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002aa2:	e05e      	b.n	8002b62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d828      	bhi.n	8002afe <UART_SetConfig+0x56a>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <UART_SetConfig+0x520>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ad9 	.word	0x08002ad9
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002ae9 	.word	0x08002ae9
 8002ac0:	08002aff 	.word	0x08002aff
 8002ac4:	08002aef 	.word	0x08002aef
 8002ac8:	08002aff 	.word	0x08002aff
 8002acc:	08002aff 	.word	0x08002aff
 8002ad0:	08002aff 	.word	0x08002aff
 8002ad4:	08002af7 	.word	0x08002af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f7ff f9a0 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8002adc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ade:	e014      	b.n	8002b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7ff f9b2 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ae6:	e010      	b.n	8002b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <UART_SetConfig+0x5c0>)
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002aec:	e00d      	b.n	8002b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aee:	f7ff f927 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8002af2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002af4:	e009      	b.n	8002b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002afc:	e005      	b.n	8002b0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b08:	bf00      	nop
    }

    if (pclk != 0U)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d028      	beq.n	8002b62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <UART_SetConfig+0x5c4>)
 8002b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	441a      	add	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	d910      	bls.n	8002b5c <UART_SetConfig+0x5c8>
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b40:	d20c      	bcs.n	8002b5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	e009      	b.n	8002b62 <UART_SetConfig+0x5ce>
 8002b4e:	bf00      	nop
 8002b50:	40008000 	.word	0x40008000
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	080041c0 	.word	0x080041c0
      }
      else
      {
        ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002b7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3730      	adds	r7, #48	@ 0x30
 8002b86:	46bd      	mov	sp, r7
 8002b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01a      	beq.n	8002ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c8a:	d10a      	bne.n	8002ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b098      	sub	sp, #96	@ 0x60
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ce0:	f7fe f852 	bl	8000d88 <HAL_GetTick>
 8002ce4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d12f      	bne.n	8002d54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f88e 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d022      	beq.n	8002d54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e6      	bne.n	8002d0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e063      	b.n	8002e1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d149      	bne.n	8002df6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f857 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d03c      	beq.n	8002df6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	623b      	str	r3, [r7, #32]
   return(result);
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e6      	bne.n	8002d7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3308      	adds	r3, #8
 8002db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dce:	61fa      	str	r2, [r7, #28]
 8002dd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	617b      	str	r3, [r7, #20]
   return(result);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e5      	bne.n	8002dae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e012      	b.n	8002e1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3758      	adds	r7, #88	@ 0x58
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e34:	e04f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e3c:	d04b      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fd ffa3 	bl	8000d88 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e04e      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d037      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b80      	cmp	r3, #128	@ 0x80
 8002e6a:	d034      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d031      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d110      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2208      	movs	r2, #8
 8002e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f838 	bl	8002efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2208      	movs	r2, #8
 8002e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e029      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb0:	d111      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f81e 	bl	8002efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d0a0      	beq.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b095      	sub	sp, #84	@ 0x54
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e6      	bne.n	8002f06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e3      	bne.n	8002f38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d118      	bne.n	8002faa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f023 0310 	bic.w	r3, r3, #16
 8002f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e6      	bne.n	8002f78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002fbe:	bf00      	nop
 8002fc0:	3754      	adds	r7, #84	@ 0x54
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_UARTEx_DisableFifoMode+0x16>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e027      	b.n	8003030 <HAL_UARTEx_DisableFifoMode+0x66>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800300e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003050:	2302      	movs	r3, #2
 8003052:	e02d      	b.n	80030b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f84f 	bl	8003134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e02d      	b.n	800312c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	@ 0x24
 80030dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f811 	bl	8003134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003154:	e031      	b.n	80031ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003156:	2308      	movs	r3, #8
 8003158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800315a:	2308      	movs	r3, #8
 800315c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	0e5b      	lsrs	r3, r3, #25
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	0f5b      	lsrs	r3, r3, #29
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800317e:	7bbb      	ldrb	r3, [r7, #14]
 8003180:	7b3a      	ldrb	r2, [r7, #12]
 8003182:	4911      	ldr	r1, [pc, #68]	@ (80031c8 <UARTEx_SetNbDataToProcess+0x94>)
 8003184:	5c8a      	ldrb	r2, [r1, r2]
 8003186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800318a:	7b3a      	ldrb	r2, [r7, #12]
 800318c:	490f      	ldr	r1, [pc, #60]	@ (80031cc <UARTEx_SetNbDataToProcess+0x98>)
 800318e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003190:	fb93 f3f2 	sdiv	r3, r3, r2
 8003194:	b29a      	uxth	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	7b7a      	ldrb	r2, [r7, #13]
 80031a0:	4909      	ldr	r1, [pc, #36]	@ (80031c8 <UARTEx_SetNbDataToProcess+0x94>)
 80031a2:	5c8a      	ldrb	r2, [r1, r2]
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80031a8:	7b7a      	ldrb	r2, [r7, #13]
 80031aa:	4908      	ldr	r1, [pc, #32]	@ (80031cc <UARTEx_SetNbDataToProcess+0x98>)
 80031ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	080041d8 	.word	0x080041d8
 80031cc:	080041e0 	.word	0x080041e0

080031d0 <rand>:
 80031d0:	4b16      	ldr	r3, [pc, #88]	@ (800322c <rand+0x5c>)
 80031d2:	b510      	push	{r4, lr}
 80031d4:	681c      	ldr	r4, [r3, #0]
 80031d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80031d8:	b9b3      	cbnz	r3, 8003208 <rand+0x38>
 80031da:	2018      	movs	r0, #24
 80031dc:	f000 f94c 	bl	8003478 <malloc>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80031e4:	b920      	cbnz	r0, 80031f0 <rand+0x20>
 80031e6:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <rand+0x60>)
 80031e8:	4812      	ldr	r0, [pc, #72]	@ (8003234 <rand+0x64>)
 80031ea:	2152      	movs	r1, #82	@ 0x52
 80031ec:	f000 f926 	bl	800343c <__assert_func>
 80031f0:	4911      	ldr	r1, [pc, #68]	@ (8003238 <rand+0x68>)
 80031f2:	4b12      	ldr	r3, [pc, #72]	@ (800323c <rand+0x6c>)
 80031f4:	e9c0 1300 	strd	r1, r3, [r0]
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <rand+0x70>)
 80031fa:	6083      	str	r3, [r0, #8]
 80031fc:	230b      	movs	r3, #11
 80031fe:	8183      	strh	r3, [r0, #12]
 8003200:	2100      	movs	r1, #0
 8003202:	2001      	movs	r0, #1
 8003204:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003208:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800320a:	480e      	ldr	r0, [pc, #56]	@ (8003244 <rand+0x74>)
 800320c:	690b      	ldr	r3, [r1, #16]
 800320e:	694c      	ldr	r4, [r1, #20]
 8003210:	4a0d      	ldr	r2, [pc, #52]	@ (8003248 <rand+0x78>)
 8003212:	4358      	muls	r0, r3
 8003214:	fb02 0004 	mla	r0, r2, r4, r0
 8003218:	fba3 3202 	umull	r3, r2, r3, r2
 800321c:	3301      	adds	r3, #1
 800321e:	eb40 0002 	adc.w	r0, r0, r2
 8003222:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003226:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800322a:	bd10      	pop	{r4, pc}
 800322c:	20000018 	.word	0x20000018
 8003230:	080041e8 	.word	0x080041e8
 8003234:	080041ff 	.word	0x080041ff
 8003238:	abcd330e 	.word	0xabcd330e
 800323c:	e66d1234 	.word	0xe66d1234
 8003240:	0005deec 	.word	0x0005deec
 8003244:	5851f42d 	.word	0x5851f42d
 8003248:	4c957f2d 	.word	0x4c957f2d

0800324c <std>:
 800324c:	2300      	movs	r3, #0
 800324e:	b510      	push	{r4, lr}
 8003250:	4604      	mov	r4, r0
 8003252:	e9c0 3300 	strd	r3, r3, [r0]
 8003256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800325a:	6083      	str	r3, [r0, #8]
 800325c:	8181      	strh	r1, [r0, #12]
 800325e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003260:	81c2      	strh	r2, [r0, #14]
 8003262:	6183      	str	r3, [r0, #24]
 8003264:	4619      	mov	r1, r3
 8003266:	2208      	movs	r2, #8
 8003268:	305c      	adds	r0, #92	@ 0x5c
 800326a:	f000 f8b1 	bl	80033d0 <memset>
 800326e:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <std+0x58>)
 8003270:	6263      	str	r3, [r4, #36]	@ 0x24
 8003272:	4b0d      	ldr	r3, [pc, #52]	@ (80032a8 <std+0x5c>)
 8003274:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <std+0x60>)
 8003278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <std+0x64>)
 800327c:	6323      	str	r3, [r4, #48]	@ 0x30
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <std+0x68>)
 8003280:	6224      	str	r4, [r4, #32]
 8003282:	429c      	cmp	r4, r3
 8003284:	d006      	beq.n	8003294 <std+0x48>
 8003286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800328a:	4294      	cmp	r4, r2
 800328c:	d002      	beq.n	8003294 <std+0x48>
 800328e:	33d0      	adds	r3, #208	@ 0xd0
 8003290:	429c      	cmp	r4, r3
 8003292:	d105      	bne.n	80032a0 <std+0x54>
 8003294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329c:	f000 b8ca 	b.w	8003434 <__retarget_lock_init_recursive>
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	bf00      	nop
 80032a4:	0800373d 	.word	0x0800373d
 80032a8:	0800375f 	.word	0x0800375f
 80032ac:	08003797 	.word	0x08003797
 80032b0:	080037bb 	.word	0x080037bb
 80032b4:	20000188 	.word	0x20000188

080032b8 <stdio_exit_handler>:
 80032b8:	4a02      	ldr	r2, [pc, #8]	@ (80032c4 <stdio_exit_handler+0xc>)
 80032ba:	4903      	ldr	r1, [pc, #12]	@ (80032c8 <stdio_exit_handler+0x10>)
 80032bc:	4803      	ldr	r0, [pc, #12]	@ (80032cc <stdio_exit_handler+0x14>)
 80032be:	f000 b869 	b.w	8003394 <_fwalk_sglue>
 80032c2:	bf00      	nop
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	080036d5 	.word	0x080036d5
 80032cc:	2000001c 	.word	0x2000001c

080032d0 <cleanup_stdio>:
 80032d0:	6841      	ldr	r1, [r0, #4]
 80032d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <cleanup_stdio+0x34>)
 80032d4:	4299      	cmp	r1, r3
 80032d6:	b510      	push	{r4, lr}
 80032d8:	4604      	mov	r4, r0
 80032da:	d001      	beq.n	80032e0 <cleanup_stdio+0x10>
 80032dc:	f000 f9fa 	bl	80036d4 <_fflush_r>
 80032e0:	68a1      	ldr	r1, [r4, #8]
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <cleanup_stdio+0x38>)
 80032e4:	4299      	cmp	r1, r3
 80032e6:	d002      	beq.n	80032ee <cleanup_stdio+0x1e>
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 f9f3 	bl	80036d4 <_fflush_r>
 80032ee:	68e1      	ldr	r1, [r4, #12]
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <cleanup_stdio+0x3c>)
 80032f2:	4299      	cmp	r1, r3
 80032f4:	d004      	beq.n	8003300 <cleanup_stdio+0x30>
 80032f6:	4620      	mov	r0, r4
 80032f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032fc:	f000 b9ea 	b.w	80036d4 <_fflush_r>
 8003300:	bd10      	pop	{r4, pc}
 8003302:	bf00      	nop
 8003304:	20000188 	.word	0x20000188
 8003308:	200001f0 	.word	0x200001f0
 800330c:	20000258 	.word	0x20000258

08003310 <global_stdio_init.part.0>:
 8003310:	b510      	push	{r4, lr}
 8003312:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <global_stdio_init.part.0+0x30>)
 8003314:	4c0b      	ldr	r4, [pc, #44]	@ (8003344 <global_stdio_init.part.0+0x34>)
 8003316:	4a0c      	ldr	r2, [pc, #48]	@ (8003348 <global_stdio_init.part.0+0x38>)
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4620      	mov	r0, r4
 800331c:	2200      	movs	r2, #0
 800331e:	2104      	movs	r1, #4
 8003320:	f7ff ff94 	bl	800324c <std>
 8003324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003328:	2201      	movs	r2, #1
 800332a:	2109      	movs	r1, #9
 800332c:	f7ff ff8e 	bl	800324c <std>
 8003330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003334:	2202      	movs	r2, #2
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333a:	2112      	movs	r1, #18
 800333c:	f7ff bf86 	b.w	800324c <std>
 8003340:	200002c0 	.word	0x200002c0
 8003344:	20000188 	.word	0x20000188
 8003348:	080032b9 	.word	0x080032b9

0800334c <__sfp_lock_acquire>:
 800334c:	4801      	ldr	r0, [pc, #4]	@ (8003354 <__sfp_lock_acquire+0x8>)
 800334e:	f000 b872 	b.w	8003436 <__retarget_lock_acquire_recursive>
 8003352:	bf00      	nop
 8003354:	200002c5 	.word	0x200002c5

08003358 <__sfp_lock_release>:
 8003358:	4801      	ldr	r0, [pc, #4]	@ (8003360 <__sfp_lock_release+0x8>)
 800335a:	f000 b86d 	b.w	8003438 <__retarget_lock_release_recursive>
 800335e:	bf00      	nop
 8003360:	200002c5 	.word	0x200002c5

08003364 <__sinit>:
 8003364:	b510      	push	{r4, lr}
 8003366:	4604      	mov	r4, r0
 8003368:	f7ff fff0 	bl	800334c <__sfp_lock_acquire>
 800336c:	6a23      	ldr	r3, [r4, #32]
 800336e:	b11b      	cbz	r3, 8003378 <__sinit+0x14>
 8003370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003374:	f7ff bff0 	b.w	8003358 <__sfp_lock_release>
 8003378:	4b04      	ldr	r3, [pc, #16]	@ (800338c <__sinit+0x28>)
 800337a:	6223      	str	r3, [r4, #32]
 800337c:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <__sinit+0x2c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f5      	bne.n	8003370 <__sinit+0xc>
 8003384:	f7ff ffc4 	bl	8003310 <global_stdio_init.part.0>
 8003388:	e7f2      	b.n	8003370 <__sinit+0xc>
 800338a:	bf00      	nop
 800338c:	080032d1 	.word	0x080032d1
 8003390:	200002c0 	.word	0x200002c0

08003394 <_fwalk_sglue>:
 8003394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003398:	4607      	mov	r7, r0
 800339a:	4688      	mov	r8, r1
 800339c:	4614      	mov	r4, r2
 800339e:	2600      	movs	r6, #0
 80033a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033a4:	f1b9 0901 	subs.w	r9, r9, #1
 80033a8:	d505      	bpl.n	80033b6 <_fwalk_sglue+0x22>
 80033aa:	6824      	ldr	r4, [r4, #0]
 80033ac:	2c00      	cmp	r4, #0
 80033ae:	d1f7      	bne.n	80033a0 <_fwalk_sglue+0xc>
 80033b0:	4630      	mov	r0, r6
 80033b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033b6:	89ab      	ldrh	r3, [r5, #12]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d907      	bls.n	80033cc <_fwalk_sglue+0x38>
 80033bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033c0:	3301      	adds	r3, #1
 80033c2:	d003      	beq.n	80033cc <_fwalk_sglue+0x38>
 80033c4:	4629      	mov	r1, r5
 80033c6:	4638      	mov	r0, r7
 80033c8:	47c0      	blx	r8
 80033ca:	4306      	orrs	r6, r0
 80033cc:	3568      	adds	r5, #104	@ 0x68
 80033ce:	e7e9      	b.n	80033a4 <_fwalk_sglue+0x10>

080033d0 <memset>:
 80033d0:	4402      	add	r2, r0
 80033d2:	4603      	mov	r3, r0
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d100      	bne.n	80033da <memset+0xa>
 80033d8:	4770      	bx	lr
 80033da:	f803 1b01 	strb.w	r1, [r3], #1
 80033de:	e7f9      	b.n	80033d4 <memset+0x4>

080033e0 <__errno>:
 80033e0:	4b01      	ldr	r3, [pc, #4]	@ (80033e8 <__errno+0x8>)
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000018 	.word	0x20000018

080033ec <__libc_init_array>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003424 <__libc_init_array+0x38>)
 80033f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003428 <__libc_init_array+0x3c>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	2600      	movs	r6, #0
 80033f8:	42a6      	cmp	r6, r4
 80033fa:	d109      	bne.n	8003410 <__libc_init_array+0x24>
 80033fc:	4d0b      	ldr	r5, [pc, #44]	@ (800342c <__libc_init_array+0x40>)
 80033fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003430 <__libc_init_array+0x44>)
 8003400:	f000 fec6 	bl	8004190 <_init>
 8003404:	1b64      	subs	r4, r4, r5
 8003406:	10a4      	asrs	r4, r4, #2
 8003408:	2600      	movs	r6, #0
 800340a:	42a6      	cmp	r6, r4
 800340c:	d105      	bne.n	800341a <__libc_init_array+0x2e>
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	f855 3b04 	ldr.w	r3, [r5], #4
 8003414:	4798      	blx	r3
 8003416:	3601      	adds	r6, #1
 8003418:	e7ee      	b.n	80033f8 <__libc_init_array+0xc>
 800341a:	f855 3b04 	ldr.w	r3, [r5], #4
 800341e:	4798      	blx	r3
 8003420:	3601      	adds	r6, #1
 8003422:	e7f2      	b.n	800340a <__libc_init_array+0x1e>
 8003424:	080042d0 	.word	0x080042d0
 8003428:	080042d0 	.word	0x080042d0
 800342c:	080042d0 	.word	0x080042d0
 8003430:	080042d4 	.word	0x080042d4

08003434 <__retarget_lock_init_recursive>:
 8003434:	4770      	bx	lr

08003436 <__retarget_lock_acquire_recursive>:
 8003436:	4770      	bx	lr

08003438 <__retarget_lock_release_recursive>:
 8003438:	4770      	bx	lr
	...

0800343c <__assert_func>:
 800343c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800343e:	4614      	mov	r4, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <__assert_func+0x2c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4605      	mov	r5, r0
 8003448:	68d8      	ldr	r0, [r3, #12]
 800344a:	b954      	cbnz	r4, 8003462 <__assert_func+0x26>
 800344c:	4b07      	ldr	r3, [pc, #28]	@ (800346c <__assert_func+0x30>)
 800344e:	461c      	mov	r4, r3
 8003450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003454:	9100      	str	r1, [sp, #0]
 8003456:	462b      	mov	r3, r5
 8003458:	4905      	ldr	r1, [pc, #20]	@ (8003470 <__assert_func+0x34>)
 800345a:	f000 f9b3 	bl	80037c4 <fiprintf>
 800345e:	f000 fa19 	bl	8003894 <abort>
 8003462:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <__assert_func+0x38>)
 8003464:	e7f4      	b.n	8003450 <__assert_func+0x14>
 8003466:	bf00      	nop
 8003468:	20000018 	.word	0x20000018
 800346c:	08004292 	.word	0x08004292
 8003470:	08004264 	.word	0x08004264
 8003474:	08004257 	.word	0x08004257

08003478 <malloc>:
 8003478:	4b02      	ldr	r3, [pc, #8]	@ (8003484 <malloc+0xc>)
 800347a:	4601      	mov	r1, r0
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	f000 b825 	b.w	80034cc <_malloc_r>
 8003482:	bf00      	nop
 8003484:	20000018 	.word	0x20000018

08003488 <sbrk_aligned>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	4e0f      	ldr	r6, [pc, #60]	@ (80034c8 <sbrk_aligned+0x40>)
 800348c:	460c      	mov	r4, r1
 800348e:	6831      	ldr	r1, [r6, #0]
 8003490:	4605      	mov	r5, r0
 8003492:	b911      	cbnz	r1, 800349a <sbrk_aligned+0x12>
 8003494:	f000 f9dc 	bl	8003850 <_sbrk_r>
 8003498:	6030      	str	r0, [r6, #0]
 800349a:	4621      	mov	r1, r4
 800349c:	4628      	mov	r0, r5
 800349e:	f000 f9d7 	bl	8003850 <_sbrk_r>
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	d103      	bne.n	80034ae <sbrk_aligned+0x26>
 80034a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034aa:	4620      	mov	r0, r4
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	1cc4      	adds	r4, r0, #3
 80034b0:	f024 0403 	bic.w	r4, r4, #3
 80034b4:	42a0      	cmp	r0, r4
 80034b6:	d0f8      	beq.n	80034aa <sbrk_aligned+0x22>
 80034b8:	1a21      	subs	r1, r4, r0
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 f9c8 	bl	8003850 <_sbrk_r>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d1f2      	bne.n	80034aa <sbrk_aligned+0x22>
 80034c4:	e7ef      	b.n	80034a6 <sbrk_aligned+0x1e>
 80034c6:	bf00      	nop
 80034c8:	200002c8 	.word	0x200002c8

080034cc <_malloc_r>:
 80034cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d0:	1ccd      	adds	r5, r1, #3
 80034d2:	f025 0503 	bic.w	r5, r5, #3
 80034d6:	3508      	adds	r5, #8
 80034d8:	2d0c      	cmp	r5, #12
 80034da:	bf38      	it	cc
 80034dc:	250c      	movcc	r5, #12
 80034de:	2d00      	cmp	r5, #0
 80034e0:	4606      	mov	r6, r0
 80034e2:	db01      	blt.n	80034e8 <_malloc_r+0x1c>
 80034e4:	42a9      	cmp	r1, r5
 80034e6:	d904      	bls.n	80034f2 <_malloc_r+0x26>
 80034e8:	230c      	movs	r3, #12
 80034ea:	6033      	str	r3, [r6, #0]
 80034ec:	2000      	movs	r0, #0
 80034ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c8 <_malloc_r+0xfc>
 80034f6:	f000 f915 	bl	8003724 <__malloc_lock>
 80034fa:	f8d8 3000 	ldr.w	r3, [r8]
 80034fe:	461c      	mov	r4, r3
 8003500:	bb44      	cbnz	r4, 8003554 <_malloc_r+0x88>
 8003502:	4629      	mov	r1, r5
 8003504:	4630      	mov	r0, r6
 8003506:	f7ff ffbf 	bl	8003488 <sbrk_aligned>
 800350a:	1c43      	adds	r3, r0, #1
 800350c:	4604      	mov	r4, r0
 800350e:	d158      	bne.n	80035c2 <_malloc_r+0xf6>
 8003510:	f8d8 4000 	ldr.w	r4, [r8]
 8003514:	4627      	mov	r7, r4
 8003516:	2f00      	cmp	r7, #0
 8003518:	d143      	bne.n	80035a2 <_malloc_r+0xd6>
 800351a:	2c00      	cmp	r4, #0
 800351c:	d04b      	beq.n	80035b6 <_malloc_r+0xea>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	4639      	mov	r1, r7
 8003522:	4630      	mov	r0, r6
 8003524:	eb04 0903 	add.w	r9, r4, r3
 8003528:	f000 f992 	bl	8003850 <_sbrk_r>
 800352c:	4581      	cmp	r9, r0
 800352e:	d142      	bne.n	80035b6 <_malloc_r+0xea>
 8003530:	6821      	ldr	r1, [r4, #0]
 8003532:	1a6d      	subs	r5, r5, r1
 8003534:	4629      	mov	r1, r5
 8003536:	4630      	mov	r0, r6
 8003538:	f7ff ffa6 	bl	8003488 <sbrk_aligned>
 800353c:	3001      	adds	r0, #1
 800353e:	d03a      	beq.n	80035b6 <_malloc_r+0xea>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	442b      	add	r3, r5
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	f8d8 3000 	ldr.w	r3, [r8]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	bb62      	cbnz	r2, 80035a8 <_malloc_r+0xdc>
 800354e:	f8c8 7000 	str.w	r7, [r8]
 8003552:	e00f      	b.n	8003574 <_malloc_r+0xa8>
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	1b52      	subs	r2, r2, r5
 8003558:	d420      	bmi.n	800359c <_malloc_r+0xd0>
 800355a:	2a0b      	cmp	r2, #11
 800355c:	d917      	bls.n	800358e <_malloc_r+0xc2>
 800355e:	1961      	adds	r1, r4, r5
 8003560:	42a3      	cmp	r3, r4
 8003562:	6025      	str	r5, [r4, #0]
 8003564:	bf18      	it	ne
 8003566:	6059      	strne	r1, [r3, #4]
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	bf08      	it	eq
 800356c:	f8c8 1000 	streq.w	r1, [r8]
 8003570:	5162      	str	r2, [r4, r5]
 8003572:	604b      	str	r3, [r1, #4]
 8003574:	4630      	mov	r0, r6
 8003576:	f000 f8db 	bl	8003730 <__malloc_unlock>
 800357a:	f104 000b 	add.w	r0, r4, #11
 800357e:	1d23      	adds	r3, r4, #4
 8003580:	f020 0007 	bic.w	r0, r0, #7
 8003584:	1ac2      	subs	r2, r0, r3
 8003586:	bf1c      	itt	ne
 8003588:	1a1b      	subne	r3, r3, r0
 800358a:	50a3      	strne	r3, [r4, r2]
 800358c:	e7af      	b.n	80034ee <_malloc_r+0x22>
 800358e:	6862      	ldr	r2, [r4, #4]
 8003590:	42a3      	cmp	r3, r4
 8003592:	bf0c      	ite	eq
 8003594:	f8c8 2000 	streq.w	r2, [r8]
 8003598:	605a      	strne	r2, [r3, #4]
 800359a:	e7eb      	b.n	8003574 <_malloc_r+0xa8>
 800359c:	4623      	mov	r3, r4
 800359e:	6864      	ldr	r4, [r4, #4]
 80035a0:	e7ae      	b.n	8003500 <_malloc_r+0x34>
 80035a2:	463c      	mov	r4, r7
 80035a4:	687f      	ldr	r7, [r7, #4]
 80035a6:	e7b6      	b.n	8003516 <_malloc_r+0x4a>
 80035a8:	461a      	mov	r2, r3
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d1fb      	bne.n	80035a8 <_malloc_r+0xdc>
 80035b0:	2300      	movs	r3, #0
 80035b2:	6053      	str	r3, [r2, #4]
 80035b4:	e7de      	b.n	8003574 <_malloc_r+0xa8>
 80035b6:	230c      	movs	r3, #12
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 f8b8 	bl	8003730 <__malloc_unlock>
 80035c0:	e794      	b.n	80034ec <_malloc_r+0x20>
 80035c2:	6005      	str	r5, [r0, #0]
 80035c4:	e7d6      	b.n	8003574 <_malloc_r+0xa8>
 80035c6:	bf00      	nop
 80035c8:	200002cc 	.word	0x200002cc

080035cc <__sflush_r>:
 80035cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d4:	0716      	lsls	r6, r2, #28
 80035d6:	4605      	mov	r5, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	d454      	bmi.n	8003686 <__sflush_r+0xba>
 80035dc:	684b      	ldr	r3, [r1, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	dc02      	bgt.n	80035e8 <__sflush_r+0x1c>
 80035e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	dd48      	ble.n	800367a <__sflush_r+0xae>
 80035e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035ea:	2e00      	cmp	r6, #0
 80035ec:	d045      	beq.n	800367a <__sflush_r+0xae>
 80035ee:	2300      	movs	r3, #0
 80035f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80035f4:	682f      	ldr	r7, [r5, #0]
 80035f6:	6a21      	ldr	r1, [r4, #32]
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	d030      	beq.n	800365e <__sflush_r+0x92>
 80035fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	0759      	lsls	r1, r3, #29
 8003602:	d505      	bpl.n	8003610 <__sflush_r+0x44>
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800360a:	b10b      	cbz	r3, 8003610 <__sflush_r+0x44>
 800360c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	2300      	movs	r3, #0
 8003612:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003614:	6a21      	ldr	r1, [r4, #32]
 8003616:	4628      	mov	r0, r5
 8003618:	47b0      	blx	r6
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	d106      	bne.n	800362e <__sflush_r+0x62>
 8003620:	6829      	ldr	r1, [r5, #0]
 8003622:	291d      	cmp	r1, #29
 8003624:	d82b      	bhi.n	800367e <__sflush_r+0xb2>
 8003626:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <__sflush_r+0x104>)
 8003628:	410a      	asrs	r2, r1
 800362a:	07d6      	lsls	r6, r2, #31
 800362c:	d427      	bmi.n	800367e <__sflush_r+0xb2>
 800362e:	2200      	movs	r2, #0
 8003630:	6062      	str	r2, [r4, #4]
 8003632:	04d9      	lsls	r1, r3, #19
 8003634:	6922      	ldr	r2, [r4, #16]
 8003636:	6022      	str	r2, [r4, #0]
 8003638:	d504      	bpl.n	8003644 <__sflush_r+0x78>
 800363a:	1c42      	adds	r2, r0, #1
 800363c:	d101      	bne.n	8003642 <__sflush_r+0x76>
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	b903      	cbnz	r3, 8003644 <__sflush_r+0x78>
 8003642:	6560      	str	r0, [r4, #84]	@ 0x54
 8003644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003646:	602f      	str	r7, [r5, #0]
 8003648:	b1b9      	cbz	r1, 800367a <__sflush_r+0xae>
 800364a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800364e:	4299      	cmp	r1, r3
 8003650:	d002      	beq.n	8003658 <__sflush_r+0x8c>
 8003652:	4628      	mov	r0, r5
 8003654:	f000 f926 	bl	80038a4 <_free_r>
 8003658:	2300      	movs	r3, #0
 800365a:	6363      	str	r3, [r4, #52]	@ 0x34
 800365c:	e00d      	b.n	800367a <__sflush_r+0xae>
 800365e:	2301      	movs	r3, #1
 8003660:	4628      	mov	r0, r5
 8003662:	47b0      	blx	r6
 8003664:	4602      	mov	r2, r0
 8003666:	1c50      	adds	r0, r2, #1
 8003668:	d1c9      	bne.n	80035fe <__sflush_r+0x32>
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0c6      	beq.n	80035fe <__sflush_r+0x32>
 8003670:	2b1d      	cmp	r3, #29
 8003672:	d001      	beq.n	8003678 <__sflush_r+0xac>
 8003674:	2b16      	cmp	r3, #22
 8003676:	d11e      	bne.n	80036b6 <__sflush_r+0xea>
 8003678:	602f      	str	r7, [r5, #0]
 800367a:	2000      	movs	r0, #0
 800367c:	e022      	b.n	80036c4 <__sflush_r+0xf8>
 800367e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003682:	b21b      	sxth	r3, r3
 8003684:	e01b      	b.n	80036be <__sflush_r+0xf2>
 8003686:	690f      	ldr	r7, [r1, #16]
 8003688:	2f00      	cmp	r7, #0
 800368a:	d0f6      	beq.n	800367a <__sflush_r+0xae>
 800368c:	0793      	lsls	r3, r2, #30
 800368e:	680e      	ldr	r6, [r1, #0]
 8003690:	bf08      	it	eq
 8003692:	694b      	ldreq	r3, [r1, #20]
 8003694:	600f      	str	r7, [r1, #0]
 8003696:	bf18      	it	ne
 8003698:	2300      	movne	r3, #0
 800369a:	eba6 0807 	sub.w	r8, r6, r7
 800369e:	608b      	str	r3, [r1, #8]
 80036a0:	f1b8 0f00 	cmp.w	r8, #0
 80036a4:	dde9      	ble.n	800367a <__sflush_r+0xae>
 80036a6:	6a21      	ldr	r1, [r4, #32]
 80036a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80036aa:	4643      	mov	r3, r8
 80036ac:	463a      	mov	r2, r7
 80036ae:	4628      	mov	r0, r5
 80036b0:	47b0      	blx	r6
 80036b2:	2800      	cmp	r0, #0
 80036b4:	dc08      	bgt.n	80036c8 <__sflush_r+0xfc>
 80036b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036be:	81a3      	strh	r3, [r4, #12]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c8:	4407      	add	r7, r0
 80036ca:	eba8 0800 	sub.w	r8, r8, r0
 80036ce:	e7e7      	b.n	80036a0 <__sflush_r+0xd4>
 80036d0:	dfbffffe 	.word	0xdfbffffe

080036d4 <_fflush_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	690b      	ldr	r3, [r1, #16]
 80036d8:	4605      	mov	r5, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	b913      	cbnz	r3, 80036e4 <_fflush_r+0x10>
 80036de:	2500      	movs	r5, #0
 80036e0:	4628      	mov	r0, r5
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	b118      	cbz	r0, 80036ee <_fflush_r+0x1a>
 80036e6:	6a03      	ldr	r3, [r0, #32]
 80036e8:	b90b      	cbnz	r3, 80036ee <_fflush_r+0x1a>
 80036ea:	f7ff fe3b 	bl	8003364 <__sinit>
 80036ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f3      	beq.n	80036de <_fflush_r+0xa>
 80036f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036f8:	07d0      	lsls	r0, r2, #31
 80036fa:	d404      	bmi.n	8003706 <_fflush_r+0x32>
 80036fc:	0599      	lsls	r1, r3, #22
 80036fe:	d402      	bmi.n	8003706 <_fflush_r+0x32>
 8003700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003702:	f7ff fe98 	bl	8003436 <__retarget_lock_acquire_recursive>
 8003706:	4628      	mov	r0, r5
 8003708:	4621      	mov	r1, r4
 800370a:	f7ff ff5f 	bl	80035cc <__sflush_r>
 800370e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003710:	07da      	lsls	r2, r3, #31
 8003712:	4605      	mov	r5, r0
 8003714:	d4e4      	bmi.n	80036e0 <_fflush_r+0xc>
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	059b      	lsls	r3, r3, #22
 800371a:	d4e1      	bmi.n	80036e0 <_fflush_r+0xc>
 800371c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800371e:	f7ff fe8b 	bl	8003438 <__retarget_lock_release_recursive>
 8003722:	e7dd      	b.n	80036e0 <_fflush_r+0xc>

08003724 <__malloc_lock>:
 8003724:	4801      	ldr	r0, [pc, #4]	@ (800372c <__malloc_lock+0x8>)
 8003726:	f7ff be86 	b.w	8003436 <__retarget_lock_acquire_recursive>
 800372a:	bf00      	nop
 800372c:	200002c4 	.word	0x200002c4

08003730 <__malloc_unlock>:
 8003730:	4801      	ldr	r0, [pc, #4]	@ (8003738 <__malloc_unlock+0x8>)
 8003732:	f7ff be81 	b.w	8003438 <__retarget_lock_release_recursive>
 8003736:	bf00      	nop
 8003738:	200002c4 	.word	0x200002c4

0800373c <__sread>:
 800373c:	b510      	push	{r4, lr}
 800373e:	460c      	mov	r4, r1
 8003740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003744:	f000 f872 	bl	800382c <_read_r>
 8003748:	2800      	cmp	r0, #0
 800374a:	bfab      	itete	ge
 800374c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800374e:	89a3      	ldrhlt	r3, [r4, #12]
 8003750:	181b      	addge	r3, r3, r0
 8003752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003756:	bfac      	ite	ge
 8003758:	6563      	strge	r3, [r4, #84]	@ 0x54
 800375a:	81a3      	strhlt	r3, [r4, #12]
 800375c:	bd10      	pop	{r4, pc}

0800375e <__swrite>:
 800375e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003762:	461f      	mov	r7, r3
 8003764:	898b      	ldrh	r3, [r1, #12]
 8003766:	05db      	lsls	r3, r3, #23
 8003768:	4605      	mov	r5, r0
 800376a:	460c      	mov	r4, r1
 800376c:	4616      	mov	r6, r2
 800376e:	d505      	bpl.n	800377c <__swrite+0x1e>
 8003770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003774:	2302      	movs	r3, #2
 8003776:	2200      	movs	r2, #0
 8003778:	f000 f846 	bl	8003808 <_lseek_r>
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	4632      	mov	r2, r6
 800378a:	463b      	mov	r3, r7
 800378c:	4628      	mov	r0, r5
 800378e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003792:	f000 b86d 	b.w	8003870 <_write_r>

08003796 <__sseek>:
 8003796:	b510      	push	{r4, lr}
 8003798:	460c      	mov	r4, r1
 800379a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379e:	f000 f833 	bl	8003808 <_lseek_r>
 80037a2:	1c43      	adds	r3, r0, #1
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	bf15      	itete	ne
 80037a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037b2:	81a3      	strheq	r3, [r4, #12]
 80037b4:	bf18      	it	ne
 80037b6:	81a3      	strhne	r3, [r4, #12]
 80037b8:	bd10      	pop	{r4, pc}

080037ba <__sclose>:
 80037ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037be:	f000 b813 	b.w	80037e8 <_close_r>
	...

080037c4 <fiprintf>:
 80037c4:	b40e      	push	{r1, r2, r3}
 80037c6:	b503      	push	{r0, r1, lr}
 80037c8:	4601      	mov	r1, r0
 80037ca:	ab03      	add	r3, sp, #12
 80037cc:	4805      	ldr	r0, [pc, #20]	@ (80037e4 <fiprintf+0x20>)
 80037ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d2:	6800      	ldr	r0, [r0, #0]
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	f000 f8d9 	bl	800398c <_vfiprintf_r>
 80037da:	b002      	add	sp, #8
 80037dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e0:	b003      	add	sp, #12
 80037e2:	4770      	bx	lr
 80037e4:	20000018 	.word	0x20000018

080037e8 <_close_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4d06      	ldr	r5, [pc, #24]	@ (8003804 <_close_r+0x1c>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	4604      	mov	r4, r0
 80037f0:	4608      	mov	r0, r1
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	f7fd f9bd 	bl	8000b72 <_close>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_close_r+0x1a>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_close_r+0x1a>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	200002d0 	.word	0x200002d0

08003808 <_lseek_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d07      	ldr	r5, [pc, #28]	@ (8003828 <_lseek_r+0x20>)
 800380c:	4604      	mov	r4, r0
 800380e:	4608      	mov	r0, r1
 8003810:	4611      	mov	r1, r2
 8003812:	2200      	movs	r2, #0
 8003814:	602a      	str	r2, [r5, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	f7fd f9d2 	bl	8000bc0 <_lseek>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d102      	bne.n	8003826 <_lseek_r+0x1e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	b103      	cbz	r3, 8003826 <_lseek_r+0x1e>
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	200002d0 	.word	0x200002d0

0800382c <_read_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4d07      	ldr	r5, [pc, #28]	@ (800384c <_read_r+0x20>)
 8003830:	4604      	mov	r4, r0
 8003832:	4608      	mov	r0, r1
 8003834:	4611      	mov	r1, r2
 8003836:	2200      	movs	r2, #0
 8003838:	602a      	str	r2, [r5, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f7fd f960 	bl	8000b00 <_read>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_read_r+0x1e>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_read_r+0x1e>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	200002d0 	.word	0x200002d0

08003850 <_sbrk_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4d06      	ldr	r5, [pc, #24]	@ (800386c <_sbrk_r+0x1c>)
 8003854:	2300      	movs	r3, #0
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	602b      	str	r3, [r5, #0]
 800385c:	f7fd f9be 	bl	8000bdc <_sbrk>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_sbrk_r+0x1a>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b103      	cbz	r3, 800386a <_sbrk_r+0x1a>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	200002d0 	.word	0x200002d0

08003870 <_write_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4d07      	ldr	r5, [pc, #28]	@ (8003890 <_write_r+0x20>)
 8003874:	4604      	mov	r4, r0
 8003876:	4608      	mov	r0, r1
 8003878:	4611      	mov	r1, r2
 800387a:	2200      	movs	r2, #0
 800387c:	602a      	str	r2, [r5, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	f7fd f95b 	bl	8000b3a <_write>
 8003884:	1c43      	adds	r3, r0, #1
 8003886:	d102      	bne.n	800388e <_write_r+0x1e>
 8003888:	682b      	ldr	r3, [r5, #0]
 800388a:	b103      	cbz	r3, 800388e <_write_r+0x1e>
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	bd38      	pop	{r3, r4, r5, pc}
 8003890:	200002d0 	.word	0x200002d0

08003894 <abort>:
 8003894:	b508      	push	{r3, lr}
 8003896:	2006      	movs	r0, #6
 8003898:	f000 fc5e 	bl	8004158 <raise>
 800389c:	2001      	movs	r0, #1
 800389e:	f7fd f924 	bl	8000aea <_exit>
	...

080038a4 <_free_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4605      	mov	r5, r0
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d041      	beq.n	8003930 <_free_r+0x8c>
 80038ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b0:	1f0c      	subs	r4, r1, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	18e4      	addlt	r4, r4, r3
 80038b8:	f7ff ff34 	bl	8003724 <__malloc_lock>
 80038bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <_free_r+0x90>)
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x2c>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	4628      	mov	r0, r5
 80038c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038cc:	f7ff bf30 	b.w	8003730 <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x42>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	1821      	adds	r1, r4, r0
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1809      	addeq	r1, r1, r0
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x1e>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x4c>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x42>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1850      	adds	r0, r2, r1
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x6c>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	4401      	add	r1, r0
 80038fc:	1850      	adds	r0, r2, r1
 80038fe:	4283      	cmp	r3, r0
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x22>
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	6053      	str	r3, [r2, #4]
 800390a:	4408      	add	r0, r1
 800390c:	6010      	str	r0, [r2, #0]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x22>
 8003910:	d902      	bls.n	8003918 <_free_r+0x74>
 8003912:	230c      	movs	r3, #12
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x22>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	1821      	adds	r1, r4, r0
 800391c:	428b      	cmp	r3, r1
 800391e:	bf04      	itt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	6063      	str	r3, [r4, #4]
 8003926:	bf04      	itt	eq
 8003928:	1809      	addeq	r1, r1, r0
 800392a:	6021      	streq	r1, [r4, #0]
 800392c:	6054      	str	r4, [r2, #4]
 800392e:	e7ca      	b.n	80038c6 <_free_r+0x22>
 8003930:	bd38      	pop	{r3, r4, r5, pc}
 8003932:	bf00      	nop
 8003934:	200002cc 	.word	0x200002cc

08003938 <__sfputc_r>:
 8003938:	6893      	ldr	r3, [r2, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	b410      	push	{r4}
 8003940:	6093      	str	r3, [r2, #8]
 8003942:	da08      	bge.n	8003956 <__sfputc_r+0x1e>
 8003944:	6994      	ldr	r4, [r2, #24]
 8003946:	42a3      	cmp	r3, r4
 8003948:	db01      	blt.n	800394e <__sfputc_r+0x16>
 800394a:	290a      	cmp	r1, #10
 800394c:	d103      	bne.n	8003956 <__sfputc_r+0x1e>
 800394e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003952:	f000 bac1 	b.w	8003ed8 <__swbuf_r>
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	1c58      	adds	r0, r3, #1
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	7019      	strb	r1, [r3, #0]
 800395e:	4608      	mov	r0, r1
 8003960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003964:	4770      	bx	lr

08003966 <__sfputs_r>:
 8003966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003968:	4606      	mov	r6, r0
 800396a:	460f      	mov	r7, r1
 800396c:	4614      	mov	r4, r2
 800396e:	18d5      	adds	r5, r2, r3
 8003970:	42ac      	cmp	r4, r5
 8003972:	d101      	bne.n	8003978 <__sfputs_r+0x12>
 8003974:	2000      	movs	r0, #0
 8003976:	e007      	b.n	8003988 <__sfputs_r+0x22>
 8003978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397c:	463a      	mov	r2, r7
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ffda 	bl	8003938 <__sfputc_r>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d1f3      	bne.n	8003970 <__sfputs_r+0xa>
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800398c <_vfiprintf_r>:
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	460d      	mov	r5, r1
 8003992:	b09d      	sub	sp, #116	@ 0x74
 8003994:	4614      	mov	r4, r2
 8003996:	4698      	mov	r8, r3
 8003998:	4606      	mov	r6, r0
 800399a:	b118      	cbz	r0, 80039a4 <_vfiprintf_r+0x18>
 800399c:	6a03      	ldr	r3, [r0, #32]
 800399e:	b90b      	cbnz	r3, 80039a4 <_vfiprintf_r+0x18>
 80039a0:	f7ff fce0 	bl	8003364 <__sinit>
 80039a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039a6:	07d9      	lsls	r1, r3, #31
 80039a8:	d405      	bmi.n	80039b6 <_vfiprintf_r+0x2a>
 80039aa:	89ab      	ldrh	r3, [r5, #12]
 80039ac:	059a      	lsls	r2, r3, #22
 80039ae:	d402      	bmi.n	80039b6 <_vfiprintf_r+0x2a>
 80039b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039b2:	f7ff fd40 	bl	8003436 <__retarget_lock_acquire_recursive>
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	d501      	bpl.n	80039c0 <_vfiprintf_r+0x34>
 80039bc:	692b      	ldr	r3, [r5, #16]
 80039be:	b99b      	cbnz	r3, 80039e8 <_vfiprintf_r+0x5c>
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f000 fac6 	bl	8003f54 <__swsetup_r>
 80039c8:	b170      	cbz	r0, 80039e8 <_vfiprintf_r+0x5c>
 80039ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039cc:	07dc      	lsls	r4, r3, #31
 80039ce:	d504      	bpl.n	80039da <_vfiprintf_r+0x4e>
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039d4:	b01d      	add	sp, #116	@ 0x74
 80039d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039da:	89ab      	ldrh	r3, [r5, #12]
 80039dc:	0598      	lsls	r0, r3, #22
 80039de:	d4f7      	bmi.n	80039d0 <_vfiprintf_r+0x44>
 80039e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039e2:	f7ff fd29 	bl	8003438 <__retarget_lock_release_recursive>
 80039e6:	e7f3      	b.n	80039d0 <_vfiprintf_r+0x44>
 80039e8:	2300      	movs	r3, #0
 80039ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ec:	2320      	movs	r3, #32
 80039ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f6:	2330      	movs	r3, #48	@ 0x30
 80039f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ba8 <_vfiprintf_r+0x21c>
 80039fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a00:	f04f 0901 	mov.w	r9, #1
 8003a04:	4623      	mov	r3, r4
 8003a06:	469a      	mov	sl, r3
 8003a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a0c:	b10a      	cbz	r2, 8003a12 <_vfiprintf_r+0x86>
 8003a0e:	2a25      	cmp	r2, #37	@ 0x25
 8003a10:	d1f9      	bne.n	8003a06 <_vfiprintf_r+0x7a>
 8003a12:	ebba 0b04 	subs.w	fp, sl, r4
 8003a16:	d00b      	beq.n	8003a30 <_vfiprintf_r+0xa4>
 8003a18:	465b      	mov	r3, fp
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f7ff ffa1 	bl	8003966 <__sfputs_r>
 8003a24:	3001      	adds	r0, #1
 8003a26:	f000 80a7 	beq.w	8003b78 <_vfiprintf_r+0x1ec>
 8003a2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a2c:	445a      	add	r2, fp
 8003a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a30:	f89a 3000 	ldrb.w	r3, [sl]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 809f 	beq.w	8003b78 <_vfiprintf_r+0x1ec>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a44:	f10a 0a01 	add.w	sl, sl, #1
 8003a48:	9304      	str	r3, [sp, #16]
 8003a4a:	9307      	str	r3, [sp, #28]
 8003a4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a50:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a52:	4654      	mov	r4, sl
 8003a54:	2205      	movs	r2, #5
 8003a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5a:	4853      	ldr	r0, [pc, #332]	@ (8003ba8 <_vfiprintf_r+0x21c>)
 8003a5c:	f7fc fbe0 	bl	8000220 <memchr>
 8003a60:	9a04      	ldr	r2, [sp, #16]
 8003a62:	b9d8      	cbnz	r0, 8003a9c <_vfiprintf_r+0x110>
 8003a64:	06d1      	lsls	r1, r2, #27
 8003a66:	bf44      	itt	mi
 8003a68:	2320      	movmi	r3, #32
 8003a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a6e:	0713      	lsls	r3, r2, #28
 8003a70:	bf44      	itt	mi
 8003a72:	232b      	movmi	r3, #43	@ 0x2b
 8003a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a78:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7e:	d015      	beq.n	8003aac <_vfiprintf_r+0x120>
 8003a80:	9a07      	ldr	r2, [sp, #28]
 8003a82:	4654      	mov	r4, sl
 8003a84:	2000      	movs	r0, #0
 8003a86:	f04f 0c0a 	mov.w	ip, #10
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a90:	3b30      	subs	r3, #48	@ 0x30
 8003a92:	2b09      	cmp	r3, #9
 8003a94:	d94b      	bls.n	8003b2e <_vfiprintf_r+0x1a2>
 8003a96:	b1b0      	cbz	r0, 8003ac6 <_vfiprintf_r+0x13a>
 8003a98:	9207      	str	r2, [sp, #28]
 8003a9a:	e014      	b.n	8003ac6 <_vfiprintf_r+0x13a>
 8003a9c:	eba0 0308 	sub.w	r3, r0, r8
 8003aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	9304      	str	r3, [sp, #16]
 8003aa8:	46a2      	mov	sl, r4
 8003aaa:	e7d2      	b.n	8003a52 <_vfiprintf_r+0xc6>
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	1d19      	adds	r1, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	9103      	str	r1, [sp, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bfbb      	ittet	lt
 8003ab8:	425b      	neglt	r3, r3
 8003aba:	f042 0202 	orrlt.w	r2, r2, #2
 8003abe:	9307      	strge	r3, [sp, #28]
 8003ac0:	9307      	strlt	r3, [sp, #28]
 8003ac2:	bfb8      	it	lt
 8003ac4:	9204      	strlt	r2, [sp, #16]
 8003ac6:	7823      	ldrb	r3, [r4, #0]
 8003ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003aca:	d10a      	bne.n	8003ae2 <_vfiprintf_r+0x156>
 8003acc:	7863      	ldrb	r3, [r4, #1]
 8003ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ad0:	d132      	bne.n	8003b38 <_vfiprintf_r+0x1ac>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	9203      	str	r2, [sp, #12]
 8003ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ade:	3402      	adds	r4, #2
 8003ae0:	9305      	str	r3, [sp, #20]
 8003ae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003bb8 <_vfiprintf_r+0x22c>
 8003ae6:	7821      	ldrb	r1, [r4, #0]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4650      	mov	r0, sl
 8003aec:	f7fc fb98 	bl	8000220 <memchr>
 8003af0:	b138      	cbz	r0, 8003b02 <_vfiprintf_r+0x176>
 8003af2:	9b04      	ldr	r3, [sp, #16]
 8003af4:	eba0 000a 	sub.w	r0, r0, sl
 8003af8:	2240      	movs	r2, #64	@ 0x40
 8003afa:	4082      	lsls	r2, r0
 8003afc:	4313      	orrs	r3, r2
 8003afe:	3401      	adds	r4, #1
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b06:	4829      	ldr	r0, [pc, #164]	@ (8003bac <_vfiprintf_r+0x220>)
 8003b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b0c:	2206      	movs	r2, #6
 8003b0e:	f7fc fb87 	bl	8000220 <memchr>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d03f      	beq.n	8003b96 <_vfiprintf_r+0x20a>
 8003b16:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <_vfiprintf_r+0x224>)
 8003b18:	bb1b      	cbnz	r3, 8003b62 <_vfiprintf_r+0x1d6>
 8003b1a:	9b03      	ldr	r3, [sp, #12]
 8003b1c:	3307      	adds	r3, #7
 8003b1e:	f023 0307 	bic.w	r3, r3, #7
 8003b22:	3308      	adds	r3, #8
 8003b24:	9303      	str	r3, [sp, #12]
 8003b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b28:	443b      	add	r3, r7
 8003b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b2c:	e76a      	b.n	8003a04 <_vfiprintf_r+0x78>
 8003b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b32:	460c      	mov	r4, r1
 8003b34:	2001      	movs	r0, #1
 8003b36:	e7a8      	b.n	8003a8a <_vfiprintf_r+0xfe>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	3401      	adds	r4, #1
 8003b3c:	9305      	str	r3, [sp, #20]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f04f 0c0a 	mov.w	ip, #10
 8003b44:	4620      	mov	r0, r4
 8003b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b4a:	3a30      	subs	r2, #48	@ 0x30
 8003b4c:	2a09      	cmp	r2, #9
 8003b4e:	d903      	bls.n	8003b58 <_vfiprintf_r+0x1cc>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0c6      	beq.n	8003ae2 <_vfiprintf_r+0x156>
 8003b54:	9105      	str	r1, [sp, #20]
 8003b56:	e7c4      	b.n	8003ae2 <_vfiprintf_r+0x156>
 8003b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e7f0      	b.n	8003b44 <_vfiprintf_r+0x1b8>
 8003b62:	ab03      	add	r3, sp, #12
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	462a      	mov	r2, r5
 8003b68:	4b12      	ldr	r3, [pc, #72]	@ (8003bb4 <_vfiprintf_r+0x228>)
 8003b6a:	a904      	add	r1, sp, #16
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f3af 8000 	nop.w
 8003b72:	4607      	mov	r7, r0
 8003b74:	1c78      	adds	r0, r7, #1
 8003b76:	d1d6      	bne.n	8003b26 <_vfiprintf_r+0x19a>
 8003b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	d405      	bmi.n	8003b8a <_vfiprintf_r+0x1fe>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	059a      	lsls	r2, r3, #22
 8003b82:	d402      	bmi.n	8003b8a <_vfiprintf_r+0x1fe>
 8003b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b86:	f7ff fc57 	bl	8003438 <__retarget_lock_release_recursive>
 8003b8a:	89ab      	ldrh	r3, [r5, #12]
 8003b8c:	065b      	lsls	r3, r3, #25
 8003b8e:	f53f af1f 	bmi.w	80039d0 <_vfiprintf_r+0x44>
 8003b92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b94:	e71e      	b.n	80039d4 <_vfiprintf_r+0x48>
 8003b96:	ab03      	add	r3, sp, #12
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	462a      	mov	r2, r5
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <_vfiprintf_r+0x228>)
 8003b9e:	a904      	add	r1, sp, #16
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f879 	bl	8003c98 <_printf_i>
 8003ba6:	e7e4      	b.n	8003b72 <_vfiprintf_r+0x1e6>
 8003ba8:	08004293 	.word	0x08004293
 8003bac:	0800429d 	.word	0x0800429d
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	08003967 	.word	0x08003967
 8003bb8:	08004299 	.word	0x08004299

08003bbc <_printf_common>:
 8003bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	4616      	mov	r6, r2
 8003bc2:	4698      	mov	r8, r3
 8003bc4:	688a      	ldr	r2, [r1, #8]
 8003bc6:	690b      	ldr	r3, [r1, #16]
 8003bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bfb8      	it	lt
 8003bd0:	4613      	movlt	r3, r2
 8003bd2:	6033      	str	r3, [r6, #0]
 8003bd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bd8:	4607      	mov	r7, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	b10a      	cbz	r2, 8003be2 <_printf_common+0x26>
 8003bde:	3301      	adds	r3, #1
 8003be0:	6033      	str	r3, [r6, #0]
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	0699      	lsls	r1, r3, #26
 8003be6:	bf42      	ittt	mi
 8003be8:	6833      	ldrmi	r3, [r6, #0]
 8003bea:	3302      	addmi	r3, #2
 8003bec:	6033      	strmi	r3, [r6, #0]
 8003bee:	6825      	ldr	r5, [r4, #0]
 8003bf0:	f015 0506 	ands.w	r5, r5, #6
 8003bf4:	d106      	bne.n	8003c04 <_printf_common+0x48>
 8003bf6:	f104 0a19 	add.w	sl, r4, #25
 8003bfa:	68e3      	ldr	r3, [r4, #12]
 8003bfc:	6832      	ldr	r2, [r6, #0]
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	42ab      	cmp	r3, r5
 8003c02:	dc26      	bgt.n	8003c52 <_printf_common+0x96>
 8003c04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	3b00      	subs	r3, #0
 8003c0c:	bf18      	it	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	0692      	lsls	r2, r2, #26
 8003c12:	d42b      	bmi.n	8003c6c <_printf_common+0xb0>
 8003c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c18:	4641      	mov	r1, r8
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	47c8      	blx	r9
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d01e      	beq.n	8003c60 <_printf_common+0xa4>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	f003 0306 	and.w	r3, r3, #6
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf02      	ittt	eq
 8003c2e:	68e5      	ldreq	r5, [r4, #12]
 8003c30:	6833      	ldreq	r3, [r6, #0]
 8003c32:	1aed      	subeq	r5, r5, r3
 8003c34:	68a3      	ldr	r3, [r4, #8]
 8003c36:	bf0c      	ite	eq
 8003c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c3c:	2500      	movne	r5, #0
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	bfc4      	itt	gt
 8003c42:	1a9b      	subgt	r3, r3, r2
 8003c44:	18ed      	addgt	r5, r5, r3
 8003c46:	2600      	movs	r6, #0
 8003c48:	341a      	adds	r4, #26
 8003c4a:	42b5      	cmp	r5, r6
 8003c4c:	d11a      	bne.n	8003c84 <_printf_common+0xc8>
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e008      	b.n	8003c64 <_printf_common+0xa8>
 8003c52:	2301      	movs	r3, #1
 8003c54:	4652      	mov	r2, sl
 8003c56:	4641      	mov	r1, r8
 8003c58:	4638      	mov	r0, r7
 8003c5a:	47c8      	blx	r9
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d103      	bne.n	8003c68 <_printf_common+0xac>
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c68:	3501      	adds	r5, #1
 8003c6a:	e7c6      	b.n	8003bfa <_printf_common+0x3e>
 8003c6c:	18e1      	adds	r1, r4, r3
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	2030      	movs	r0, #48	@ 0x30
 8003c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c76:	4422      	add	r2, r4
 8003c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c80:	3302      	adds	r3, #2
 8003c82:	e7c7      	b.n	8003c14 <_printf_common+0x58>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4622      	mov	r2, r4
 8003c88:	4641      	mov	r1, r8
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	47c8      	blx	r9
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d0e6      	beq.n	8003c60 <_printf_common+0xa4>
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7d9      	b.n	8003c4a <_printf_common+0x8e>
	...

08003c98 <_printf_i>:
 8003c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	7e0f      	ldrb	r7, [r1, #24]
 8003c9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ca0:	2f78      	cmp	r7, #120	@ 0x78
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	469a      	mov	sl, r3
 8003caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cae:	d807      	bhi.n	8003cc0 <_printf_i+0x28>
 8003cb0:	2f62      	cmp	r7, #98	@ 0x62
 8003cb2:	d80a      	bhi.n	8003cca <_printf_i+0x32>
 8003cb4:	2f00      	cmp	r7, #0
 8003cb6:	f000 80d2 	beq.w	8003e5e <_printf_i+0x1c6>
 8003cba:	2f58      	cmp	r7, #88	@ 0x58
 8003cbc:	f000 80b9 	beq.w	8003e32 <_printf_i+0x19a>
 8003cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cc8:	e03a      	b.n	8003d40 <_printf_i+0xa8>
 8003cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cce:	2b15      	cmp	r3, #21
 8003cd0:	d8f6      	bhi.n	8003cc0 <_printf_i+0x28>
 8003cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd8 <_printf_i+0x40>)
 8003cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d45 	.word	0x08003d45
 8003ce0:	08003cc1 	.word	0x08003cc1
 8003ce4:	08003cc1 	.word	0x08003cc1
 8003ce8:	08003cc1 	.word	0x08003cc1
 8003cec:	08003cc1 	.word	0x08003cc1
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003cc1 	.word	0x08003cc1
 8003cf8:	08003cc1 	.word	0x08003cc1
 8003cfc:	08003cc1 	.word	0x08003cc1
 8003d00:	08003cc1 	.word	0x08003cc1
 8003d04:	08003e45 	.word	0x08003e45
 8003d08:	08003d6f 	.word	0x08003d6f
 8003d0c:	08003dff 	.word	0x08003dff
 8003d10:	08003cc1 	.word	0x08003cc1
 8003d14:	08003cc1 	.word	0x08003cc1
 8003d18:	08003e67 	.word	0x08003e67
 8003d1c:	08003cc1 	.word	0x08003cc1
 8003d20:	08003d6f 	.word	0x08003d6f
 8003d24:	08003cc1 	.word	0x08003cc1
 8003d28:	08003cc1 	.word	0x08003cc1
 8003d2c:	08003e07 	.word	0x08003e07
 8003d30:	6833      	ldr	r3, [r6, #0]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6032      	str	r2, [r6, #0]
 8003d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d40:	2301      	movs	r3, #1
 8003d42:	e09d      	b.n	8003e80 <_printf_i+0x1e8>
 8003d44:	6833      	ldr	r3, [r6, #0]
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	1d19      	adds	r1, r3, #4
 8003d4a:	6031      	str	r1, [r6, #0]
 8003d4c:	0606      	lsls	r6, r0, #24
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0xbc>
 8003d50:	681d      	ldr	r5, [r3, #0]
 8003d52:	e003      	b.n	8003d5c <_printf_i+0xc4>
 8003d54:	0645      	lsls	r5, r0, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0xb8>
 8003d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	da03      	bge.n	8003d68 <_printf_i+0xd0>
 8003d60:	232d      	movs	r3, #45	@ 0x2d
 8003d62:	426d      	negs	r5, r5
 8003d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d68:	4859      	ldr	r0, [pc, #356]	@ (8003ed0 <_printf_i+0x238>)
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	e011      	b.n	8003d92 <_printf_i+0xfa>
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	6833      	ldr	r3, [r6, #0]
 8003d72:	0608      	lsls	r0, r1, #24
 8003d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d78:	d402      	bmi.n	8003d80 <_printf_i+0xe8>
 8003d7a:	0649      	lsls	r1, r1, #25
 8003d7c:	bf48      	it	mi
 8003d7e:	b2ad      	uxthmi	r5, r5
 8003d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d82:	4853      	ldr	r0, [pc, #332]	@ (8003ed0 <_printf_i+0x238>)
 8003d84:	6033      	str	r3, [r6, #0]
 8003d86:	bf14      	ite	ne
 8003d88:	230a      	movne	r3, #10
 8003d8a:	2308      	moveq	r3, #8
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d92:	6866      	ldr	r6, [r4, #4]
 8003d94:	60a6      	str	r6, [r4, #8]
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	bfa2      	ittt	ge
 8003d9a:	6821      	ldrge	r1, [r4, #0]
 8003d9c:	f021 0104 	bicge.w	r1, r1, #4
 8003da0:	6021      	strge	r1, [r4, #0]
 8003da2:	b90d      	cbnz	r5, 8003da8 <_printf_i+0x110>
 8003da4:	2e00      	cmp	r6, #0
 8003da6:	d04b      	beq.n	8003e40 <_printf_i+0x1a8>
 8003da8:	4616      	mov	r6, r2
 8003daa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dae:	fb03 5711 	mls	r7, r3, r1, r5
 8003db2:	5dc7      	ldrb	r7, [r0, r7]
 8003db4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003db8:	462f      	mov	r7, r5
 8003dba:	42bb      	cmp	r3, r7
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	d9f4      	bls.n	8003daa <_printf_i+0x112>
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d10b      	bne.n	8003ddc <_printf_i+0x144>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	07df      	lsls	r7, r3, #31
 8003dc8:	d508      	bpl.n	8003ddc <_printf_i+0x144>
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	6861      	ldr	r1, [r4, #4]
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	bfde      	ittt	le
 8003dd2:	2330      	movle	r3, #48	@ 0x30
 8003dd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dd8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ddc:	1b92      	subs	r2, r2, r6
 8003dde:	6122      	str	r2, [r4, #16]
 8003de0:	f8cd a000 	str.w	sl, [sp]
 8003de4:	464b      	mov	r3, r9
 8003de6:	aa03      	add	r2, sp, #12
 8003de8:	4621      	mov	r1, r4
 8003dea:	4640      	mov	r0, r8
 8003dec:	f7ff fee6 	bl	8003bbc <_printf_common>
 8003df0:	3001      	adds	r0, #1
 8003df2:	d14a      	bne.n	8003e8a <_printf_i+0x1f2>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003df8:	b004      	add	sp, #16
 8003dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f043 0320 	orr.w	r3, r3, #32
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	4833      	ldr	r0, [pc, #204]	@ (8003ed4 <_printf_i+0x23c>)
 8003e08:	2778      	movs	r7, #120	@ 0x78
 8003e0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	6831      	ldr	r1, [r6, #0]
 8003e12:	061f      	lsls	r7, r3, #24
 8003e14:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e18:	d402      	bmi.n	8003e20 <_printf_i+0x188>
 8003e1a:	065f      	lsls	r7, r3, #25
 8003e1c:	bf48      	it	mi
 8003e1e:	b2ad      	uxthmi	r5, r5
 8003e20:	6031      	str	r1, [r6, #0]
 8003e22:	07d9      	lsls	r1, r3, #31
 8003e24:	bf44      	itt	mi
 8003e26:	f043 0320 	orrmi.w	r3, r3, #32
 8003e2a:	6023      	strmi	r3, [r4, #0]
 8003e2c:	b11d      	cbz	r5, 8003e36 <_printf_i+0x19e>
 8003e2e:	2310      	movs	r3, #16
 8003e30:	e7ac      	b.n	8003d8c <_printf_i+0xf4>
 8003e32:	4827      	ldr	r0, [pc, #156]	@ (8003ed0 <_printf_i+0x238>)
 8003e34:	e7e9      	b.n	8003e0a <_printf_i+0x172>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f023 0320 	bic.w	r3, r3, #32
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	e7f6      	b.n	8003e2e <_printf_i+0x196>
 8003e40:	4616      	mov	r6, r2
 8003e42:	e7bd      	b.n	8003dc0 <_printf_i+0x128>
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	6961      	ldr	r1, [r4, #20]
 8003e4a:	1d18      	adds	r0, r3, #4
 8003e4c:	6030      	str	r0, [r6, #0]
 8003e4e:	062e      	lsls	r6, r5, #24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	d501      	bpl.n	8003e58 <_printf_i+0x1c0>
 8003e54:	6019      	str	r1, [r3, #0]
 8003e56:	e002      	b.n	8003e5e <_printf_i+0x1c6>
 8003e58:	0668      	lsls	r0, r5, #25
 8003e5a:	d5fb      	bpl.n	8003e54 <_printf_i+0x1bc>
 8003e5c:	8019      	strh	r1, [r3, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6123      	str	r3, [r4, #16]
 8003e62:	4616      	mov	r6, r2
 8003e64:	e7bc      	b.n	8003de0 <_printf_i+0x148>
 8003e66:	6833      	ldr	r3, [r6, #0]
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	6032      	str	r2, [r6, #0]
 8003e6c:	681e      	ldr	r6, [r3, #0]
 8003e6e:	6862      	ldr	r2, [r4, #4]
 8003e70:	2100      	movs	r1, #0
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7fc f9d4 	bl	8000220 <memchr>
 8003e78:	b108      	cbz	r0, 8003e7e <_printf_i+0x1e6>
 8003e7a:	1b80      	subs	r0, r0, r6
 8003e7c:	6060      	str	r0, [r4, #4]
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	2300      	movs	r3, #0
 8003e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e88:	e7aa      	b.n	8003de0 <_printf_i+0x148>
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	4632      	mov	r2, r6
 8003e8e:	4649      	mov	r1, r9
 8003e90:	4640      	mov	r0, r8
 8003e92:	47d0      	blx	sl
 8003e94:	3001      	adds	r0, #1
 8003e96:	d0ad      	beq.n	8003df4 <_printf_i+0x15c>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	079b      	lsls	r3, r3, #30
 8003e9c:	d413      	bmi.n	8003ec6 <_printf_i+0x22e>
 8003e9e:	68e0      	ldr	r0, [r4, #12]
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	bfb8      	it	lt
 8003ea6:	4618      	movlt	r0, r3
 8003ea8:	e7a6      	b.n	8003df8 <_printf_i+0x160>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4632      	mov	r2, r6
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	47d0      	blx	sl
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d09d      	beq.n	8003df4 <_printf_i+0x15c>
 8003eb8:	3501      	adds	r5, #1
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	9903      	ldr	r1, [sp, #12]
 8003ebe:	1a5b      	subs	r3, r3, r1
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	dcf2      	bgt.n	8003eaa <_printf_i+0x212>
 8003ec4:	e7eb      	b.n	8003e9e <_printf_i+0x206>
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	f104 0619 	add.w	r6, r4, #25
 8003ecc:	e7f5      	b.n	8003eba <_printf_i+0x222>
 8003ece:	bf00      	nop
 8003ed0:	080042a4 	.word	0x080042a4
 8003ed4:	080042b5 	.word	0x080042b5

08003ed8 <__swbuf_r>:
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eda:	460e      	mov	r6, r1
 8003edc:	4614      	mov	r4, r2
 8003ede:	4605      	mov	r5, r0
 8003ee0:	b118      	cbz	r0, 8003eea <__swbuf_r+0x12>
 8003ee2:	6a03      	ldr	r3, [r0, #32]
 8003ee4:	b90b      	cbnz	r3, 8003eea <__swbuf_r+0x12>
 8003ee6:	f7ff fa3d 	bl	8003364 <__sinit>
 8003eea:	69a3      	ldr	r3, [r4, #24]
 8003eec:	60a3      	str	r3, [r4, #8]
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	071a      	lsls	r2, r3, #28
 8003ef2:	d501      	bpl.n	8003ef8 <__swbuf_r+0x20>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	b943      	cbnz	r3, 8003f0a <__swbuf_r+0x32>
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 f82a 	bl	8003f54 <__swsetup_r>
 8003f00:	b118      	cbz	r0, 8003f0a <__swbuf_r+0x32>
 8003f02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003f06:	4638      	mov	r0, r7
 8003f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	1a98      	subs	r0, r3, r2
 8003f10:	6963      	ldr	r3, [r4, #20]
 8003f12:	b2f6      	uxtb	r6, r6
 8003f14:	4283      	cmp	r3, r0
 8003f16:	4637      	mov	r7, r6
 8003f18:	dc05      	bgt.n	8003f26 <__swbuf_r+0x4e>
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f7ff fbd9 	bl	80036d4 <_fflush_r>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d1ed      	bne.n	8003f02 <__swbuf_r+0x2a>
 8003f26:	68a3      	ldr	r3, [r4, #8]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	60a3      	str	r3, [r4, #8]
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	6022      	str	r2, [r4, #0]
 8003f32:	701e      	strb	r6, [r3, #0]
 8003f34:	6962      	ldr	r2, [r4, #20]
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d004      	beq.n	8003f46 <__swbuf_r+0x6e>
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	07db      	lsls	r3, r3, #31
 8003f40:	d5e1      	bpl.n	8003f06 <__swbuf_r+0x2e>
 8003f42:	2e0a      	cmp	r6, #10
 8003f44:	d1df      	bne.n	8003f06 <__swbuf_r+0x2e>
 8003f46:	4621      	mov	r1, r4
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7ff fbc3 	bl	80036d4 <_fflush_r>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d0d9      	beq.n	8003f06 <__swbuf_r+0x2e>
 8003f52:	e7d6      	b.n	8003f02 <__swbuf_r+0x2a>

08003f54 <__swsetup_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <__swsetup_r+0xa8>)
 8003f58:	4605      	mov	r5, r0
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	b118      	cbz	r0, 8003f68 <__swsetup_r+0x14>
 8003f60:	6a03      	ldr	r3, [r0, #32]
 8003f62:	b90b      	cbnz	r3, 8003f68 <__swsetup_r+0x14>
 8003f64:	f7ff f9fe 	bl	8003364 <__sinit>
 8003f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6c:	0719      	lsls	r1, r3, #28
 8003f6e:	d422      	bmi.n	8003fb6 <__swsetup_r+0x62>
 8003f70:	06da      	lsls	r2, r3, #27
 8003f72:	d407      	bmi.n	8003f84 <__swsetup_r+0x30>
 8003f74:	2209      	movs	r2, #9
 8003f76:	602a      	str	r2, [r5, #0]
 8003f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f82:	e033      	b.n	8003fec <__swsetup_r+0x98>
 8003f84:	0758      	lsls	r0, r3, #29
 8003f86:	d512      	bpl.n	8003fae <__swsetup_r+0x5a>
 8003f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f8a:	b141      	cbz	r1, 8003f9e <__swsetup_r+0x4a>
 8003f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f90:	4299      	cmp	r1, r3
 8003f92:	d002      	beq.n	8003f9a <__swsetup_r+0x46>
 8003f94:	4628      	mov	r0, r5
 8003f96:	f7ff fc85 	bl	80038a4 <_free_r>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	f043 0308 	orr.w	r3, r3, #8
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	b94b      	cbnz	r3, 8003fce <__swsetup_r+0x7a>
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc4:	d003      	beq.n	8003fce <__swsetup_r+0x7a>
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f83f 	bl	800404c <__smakebuf_r>
 8003fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd2:	f013 0201 	ands.w	r2, r3, #1
 8003fd6:	d00a      	beq.n	8003fee <__swsetup_r+0x9a>
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60a2      	str	r2, [r4, #8]
 8003fdc:	6962      	ldr	r2, [r4, #20]
 8003fde:	4252      	negs	r2, r2
 8003fe0:	61a2      	str	r2, [r4, #24]
 8003fe2:	6922      	ldr	r2, [r4, #16]
 8003fe4:	b942      	cbnz	r2, 8003ff8 <__swsetup_r+0xa4>
 8003fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003fea:	d1c5      	bne.n	8003f78 <__swsetup_r+0x24>
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
 8003fee:	0799      	lsls	r1, r3, #30
 8003ff0:	bf58      	it	pl
 8003ff2:	6962      	ldrpl	r2, [r4, #20]
 8003ff4:	60a2      	str	r2, [r4, #8]
 8003ff6:	e7f4      	b.n	8003fe2 <__swsetup_r+0x8e>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e7f7      	b.n	8003fec <__swsetup_r+0x98>
 8003ffc:	20000018 	.word	0x20000018

08004000 <__swhatbuf_r>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	460c      	mov	r4, r1
 8004004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004008:	2900      	cmp	r1, #0
 800400a:	b096      	sub	sp, #88	@ 0x58
 800400c:	4615      	mov	r5, r2
 800400e:	461e      	mov	r6, r3
 8004010:	da0d      	bge.n	800402e <__swhatbuf_r+0x2e>
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	bf14      	ite	ne
 800401e:	2340      	movne	r3, #64	@ 0x40
 8004020:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004024:	2000      	movs	r0, #0
 8004026:	6031      	str	r1, [r6, #0]
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	b016      	add	sp, #88	@ 0x58
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	466a      	mov	r2, sp
 8004030:	f000 f848 	bl	80040c4 <_fstat_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	dbec      	blt.n	8004012 <__swhatbuf_r+0x12>
 8004038:	9901      	ldr	r1, [sp, #4]
 800403a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800403e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004042:	4259      	negs	r1, r3
 8004044:	4159      	adcs	r1, r3
 8004046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800404a:	e7eb      	b.n	8004024 <__swhatbuf_r+0x24>

0800404c <__smakebuf_r>:
 800404c:	898b      	ldrh	r3, [r1, #12]
 800404e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004050:	079d      	lsls	r5, r3, #30
 8004052:	4606      	mov	r6, r0
 8004054:	460c      	mov	r4, r1
 8004056:	d507      	bpl.n	8004068 <__smakebuf_r+0x1c>
 8004058:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	2301      	movs	r3, #1
 8004062:	6163      	str	r3, [r4, #20]
 8004064:	b003      	add	sp, #12
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004068:	ab01      	add	r3, sp, #4
 800406a:	466a      	mov	r2, sp
 800406c:	f7ff ffc8 	bl	8004000 <__swhatbuf_r>
 8004070:	9f00      	ldr	r7, [sp, #0]
 8004072:	4605      	mov	r5, r0
 8004074:	4639      	mov	r1, r7
 8004076:	4630      	mov	r0, r6
 8004078:	f7ff fa28 	bl	80034cc <_malloc_r>
 800407c:	b948      	cbnz	r0, 8004092 <__smakebuf_r+0x46>
 800407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004082:	059a      	lsls	r2, r3, #22
 8004084:	d4ee      	bmi.n	8004064 <__smakebuf_r+0x18>
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	e7e2      	b.n	8004058 <__smakebuf_r+0xc>
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	6020      	str	r0, [r4, #0]
 8004096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	9b01      	ldr	r3, [sp, #4]
 800409e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80040a2:	b15b      	cbz	r3, 80040bc <__smakebuf_r+0x70>
 80040a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 f81d 	bl	80040e8 <_isatty_r>
 80040ae:	b128      	cbz	r0, 80040bc <__smakebuf_r+0x70>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	431d      	orrs	r5, r3
 80040c0:	81a5      	strh	r5, [r4, #12]
 80040c2:	e7cf      	b.n	8004064 <__smakebuf_r+0x18>

080040c4 <_fstat_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4d07      	ldr	r5, [pc, #28]	@ (80040e4 <_fstat_r+0x20>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	f7fc fd5a 	bl	8000b8a <_fstat>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d102      	bne.n	80040e0 <_fstat_r+0x1c>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	b103      	cbz	r3, 80040e0 <_fstat_r+0x1c>
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	bf00      	nop
 80040e4:	200002d0 	.word	0x200002d0

080040e8 <_isatty_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	@ (8004104 <_isatty_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fc fd59 	bl	8000baa <_isatty>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_isatty_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_isatty_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200002d0 	.word	0x200002d0

08004108 <_raise_r>:
 8004108:	291f      	cmp	r1, #31
 800410a:	b538      	push	{r3, r4, r5, lr}
 800410c:	4605      	mov	r5, r0
 800410e:	460c      	mov	r4, r1
 8004110:	d904      	bls.n	800411c <_raise_r+0x14>
 8004112:	2316      	movs	r3, #22
 8004114:	6003      	str	r3, [r0, #0]
 8004116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800411e:	b112      	cbz	r2, 8004126 <_raise_r+0x1e>
 8004120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004124:	b94b      	cbnz	r3, 800413a <_raise_r+0x32>
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f830 	bl	800418c <_getpid_r>
 800412c:	4622      	mov	r2, r4
 800412e:	4601      	mov	r1, r0
 8004130:	4628      	mov	r0, r5
 8004132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004136:	f000 b817 	b.w	8004168 <_kill_r>
 800413a:	2b01      	cmp	r3, #1
 800413c:	d00a      	beq.n	8004154 <_raise_r+0x4c>
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	d103      	bne.n	800414a <_raise_r+0x42>
 8004142:	2316      	movs	r3, #22
 8004144:	6003      	str	r3, [r0, #0]
 8004146:	2001      	movs	r0, #1
 8004148:	e7e7      	b.n	800411a <_raise_r+0x12>
 800414a:	2100      	movs	r1, #0
 800414c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004150:	4620      	mov	r0, r4
 8004152:	4798      	blx	r3
 8004154:	2000      	movs	r0, #0
 8004156:	e7e0      	b.n	800411a <_raise_r+0x12>

08004158 <raise>:
 8004158:	4b02      	ldr	r3, [pc, #8]	@ (8004164 <raise+0xc>)
 800415a:	4601      	mov	r1, r0
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	f7ff bfd3 	b.w	8004108 <_raise_r>
 8004162:	bf00      	nop
 8004164:	20000018 	.word	0x20000018

08004168 <_kill_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4d07      	ldr	r5, [pc, #28]	@ (8004188 <_kill_r+0x20>)
 800416c:	2300      	movs	r3, #0
 800416e:	4604      	mov	r4, r0
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	602b      	str	r3, [r5, #0]
 8004176:	f7fc fca8 	bl	8000aca <_kill>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	d102      	bne.n	8004184 <_kill_r+0x1c>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	b103      	cbz	r3, 8004184 <_kill_r+0x1c>
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	bd38      	pop	{r3, r4, r5, pc}
 8004186:	bf00      	nop
 8004188:	200002d0 	.word	0x200002d0

0800418c <_getpid_r>:
 800418c:	f7fc bc95 	b.w	8000aba <_getpid>

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
