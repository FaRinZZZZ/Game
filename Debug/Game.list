
Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c20  08004c20  00005c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c28  08004c28  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c28  08004c28  00005c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c2c  08004c2c  00005c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c30  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08004c3c  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004c3c  000061a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127a8  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002532  00000000  00000000  000187e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be8  00000000  00000000  0001bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fa1  00000000  00000000  0001c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fe2  00000000  00000000  000417e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ead85  00000000  00000000  000547c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa8  00000000  00000000  0013f58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00143534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004bc8 	.word	0x08004bc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004bc8 	.word	0x08004bc8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc7b 	bl	8000e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f810 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f922 	bl	800075c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f898 	bl	800064c <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800051c:	f000 f8e0 	bl	80006e0 <MX_SPI3_Init>
  MX_I2C1_Init();
 8000520:	f000 f854 	bl	80005cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LIGHT_OUTPUT_Setup();
 8000524:	f000 f9aa 	bl	800087c <LIGHT_OUTPUT_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_read_Write_IO();
 8000528:	f000 f9c8 	bl	80008bc <SPITxRx_read_Write_IO>
	  Convert_HC_35_2_Number();
 800052c:	f000 fa28 	bl	8000980 <Convert_HC_35_2_Number>
	  SPITxRx_read_Write_IO();
 8000530:	bf00      	nop
 8000532:	e7f9      	b.n	8000528 <main+0x20>

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	2238      	movs	r2, #56	@ 0x38
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fb14 	bl	8004b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000556:	2000      	movs	r0, #0
 8000558:	f001 ff44 	bl	80023e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2340      	movs	r3, #64	@ 0x40
 8000568:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000572:	2304      	movs	r3, #4
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000576:	2355      	movs	r3, #85	@ 0x55
 8000578:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4618      	mov	r0, r3
 800058c:	f001 ffde 	bl	800254c <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000596:	f000 fa6d 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fadc 	bl	8002b70 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005be:	f000 fa59 	bl	8000a74 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	@ 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000644 <MX_I2C1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <MX_I2C1_Init+0x7c>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <MX_I2C1_Init+0x74>)
 8000608:	f000 ffbc 	bl	8001584 <HAL_I2C_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000612:	f000 fa2f 	bl	8000a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <MX_I2C1_Init+0x74>)
 800061a:	f001 fe4c 	bl	80022b6 <HAL_I2CEx_ConfigAnalogFilter>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 fa26 	bl	8000a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_I2C1_Init+0x74>)
 800062c:	f001 fe8e 	bl	800234c <HAL_I2CEx_ConfigDigitalFilter>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 fa1d 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000002c 	.word	0x2000002c
 8000644:	40005400 	.word	0x40005400
 8000648:	30a0a7fb 	.word	0x30a0a7fb

0800064c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000652:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <MX_LPUART1_UART_Init+0x90>)
 8000654:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800068e:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	f003 fc00 	bl	8003e94 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f9eb 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	f004 f99b 	bl	80049dc <HAL_UARTEx_SetTxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006ac:	f000 f9e2 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	f004 f9d0 	bl	8004a58 <HAL_UARTEx_SetRxFifoThreshold>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006be:	f000 f9d9 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	f004 f951 	bl	800496a <HAL_UARTEx_DisableFifoMode>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006ce:	f000 f9d1 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000080 	.word	0x20000080
 80006dc:	40008000 	.word	0x40008000

080006e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_SPI3_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <MX_SPI3_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_SPI3_Init+0x74>)
 80006ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_SPI3_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_SPI3_Init+0x74>)
 80006fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_SPI3_Init+0x74>)
 800070e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000712:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000716:	2238      	movs	r2, #56	@ 0x38
 8000718:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_SPI3_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_SPI3_Init+0x74>)
 800072e:	2207      	movs	r2, #7
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_SPI3_Init+0x74>)
 800073a:	2208      	movs	r2, #8
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_SPI3_Init+0x74>)
 8000740:	f002 fe80 	bl	8003444 <HAL_SPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f993 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000114 	.word	0x20000114
 8000758:	40003c00 	.word	0x40003c00

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b3f      	ldr	r3, [pc, #252]	@ (8000870 <MX_GPIO_Init+0x114>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a3e      	ldr	r2, [pc, #248]	@ (8000870 <MX_GPIO_Init+0x114>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <MX_GPIO_Init+0x114>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b39      	ldr	r3, [pc, #228]	@ (8000870 <MX_GPIO_Init+0x114>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	4a38      	ldr	r2, [pc, #224]	@ (8000870 <MX_GPIO_Init+0x114>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000796:	4b36      	ldr	r3, [pc, #216]	@ (8000870 <MX_GPIO_Init+0x114>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b33      	ldr	r3, [pc, #204]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a32      	ldr	r2, [pc, #200]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ae:	4b30      	ldr	r3, [pc, #192]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	4a2c      	ldr	r2, [pc, #176]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d6:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007de:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_GPIO_Init+0x114>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f2:	f000 fe97 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2104      	movs	r1, #4
 80007fa:	481e      	ldr	r0, [pc, #120]	@ (8000874 <MX_GPIO_Init+0x118>)
 80007fc:	f000 fe92 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4818      	ldr	r0, [pc, #96]	@ (8000878 <MX_GPIO_Init+0x11c>)
 8000818:	f000 fcea 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081c:	2320      	movs	r3, #32
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000836:	f000 fcdb 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <MX_GPIO_Init+0x118>)
 8000852:	f000 fccd 	bl	80011f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2028      	movs	r0, #40	@ 0x28
 800085c:	f000 fc1f 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f000 fc36 	bl	80010d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	@ 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	48000c00 	.word	0x48000c00
 8000878:	48000800 	.word	0x48000800

0800087c <LIGHT_OUTPUT_Setup>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
		HAL_Delay(1);
}

void LIGHT_OUTPUT_Setup()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2104      	movs	r1, #4
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <LIGHT_OUTPUT_Setup+0x30>)
 8000886:	f000 fe4d 	bl	8001524 <HAL_GPIO_WritePin>
	SPI_TX[0] = 0b01000000;
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <LIGHT_OUTPUT_Setup+0x34>)
 800088c:	2240      	movs	r2, #64	@ 0x40
 800088e:	701a      	strb	r2, [r3, #0]
	SPI_TX[1] = 0x01;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <LIGHT_OUTPUT_Setup+0x34>)
 8000892:	2201      	movs	r2, #1
 8000894:	705a      	strb	r2, [r3, #1]
	SPI_TX[2] = 0b00000000;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <LIGHT_OUTPUT_Setup+0x34>)
 8000898:	2200      	movs	r2, #0
 800089a:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 800089c:	2303      	movs	r3, #3
 800089e:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <LIGHT_OUTPUT_Setup+0x38>)
 80008a0:	4903      	ldr	r1, [pc, #12]	@ (80008b0 <LIGHT_OUTPUT_Setup+0x34>)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <LIGHT_OUTPUT_Setup+0x3c>)
 80008a4:	f002 fe7a 	bl	800359c <HAL_SPI_TransmitReceive_IT>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	48000c00 	.word	0x48000c00
 80008b0:	20000178 	.word	0x20000178
 80008b4:	20000184 	.word	0x20000184
 80008b8:	20000114 	.word	0x20000114

080008bc <SPITxRx_read_Write_IO>:

void SPITxRx_read_Write_IO()
	{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80008c0:	2104      	movs	r1, #4
 80008c2:	4813      	ldr	r0, [pc, #76]	@ (8000910 <SPITxRx_read_Write_IO+0x54>)
 80008c4:	f000 fe16 	bl	80014f4 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d01e      	beq.n	800090c <SPITxRx_read_Write_IO+0x50>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008ce:	2200      	movs	r2, #0
 80008d0:	2104      	movs	r1, #4
 80008d2:	480f      	ldr	r0, [pc, #60]	@ (8000910 <SPITxRx_read_Write_IO+0x54>)
 80008d4:	f000 fe26 	bl	8001524 <HAL_GPIO_WritePin>
			if (State == 0)
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <SPITxRx_read_Write_IO+0x58>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d109      	bne.n	80008f4 <SPITxRx_read_Write_IO+0x38>
			{
				SPI_TX[0] = 0b01000001;//read
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <SPITxRx_read_Write_IO+0x5c>)
 80008e2:	2241      	movs	r2, #65	@ 0x41
 80008e4:	701a      	strb	r2, [r3, #0]
				SPI_TX[1] = 0x12;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <SPITxRx_read_Write_IO+0x5c>)
 80008e8:	2212      	movs	r2, #18
 80008ea:	705a      	strb	r2, [r3, #1]
				SPI_TX[2] = 0;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <SPITxRx_read_Write_IO+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	709a      	strb	r2, [r3, #2]
 80008f2:	e005      	b.n	8000900 <SPITxRx_read_Write_IO+0x44>
			}
			else if(State == 1)
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <SPITxRx_read_Write_IO+0x58>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d101      	bne.n	8000900 <SPITxRx_read_Write_IO+0x44>
			{
				SET_LIGHT_B();
 80008fc:	f000 f812 	bl	8000924 <SET_LIGHT_B>
			}
			HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 8000900:	2303      	movs	r3, #3
 8000902:	4a06      	ldr	r2, [pc, #24]	@ (800091c <SPITxRx_read_Write_IO+0x60>)
 8000904:	4904      	ldr	r1, [pc, #16]	@ (8000918 <SPITxRx_read_Write_IO+0x5c>)
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <SPITxRx_read_Write_IO+0x64>)
 8000908:	f002 fe48 	bl	800359c <HAL_SPI_TransmitReceive_IT>
			}
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	48000c00 	.word	0x48000c00
 8000914:	2000019a 	.word	0x2000019a
 8000918:	20000178 	.word	0x20000178
 800091c:	20000184 	.word	0x20000184
 8000920:	20000114 	.word	0x20000114

08000924 <SET_LIGHT_B>:

void SET_LIGHT_B()
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	SPI_TX[0] = 0b01000000;
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <SET_LIGHT_B+0x54>)
 800092a:	2240      	movs	r2, #64	@ 0x40
 800092c:	701a      	strb	r2, [r3, #0]
	SPI_TX[1] = 0x15;
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <SET_LIGHT_B+0x54>)
 8000930:	2215      	movs	r2, #21
 8000932:	705a      	strb	r2, [r3, #1]
	if (Number == 1)
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <SET_LIGHT_B+0x58>)
 8000936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093a:	1e51      	subs	r1, r2, #1
 800093c:	430b      	orrs	r3, r1
 800093e:	d103      	bne.n	8000948 <SET_LIGHT_B+0x24>
	{
		SPI_TX[2] = 0b11000000;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <SET_LIGHT_B+0x54>)
 8000942:	22c0      	movs	r2, #192	@ 0xc0
 8000944:	709a      	strb	r2, [r3, #2]
	else if (Number == 3)
	{
		SPI_TX[2] = 0b11111111;
	}

}
 8000946:	e012      	b.n	800096e <SET_LIGHT_B+0x4a>
	else if (Number == 2)
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <SET_LIGHT_B+0x58>)
 800094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094e:	1e91      	subs	r1, r2, #2
 8000950:	430b      	orrs	r3, r1
 8000952:	d103      	bne.n	800095c <SET_LIGHT_B+0x38>
		SPI_TX[2] = 0b00000011;
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <SET_LIGHT_B+0x54>)
 8000956:	2203      	movs	r2, #3
 8000958:	709a      	strb	r2, [r3, #2]
}
 800095a:	e008      	b.n	800096e <SET_LIGHT_B+0x4a>
	else if (Number == 3)
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <SET_LIGHT_B+0x58>)
 800095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000962:	1ed1      	subs	r1, r2, #3
 8000964:	430b      	orrs	r3, r1
 8000966:	d102      	bne.n	800096e <SET_LIGHT_B+0x4a>
		SPI_TX[2] = 0b11111111;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <SET_LIGHT_B+0x54>)
 800096a:	22ff      	movs	r2, #255	@ 0xff
 800096c:	709a      	strb	r2, [r3, #2]
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	20000178 	.word	0x20000178
 800097c:	20000190 	.word	0x20000190

08000980 <Convert_HC_35_2_Number>:
void shipbit()
{
	T = SPI_RX[2] >> 4;
}
void Convert_HC_35_2_Number()
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	if (SPI_RX[2]== 14)
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <Convert_HC_35_2_Number+0x6c>)
 8000986:	789b      	ldrb	r3, [r3, #2]
 8000988:	2b0e      	cmp	r3, #14
 800098a:	d107      	bne.n	800099c <Convert_HC_35_2_Number+0x1c>
		{
			Number = 1;
 800098c:	4918      	ldr	r1, [pc, #96]	@ (80009f0 <Convert_HC_35_2_Number+0x70>)
 800098e:	f04f 0201 	mov.w	r2, #1
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	e9c1 2300 	strd	r2, r3, [r1]
		}
	else if (SPI_RX[2]== 7)
		{
			Number = 4;
		}
}
 800099a:	e022      	b.n	80009e2 <Convert_HC_35_2_Number+0x62>
	else if (SPI_RX[2]== 13)
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <Convert_HC_35_2_Number+0x6c>)
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	2b0d      	cmp	r3, #13
 80009a2:	d107      	bne.n	80009b4 <Convert_HC_35_2_Number+0x34>
			Number = 2;
 80009a4:	4912      	ldr	r1, [pc, #72]	@ (80009f0 <Convert_HC_35_2_Number+0x70>)
 80009a6:	f04f 0202 	mov.w	r2, #2
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	e9c1 2300 	strd	r2, r3, [r1]
}
 80009b2:	e016      	b.n	80009e2 <Convert_HC_35_2_Number+0x62>
	else if (SPI_RX[2]== 11)
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <Convert_HC_35_2_Number+0x6c>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	2b0b      	cmp	r3, #11
 80009ba:	d107      	bne.n	80009cc <Convert_HC_35_2_Number+0x4c>
			Number = 3;
 80009bc:	490c      	ldr	r1, [pc, #48]	@ (80009f0 <Convert_HC_35_2_Number+0x70>)
 80009be:	f04f 0203 	mov.w	r2, #3
 80009c2:	f04f 0300 	mov.w	r3, #0
 80009c6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80009ca:	e00a      	b.n	80009e2 <Convert_HC_35_2_Number+0x62>
	else if (SPI_RX[2]== 7)
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <Convert_HC_35_2_Number+0x6c>)
 80009ce:	789b      	ldrb	r3, [r3, #2]
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	d106      	bne.n	80009e2 <Convert_HC_35_2_Number+0x62>
			Number = 4;
 80009d4:	4906      	ldr	r1, [pc, #24]	@ (80009f0 <Convert_HC_35_2_Number+0x70>)
 80009d6:	f04f 0204 	mov.w	r2, #4
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000184 	.word	0x20000184
 80009f0:	20000190 	.word	0x20000190

080009f4 <HAL_SPI_TxRxCpltCallback>:
{

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(State==0)
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_SPI_TxRxCpltCallback+0x38>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d103      	bne.n	8000a0c <HAL_SPI_TxRxCpltCallback+0x18>
	{
		State = 1;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	801a      	strh	r2, [r3, #0]
 8000a0a:	e006      	b.n	8000a1a <HAL_SPI_TxRxCpltCallback+0x26>
	}
	else if(State == 1)
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d102      	bne.n	8000a1a <HAL_SPI_TxRxCpltCallback+0x26>
	{
		State = 0;
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000a20:	f000 fd80 	bl	8001524 <HAL_GPIO_WritePin>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000019a 	.word	0x2000019a
 8000a30:	48000c00 	.word	0x48000c00

08000a34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_13)
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a44:	d10e      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x30>
		{
			if (control_rand == 1)
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d103      	bne.n	8000a56 <HAL_GPIO_EXTI_Callback+0x22>
				{
					control_rand = 0;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	801a      	strh	r2, [r3, #0]
					control_rand = 1;
				}
		}


	}
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_EXTI_Callback+0x30>
			else if (control_rand == 0)
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x30>
					control_rand = 1;
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	801a      	strh	r2, [r3, #0]
	}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	20000198 	.word	0x20000198

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ab6:	f001 fd39 	bl	800252c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b09e      	sub	sp, #120	@ 0x78
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2254      	movs	r2, #84	@ 0x54
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f841 	bl	8004b70 <memset>
  if(hi2c->Instance==I2C1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a27      	ldr	r2, [pc, #156]	@ (8000b90 <HAL_I2C_MspInit+0xc8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d146      	bne.n	8000b86 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000af8:	2340      	movs	r3, #64	@ 0x40
 8000afa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fa4f 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b10:	f7ff ffb0 	bl	8000a74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_I2C_MspInit+0xcc>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b18:	4a1e      	ldr	r2, [pc, #120]	@ (8000b94 <HAL_I2C_MspInit+0xcc>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_I2C_MspInit+0xcc>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	2312      	movs	r3, #18
 8000b34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b46:	4619      	mov	r1, r3
 8000b48:	4813      	ldr	r0, [pc, #76]	@ (8000b98 <HAL_I2C_MspInit+0xd0>)
 8000b4a:	f000 fb51 	bl	80011f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_I2C_MspInit+0xcc>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <HAL_I2C_MspInit+0xcc>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_I2C_MspInit+0xcc>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	201f      	movs	r0, #31
 8000b6c:	f000 fa97 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b70:	201f      	movs	r0, #31
 8000b72:	f000 faae 	bl	80010d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2020      	movs	r0, #32
 8000b7c:	f000 fa8f 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b80:	2020      	movs	r0, #32
 8000b82:	f000 faa6 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3778      	adds	r7, #120	@ 0x78
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005400 	.word	0x40005400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	@ 0x78
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2254      	movs	r2, #84	@ 0x54
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 ffd7 	bl	8004b70 <memset>
  if(huart->Instance==LPUART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c44 <HAL_UART_MspInit+0xa8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d136      	bne.n	8000c3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f9e5 	bl	8002fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ff46 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bec:	4a16      	ldr	r2, [pc, #88]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f000 fadb 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3778      	adds	r7, #120	@ 0x78
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40008000 	.word	0x40008000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d130      	bne.n	8000cd0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	4a1a      	ldr	r2, [pc, #104]	@ (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <HAL_SPI_MspInit+0x94>)
 8000cbc:	f000 fa98 	bl	80011f0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2033      	movs	r0, #51	@ 0x33
 8000cc6:	f000 f9ea 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000cca:	2033      	movs	r0, #51	@ 0x33
 8000ccc:	f000 fa01 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	@ 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000800 	.word	0x48000800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 f8b7 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <I2C1_EV_IRQHandler+0x10>)
 8000d4a:	f000 fcb6 	bl	80016ba <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000002c 	.word	0x2000002c

08000d58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <I2C1_ER_IRQHandler+0x10>)
 8000d5e:	f000 fcc6 	bl	80016ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000002c 	.word	0x2000002c

08000d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d74:	f000 fbee 	bl	8001554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d80:	4802      	ldr	r0, [pc, #8]	@ (8000d8c <SPI3_IRQHandler+0x10>)
 8000d82:	f002 fcb9 	bl	80036f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000114 	.word	0x20000114

08000d90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db4:	480d      	ldr	r0, [pc, #52]	@ (8000dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	@ (8000df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <LoopForever+0xe>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e00 <LoopForever+0x16>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 fecd 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fb8f 	bl	8000508 <main>

08000dea <LoopForever>:

LoopForever:
    b LoopForever
 8000dea:	e7fe      	b.n	8000dea <LoopForever>
  ldr   r0, =_estack
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df8:	08004c30 	.word	0x08004c30
  ldr r2, =_sbss
 8000dfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e00:	200001a0 	.word	0x200001a0

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>

08000e06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f939 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f80e 	bl	8000e38 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e001      	b.n	8000e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e28:	f7ff fe2a 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_InitTick+0x68>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d022      	beq.n	8000e92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_InitTick+0x6c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <HAL_InitTick+0x68>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f944 	bl	80010ee <HAL_SYSTICK_Config>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10f      	bne.n	8000e8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d809      	bhi.n	8000e86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e72:	2200      	movs	r2, #0
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7a:	f000 f910 	bl	800109e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0x70>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e007      	b.n	8000e96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e004      	b.n	8000e96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e001      	b.n	8000e96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_IncTick+0x1c>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a03      	ldr	r2, [pc, #12]	@ (8000ec8 <HAL_IncTick+0x1c>)
 8000ebc:	6013      	str	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	2000019c 	.word	0x2000019c
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	@ (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000019c 	.word	0x2000019c

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	@ (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	@ 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	@ 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff40 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff90 	bl	8000fdc <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5f 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff33 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa4 	bl	8001044 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d00d      	beq.n	800113a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	e047      	b.n	80011ca <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 020e 	bic.w	r2, r2, #14
 8001148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0201 	bic.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001168:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f003 021f 	and.w	r2, r3, #31
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001186:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800119e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    }
  }
  return status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011e2:	b2db      	uxtb	r3, r3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011fe:	e15a      	b.n	80014b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 814c 	beq.w	80014b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d005      	beq.n	8001230 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800122c:	2b02      	cmp	r3, #2
 800122e:	d130      	bne.n	8001292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 0201 	and.w	r2, r3, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b03      	cmp	r3, #3
 800129c:	d017      	beq.n	80012ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d123      	bne.n	8001322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0203 	and.w	r2, r3, #3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a6 	beq.w	80014b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_GPIO_Init+0x2e4>)
 8001366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001368:	4a5a      	ldr	r2, [pc, #360]	@ (80014d4 <HAL_GPIO_Init+0x2e4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001370:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <HAL_GPIO_Init+0x2e4>)
 8001372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137c:	4a56      	ldr	r2, [pc, #344]	@ (80014d8 <HAL_GPIO_Init+0x2e8>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013a6:	d01f      	beq.n	80013e8 <HAL_GPIO_Init+0x1f8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4c      	ldr	r2, [pc, #304]	@ (80014dc <HAL_GPIO_Init+0x2ec>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d019      	beq.n	80013e4 <HAL_GPIO_Init+0x1f4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4b      	ldr	r2, [pc, #300]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4a      	ldr	r2, [pc, #296]	@ (80014e4 <HAL_GPIO_Init+0x2f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00d      	beq.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a49      	ldr	r2, [pc, #292]	@ (80014e8 <HAL_GPIO_Init+0x2f8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x1e8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a48      	ldr	r2, [pc, #288]	@ (80014ec <HAL_GPIO_Init+0x2fc>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013d0:	2305      	movs	r3, #5
 80013d2:	e00a      	b.n	80013ea <HAL_GPIO_Init+0x1fa>
 80013d4:	2306      	movs	r3, #6
 80013d6:	e008      	b.n	80013ea <HAL_GPIO_Init+0x1fa>
 80013d8:	2304      	movs	r3, #4
 80013da:	e006      	b.n	80013ea <HAL_GPIO_Init+0x1fa>
 80013dc:	2303      	movs	r3, #3
 80013de:	e004      	b.n	80013ea <HAL_GPIO_Init+0x1fa>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x1fa>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_GPIO_Init+0x1fa>
 80013e8:	2300      	movs	r3, #0
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4093      	lsls	r3, r2
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fa:	4937      	ldr	r1, [pc, #220]	@ (80014d8 <HAL_GPIO_Init+0x2e8>)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001408:	4b39      	ldr	r3, [pc, #228]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800142c:	4a30      	ldr	r2, [pc, #192]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001432:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001456:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800145c:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014aa:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f47f ae9d 	bne.w	8001200 <HAL_GPIO_Init+0x10>
  }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48000800 	.word	0x48000800
 80014e4:	48000c00 	.word	0x48000c00
 80014e8:	48001000 	.word	0x48001000
 80014ec:	48001400 	.word	0x48001400
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e001      	b.n	8001516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001540:	e002      	b.n	8001548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fa5e 	bl	8000a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e08d      	b.n	80016b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fa8c 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e006      	b.n	800160c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800160a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d108      	bne.n	8001626 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	e007      	b.n	8001636 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69d9      	ldr	r1, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
  }
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00f      	beq.n	8001730 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00f      	beq.n	800175a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00a      	beq.n	800175a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001748:	f043 0208 	orr.w	r2, r3, #8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001758:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00f      	beq.n	8001784 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001782:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001788:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 030b 	and.w	r3, r3, #11
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fbd6 	bl	8001f48 <I2C_ITError>
  }
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
 80017d8:	4613      	mov	r3, r2
 80017da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <I2C_Slave_ISR_IT+0x24>
 8001844:	2302      	movs	r3, #2
 8001846:	e0e2      	b.n	8001a0e <I2C_Slave_ISR_IT+0x1ea>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f9b6 	bl	8001bd8 <I2C_ITSlaveCplt>
 800186c:	e0ca      	b.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04b      	beq.n	8001910 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800187e:	2b00      	cmp	r3, #0
 8001880:	d046      	beq.n	8001910 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d128      	bne.n	80018de <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b28      	cmp	r3, #40	@ 0x28
 8001896:	d108      	bne.n	80018aa <I2C_Slave_ISR_IT+0x86>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800189e:	d104      	bne.n	80018aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fafc 	bl	8001ea0 <I2C_ITListenCplt>
 80018a8:	e031      	b.n	800190e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b29      	cmp	r3, #41	@ 0x29
 80018b4:	d10e      	bne.n	80018d4 <I2C_Slave_ISR_IT+0xb0>
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018bc:	d00a      	beq.n	80018d4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2210      	movs	r2, #16
 80018c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fc55 	bl	8002176 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f926 	bl	8001b1e <I2C_ITSlaveSeqCplt>
 80018d2:	e01c      	b.n	800190e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2210      	movs	r2, #16
 80018da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80018dc:	e08f      	b.n	80019fe <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2210      	movs	r2, #16
 80018e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f043 0204 	orr.w	r2, r3, #4
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <I2C_Slave_ISR_IT+0xdc>
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018fe:	d17e      	bne.n	80019fe <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001904:	4619      	mov	r1, r3
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fb1e 	bl	8001f48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800190c:	e077      	b.n	80019fe <I2C_Slave_ISR_IT+0x1da>
 800190e:	e076      	b.n	80019fe <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d02f      	beq.n	800197a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001920:	2b00      	cmp	r3, #0
 8001922:	d02a      	beq.n	800197a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d018      	beq.n	8001960 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d14b      	bne.n	8001a02 <I2C_Slave_ISR_IT+0x1de>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001970:	d047      	beq.n	8001a02 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f8d3 	bl	8001b1e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001978:	e043      	b.n	8001a02 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800198e:	6939      	ldr	r1, [r7, #16]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f840 	bl	8001a16 <I2C_ITAddrCplt>
 8001996:	e035      	b.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d030      	beq.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d02b      	beq.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d018      	beq.n	80019e8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80019e6:	e00d      	b.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ee:	d002      	beq.n	80019f6 <I2C_Slave_ISR_IT+0x1d2>
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f891 	bl	8001b1e <I2C_ITSlaveSeqCplt>
 80019fc:	e002      	b.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001a02:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001a2c:	2b28      	cmp	r3, #40	@ 0x28
 8001a2e:	d16a      	bne.n	8001b06 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001a4e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a5c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001a6a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d138      	bne.n	8001ae6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	09db      	lsrs	r3, r3, #7
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	4053      	eors	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	f003 0306 	and.w	r3, r3, #6
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d11c      	bne.n	8001ac2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d13b      	bne.n	8001b16 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ab4:	89ba      	ldrh	r2, [r7, #12]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fe86 	bl	80017cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ac0:	e029      	b.n	8001b16 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ac2:	893b      	ldrh	r3, [r7, #8]
 8001ac4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ac6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fb95 	bl	80021fa <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ad8:	89ba      	ldrh	r2, [r7, #12]
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fe74 	bl	80017cc <HAL_I2C_AddrCallback>
}
 8001ae4:	e017      	b.n	8001b16 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ae6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fb85 	bl	80021fa <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001af8:	89ba      	ldrh	r2, [r7, #12]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fe64 	bl	80017cc <HAL_I2C_AddrCallback>
}
 8001b04:	e007      	b.n	8001b16 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e00c      	b.n	8001b6c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b29      	cmp	r3, #41	@ 0x29
 8001b76:	d112      	bne.n	8001b9e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2228      	movs	r2, #40	@ 0x28
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2221      	movs	r2, #33	@ 0x21
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b86:	2101      	movs	r1, #1
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fb36 	bl	80021fa <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fe04 	bl	80017a4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b9c:	e017      	b.n	8001bce <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ba8:	d111      	bne.n	8001bce <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2228      	movs	r2, #40	@ 0x28
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2222      	movs	r2, #34	@ 0x22
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bb8:	2102      	movs	r1, #2
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fb1d 	bl	80021fa <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fdf5 	bl	80017b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bfa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2220      	movs	r2, #32
 8001c02:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	2b21      	cmp	r3, #33	@ 0x21
 8001c08:	d002      	beq.n	8001c10 <I2C_ITSlaveCplt+0x38>
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	2b29      	cmp	r3, #41	@ 0x29
 8001c0e:	d108      	bne.n	8001c22 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c10:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 faf0 	bl	80021fa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2221      	movs	r2, #33	@ 0x21
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c20:	e019      	b.n	8001c56 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	2b22      	cmp	r3, #34	@ 0x22
 8001c26:	d002      	beq.n	8001c2e <I2C_ITSlaveCplt+0x56>
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c2c:	d108      	bne.n	8001c40 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001c2e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fae1 	bl	80021fa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2222      	movs	r2, #34	@ 0x22
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c3e:	e00a      	b.n	8001c56 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	2b28      	cmp	r3, #40	@ 0x28
 8001c44:	d107      	bne.n	8001c56 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001c46:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fad5 	bl	80021fa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c64:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b89      	ldr	r3, [pc, #548]	@ (8001e98 <I2C_ITSlaveCplt+0x2c0>)
 8001c72:	400b      	ands	r3, r1
 8001c74:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa7d 	bl	8002176 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d013      	beq.n	8001cae <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01f      	beq.n	8001cde <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cac:	e017      	b.n	8001cde <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d012      	beq.n	8001cde <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f023 0304 	bic.w	r3, r3, #4
 8001cee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00c      	beq.n	8001d2a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d38:	f043 0204 	orr.w	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d049      	beq.n	8001dde <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d044      	beq.n	8001dde <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d128      	bne.n	8001db0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b28      	cmp	r3, #40	@ 0x28
 8001d68:	d108      	bne.n	8001d7c <I2C_ITSlaveCplt+0x1a4>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d70:	d104      	bne.n	8001d7c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d72:	6979      	ldr	r1, [r7, #20]
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f893 	bl	8001ea0 <I2C_ITListenCplt>
 8001d7a:	e030      	b.n	8001dde <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b29      	cmp	r3, #41	@ 0x29
 8001d86:	d10e      	bne.n	8001da6 <I2C_ITSlaveCplt+0x1ce>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d8e:	d00a      	beq.n	8001da6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2210      	movs	r2, #16
 8001d96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9ec 	bl	8002176 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff febd 	bl	8001b1e <I2C_ITSlaveSeqCplt>
 8001da4:	e01b      	b.n	8001dde <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2210      	movs	r2, #16
 8001dac:	61da      	str	r2, [r3, #28]
 8001dae:	e016      	b.n	8001dde <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2210      	movs	r2, #16
 8001db6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <I2C_ITSlaveCplt+0x1fa>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd0:	d105      	bne.n	8001dde <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8b5 	bl	8001f48 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8a4 	bl	8001f48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b28      	cmp	r3, #40	@ 0x28
 8001e0a:	d141      	bne.n	8001e90 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f846 	bl	8001ea0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e14:	e03c      	b.n	8001e90 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e1e:	d014      	beq.n	8001e4a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fe7c 	bl	8001b1e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <I2C_ITSlaveCplt+0x2c4>)
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fcd0 	bl	80017e8 <HAL_I2C_ListenCpltCallback>
}
 8001e48:	e022      	b.n	8001e90 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b22      	cmp	r3, #34	@ 0x22
 8001e54:	d10e      	bne.n	8001e74 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fca3 	bl	80017b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e72:	e00d      	b.n	8001e90 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fc8a 	bl	80017a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	fe00e800 	.word	0xfe00e800
 8001e9c:	ffff0000 	.word	0xffff0000

08001ea0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a25      	ldr	r2, [pc, #148]	@ (8001f44 <I2C_ITListenCplt+0xa4>)
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d022      	beq.n	8001f1c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	f043 0204 	orr.w	r2, r3, #4
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f1c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f96a 	bl	80021fa <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fc56 	bl	80017e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	ffff0000 	.word	0xffff0000

08001f48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f58:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a6d      	ldr	r2, [pc, #436]	@ (800211c <I2C_ITError+0x1d4>)
 8001f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b28      	cmp	r3, #40	@ 0x28
 8001f7e:	d005      	beq.n	8001f8c <I2C_ITError+0x44>
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b29      	cmp	r3, #41	@ 0x29
 8001f84:	d002      	beq.n	8001f8c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f8a:	d10b      	bne.n	8001fa4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f933 	bl	80021fa <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2228      	movs	r2, #40	@ 0x28
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a60      	ldr	r2, [pc, #384]	@ (8002120 <I2C_ITError+0x1d8>)
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fa2:	e030      	b.n	8002006 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fa4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f926 	bl	80021fa <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8e1 	bl	8002176 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b60      	cmp	r3, #96	@ 0x60
 8001fbe:	d01f      	beq.n	8002000 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d114      	bne.n	8002000 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d109      	bne.n	8001ff8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002010:	2b00      	cmp	r3, #0
 8002012:	d039      	beq.n	8002088 <I2C_ITError+0x140>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b11      	cmp	r3, #17
 8002018:	d002      	beq.n	8002020 <I2C_ITError+0xd8>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b21      	cmp	r3, #33	@ 0x21
 800201e:	d133      	bne.n	8002088 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800202e:	d107      	bne.n	8002040 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800203e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff f8c5 	bl	80011d4 <HAL_DMA_GetState>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d017      	beq.n	8002080 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	4a33      	ldr	r2, [pc, #204]	@ (8002124 <I2C_ITError+0x1dc>)
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f84e 	bl	8001106 <HAL_DMA_Abort_IT>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d04d      	beq.n	800210c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800207a:	4610      	mov	r0, r2
 800207c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800207e:	e045      	b.n	800210c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f851 	bl	8002128 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002086:	e041      	b.n	800210c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d039      	beq.n	8002104 <I2C_ITError+0x1bc>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b12      	cmp	r3, #18
 8002094:	d002      	beq.n	800209c <I2C_ITError+0x154>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b22      	cmp	r3, #34	@ 0x22
 800209a:	d133      	bne.n	8002104 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020aa:	d107      	bne.n	80020bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f887 	bl	80011d4 <HAL_DMA_GetState>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d017      	beq.n	80020fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <I2C_ITError+0x1dc>)
 80020d2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f810 	bl	8001106 <HAL_DMA_Abort_IT>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020f6:	4610      	mov	r0, r2
 80020f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020fa:	e009      	b.n	8002110 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f813 	bl	8002128 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002102:	e005      	b.n	8002110 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f80f 	bl	8002128 <I2C_TreatErrorCallback>
  }
}
 800210a:	e002      	b.n	8002112 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002110:	bf00      	nop
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	ffff0000 	.word	0xffff0000
 8002120:	08001825 	.word	0x08001825
 8002124:	080021bf 	.word	0x080021bf

08002128 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b60      	cmp	r3, #96	@ 0x60
 800213a:	d10e      	bne.n	800215a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fb5c 	bl	8001810 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002158:	e009      	b.n	800216e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fb47 	bl	80017fc <HAL_I2C_ErrorCallback>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b02      	cmp	r3, #2
 800218a:	d103      	bne.n	8002194 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d007      	beq.n	80021b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	619a      	str	r2, [r3, #24]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	2200      	movs	r2, #0
 80021da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	2200      	movs	r2, #0
 80021ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ff9b 	bl	8002128 <I2C_TreatErrorCallback>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800221a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002228:	2b28      	cmp	r3, #40	@ 0x28
 800222a:	d003      	beq.n	8002234 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002232:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00f      	beq.n	800225e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002244:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002252:	2b28      	cmp	r3, #40	@ 0x28
 8002254:	d003      	beq.n	800225e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800225c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800225e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002262:	2b00      	cmp	r3, #0
 8002264:	da03      	bge.n	800226e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800226c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d103      	bne.n	800227c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800227a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	2b20      	cmp	r3, #32
 8002280:	d103      	bne.n	800228a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	2b40      	cmp	r3, #64	@ 0x40
 800228e:	d103      	bne.n	8002298 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d138      	bne.n	800233e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e032      	b.n	8002340 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2224      	movs	r2, #36	@ 0x24
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002308:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	d139      	bne.n	80023d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800236c:	2302      	movs	r3, #2
 800236e:	e033      	b.n	80023d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	@ 0x24
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800239e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d141      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fe:	d131      	bne.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002400:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002406:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800240c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002410:	4b43      	ldr	r3, [pc, #268]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002418:	4a41      	ldr	r2, [pc, #260]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800241e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002420:	4b40      	ldr	r3, [pc, #256]	@ (8002524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2232      	movs	r2, #50	@ 0x32
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	4a3f      	ldr	r2, [pc, #252]	@ (8002528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	3301      	adds	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002436:	e002      	b.n	800243e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3b01      	subs	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243e:	4b38      	ldr	r3, [pc, #224]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244a:	d102      	bne.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f2      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002452:	4b33      	ldr	r3, [pc, #204]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245e:	d158      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e057      	b.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002464:	4b2e      	ldr	r3, [pc, #184]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800246a:	4a2d      	ldr	r2, [pc, #180]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002470:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002474:	e04d      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800247c:	d141      	bne.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248a:	d131      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800248c:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002492:	4a23      	ldr	r2, [pc, #140]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002498:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800249c:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2232      	movs	r2, #50	@ 0x32
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9b      	lsrs	r3, r3, #18
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024c2:	e002      	b.n	80024ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	d102      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f2      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ea:	d112      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e011      	b.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002500:	e007      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002510:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40007000 	.word	0x40007000
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e2fe      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b97      	ldr	r3, [pc, #604]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b94      	ldr	r3, [pc, #592]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0x3e>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d002      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b8d      	ldr	r3, [pc, #564]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e2d9      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b85      	ldr	r3, [pc, #532]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a84      	ldr	r2, [pc, #528]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b7f      	ldr	r3, [pc, #508]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7e      	ldr	r2, [pc, #504]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b7c      	ldr	r3, [pc, #496]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7b      	ldr	r2, [pc, #492]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b78      	ldr	r3, [pc, #480]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a77      	ldr	r2, [pc, #476]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b75      	ldr	r3, [pc, #468]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a74      	ldr	r2, [pc, #464]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fc64 	bl	8000ed0 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fc60 	bl	8000ed0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e29e      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261e:	4b6a      	ldr	r3, [pc, #424]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fc50 	bl	8000ed0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe fc4c 	bl	8000ed0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e28a      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002646:	4b60      	ldr	r3, [pc, #384]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d075      	beq.n	800274e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266c:	4b56      	ldr	r3, [pc, #344]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x136>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d002      	beq.n	8002688 <HAL_RCC_OscConfig+0x13c>
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11f      	bne.n	80026c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002688:	4b4f      	ldr	r3, [pc, #316]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_OscConfig+0x154>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e25d      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	4946      	ldr	r1, [pc, #280]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026b4:	4b45      	ldr	r3, [pc, #276]	@ (80027cc <HAL_RCC_OscConfig+0x280>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fbbd 	bl	8000e38 <HAL_InitTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d043      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e249      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b3d      	ldr	r3, [pc, #244]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3c      	ldr	r2, [pc, #240]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fbf8 	bl	8000ed0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7fe fbf4 	bl	8000ed0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e232      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f6:	4b34      	ldr	r3, [pc, #208]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b31      	ldr	r3, [pc, #196]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	492d      	ldr	r1, [pc, #180]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	e01a      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002718:	4b2b      	ldr	r3, [pc, #172]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800271e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fbd4 	bl	8000ed0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272c:	f7fe fbd0 	bl	8000ed0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e20e      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273e:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x1e0>
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d041      	beq.n	80027de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01c      	beq.n	800279c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002768:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fbad 	bl	8000ed0 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe fba9 	bl	8000ed0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1e7      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ef      	beq.n	800277a <HAL_RCC_OscConfig+0x22e>
 800279a:	e020      	b.n	80027de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe fb90 	bl	8000ed0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b2:	e00d      	b.n	80027d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7fe fb8c 	bl	8000ed0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d906      	bls.n	80027d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1ca      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ea      	bne.n	80027b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80a6 	beq.w	8002938 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f0:	4b84      	ldr	r3, [pc, #528]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x2b4>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x2b6>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b7f      	ldr	r3, [pc, #508]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002810:	6593      	str	r3, [r2, #88]	@ 0x58
 8002812:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	4b79      	ldr	r3, [pc, #484]	@ (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282e:	4b76      	ldr	r3, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	@ (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe fb49 	bl	8000ed0 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe fb45 	bl	8000ed0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e183      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002854:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x32e>
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	4a65      	ldr	r2, [pc, #404]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002878:	e024      	b.n	80028c4 <HAL_RCC_OscConfig+0x378>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d110      	bne.n	80028a4 <HAL_RCC_OscConfig+0x358>
 8002882:	4b60      	ldr	r3, [pc, #384]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	4a5e      	ldr	r2, [pc, #376]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002892:	4b5c      	ldr	r3, [pc, #368]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002898:	4a5a      	ldr	r2, [pc, #360]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x378>
 80028a4:	4b57      	ldr	r3, [pc, #348]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	4a56      	ldr	r2, [pc, #344]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ba:	4a52      	ldr	r2, [pc, #328]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fb00 	bl	8000ed0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fafc 	bl	8000ed0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e138      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ea:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ed      	beq.n	80028d4 <HAL_RCC_OscConfig+0x388>
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fae9 	bl	8000ed0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fae5 	bl	8000ed0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e121      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002918:	4b3a      	ldr	r3, [pc, #232]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ed      	bne.n	8002902 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002926:	7ffb      	ldrb	r3, [r7, #31]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03c      	beq.n	80029be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01c      	beq.n	8002986 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800294c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002952:	4a2c      	ldr	r2, [pc, #176]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fab8 	bl	8000ed0 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002964:	f7fe fab4 	bl	8000ed0 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0f2      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002976:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <HAL_RCC_OscConfig+0x418>
 8002984:	e01b      	b.n	80029be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002986:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800298c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe fa9b 	bl	8000ed0 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800299e:	f7fe fa97 	bl	8000ed0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0d5      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ef      	bne.n	800299e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80c9 	beq.w	8002b5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	f000 8083 	beq.w	8002adc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d15e      	bne.n	8002a9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fa71 	bl	8000ed0 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	e00c      	b.n	8002a0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe fa6d 	bl	8000ed0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d905      	bls.n	8002a0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0ab      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	4b55      	ldr	r3, [pc, #340]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ec      	bne.n	80029f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	4b52      	ldr	r3, [pc, #328]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	4b52      	ldr	r3, [pc, #328]	@ (8002b68 <HAL_RCC_OscConfig+0x61c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6a11      	ldr	r1, [r2, #32]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a32:	0212      	lsls	r2, r2, #8
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0552      	lsls	r2, r2, #21
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0652      	lsls	r2, r2, #25
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a52:	06d2      	lsls	r2, r2, #27
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4943      	ldr	r1, [pc, #268]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a40      	ldr	r2, [pc, #256]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a68:	4b3e      	ldr	r3, [pc, #248]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fa2c 	bl	8000ed0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fa28 	bl	8000ed0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e066      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	4b35      	ldr	r3, [pc, #212]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x530>
 8002a9a:	e05e      	b.n	8002b5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a30      	ldr	r2, [pc, #192]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fa12 	bl	8000ed0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fa0e 	bl	8000ed0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e04c      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac2:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ace:	4b25      	ldr	r3, [pc, #148]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4924      	ldr	r1, [pc, #144]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <HAL_RCC_OscConfig+0x620>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
 8002ada:	e03e      	b.n	8002b5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e039      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_RCC_OscConfig+0x618>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d12c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	3b01      	subs	r3, #1
 8002b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d123      	bne.n	8002b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11b      	bne.n	8002b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d113      	bne.n	8002b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	019f800c 	.word	0x019f800c
 8002b6c:	feeefffc 	.word	0xfeeefffc

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e11e      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b91      	ldr	r3, [pc, #580]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b8e      	ldr	r3, [pc, #568]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 020f 	bic.w	r2, r3, #15
 8002b9e:	498c      	ldr	r1, [pc, #560]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b8a      	ldr	r3, [pc, #552]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e106      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d073      	beq.n	8002cac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d129      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bcc:	4b81      	ldr	r3, [pc, #516]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0f4      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002bdc:	f000 f99e 	bl	8002f1c <RCC_GetSysClockFreqFromPLLSource>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd8 <HAL_RCC_ClockConfig+0x268>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d93f      	bls.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bea:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d033      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d12f      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c0a:	4b72      	ldr	r3, [pc, #456]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c12:	4a70      	ldr	r2, [pc, #448]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e024      	b.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0c6      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0be      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c48:	f000 f8ce 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4a61      	ldr	r2, [pc, #388]	@ (8002dd8 <HAL_RCC_ClockConfig+0x268>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d909      	bls.n	8002c6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c56:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c5e:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4957      	ldr	r1, [pc, #348]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f928 	bl	8000ed0 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe f924 	bl	8000ed0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e095      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 020c 	and.w	r2, r3, #12
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d1eb      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b43      	ldr	r3, [pc, #268]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a42      	ldr	r2, [pc, #264]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002ce6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b39      	ldr	r3, [pc, #228]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4936      	ldr	r1, [pc, #216]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b80      	cmp	r3, #128	@ 0x80
 8002d04:	d105      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d06:	4b33      	ldr	r3, [pc, #204]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4a32      	ldr	r2, [pc, #200]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d12:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d21d      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 020f 	bic.w	r2, r3, #15
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d30:	f7fe f8ce 	bl	8000ed0 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe f8ca 	bl	8000ed0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e03b      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1ed      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4917      	ldr	r1, [pc, #92]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	490f      	ldr	r1, [pc, #60]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d9a:	f000 f825 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <HAL_RCC_ClockConfig+0x264>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	490c      	ldr	r1, [pc, #48]	@ (8002ddc <HAL_RCC_ClockConfig+0x26c>)
 8002dac:	5ccb      	ldrb	r3, [r1, r3]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_RCC_ClockConfig+0x270>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_RCC_ClockConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f83a 	bl	8000e38 <HAL_InitTick>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	04c4b400 	.word	0x04c4b400
 8002ddc:	08004be0 	.word	0x08004be0
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	e047      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e00:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e03e      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e12:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d136      	bne.n	8002e8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3301      	adds	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	4a16      	ldr	r2, [pc, #88]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e46:	68d2      	ldr	r2, [r2, #12]
 8002e48:	0a12      	lsrs	r2, r2, #8
 8002e4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e00c      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e56:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	0a12      	lsrs	r2, r2, #8
 8002e64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0e5b      	lsrs	r3, r3, #25
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	e001      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e90:	693b      	ldr	r3, [r7, #16]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	016e3600 	.word	0x016e3600

08002eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ec8:	f7ff fff0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4904      	ldr	r1, [pc, #16]	@ (8002eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08004bf0 	.word	0x08004bf0

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ef4:	f7ff ffda 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0adb      	lsrs	r3, r3, #11
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4904      	ldr	r1, [pc, #16]	@ (8002f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08004bf0 	.word	0x08004bf0

08002f1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f22:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d10c      	bne.n	8002f5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f40:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f4a:	68d2      	ldr	r2, [r2, #12]
 8002f4c:	0a12      	lsrs	r2, r2, #8
 8002f4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
    break;
 8002f58:	e00c      	b.n	8002f74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f5a:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4a0e      	ldr	r2, [pc, #56]	@ (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0a12      	lsrs	r2, r2, #8
 8002f68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    break;
 8002f72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0e5b      	lsrs	r3, r3, #25
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f8e:	687b      	ldr	r3, [r7, #4]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	016e3600 	.word	0x016e3600
 8002fa4:	00f42400 	.word	0x00f42400

08002fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8098 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b43      	ldr	r3, [pc, #268]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b40      	ldr	r3, [pc, #256]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fda:	4a3f      	ldr	r2, [pc, #252]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a39      	ldr	r2, [pc, #228]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffe:	f7fd ff67 	bl	8000ed0 <HAL_GetTick>
 8003002:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003004:	e009      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fd ff63 	bl	8000ed0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	74fb      	strb	r3, [r7, #19]
        break;
 8003018:	e005      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ef      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d159      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302c:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01e      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	d019      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003048:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003054:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305a:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003064:	4b1c      	ldr	r3, [pc, #112]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003074:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd ff23 	bl	8000ed0 <HAL_GetTick>
 800308a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	e00b      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fd ff1f 	bl	8000ed0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d902      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	74fb      	strb	r3, [r7, #19]
            break;
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a6:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ec      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c8:	4903      	ldr	r1, [pc, #12]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030d0:	e008      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
 80030d6:	e005      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7c7b      	ldrb	r3, [r7, #17]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4ba7      	ldr	r3, [pc, #668]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	4aa6      	ldr	r2, [pc, #664]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003102:	4ba1      	ldr	r3, [pc, #644]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	499d      	ldr	r1, [pc, #628]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003124:	4b98      	ldr	r3, [pc, #608]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312a:	f023 020c 	bic.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4995      	ldr	r1, [pc, #596]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003146:	4b90      	ldr	r3, [pc, #576]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	498c      	ldr	r1, [pc, #560]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003168:	4b87      	ldr	r3, [pc, #540]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	4984      	ldr	r1, [pc, #528]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	497b      	ldr	r1, [pc, #492]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ac:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	4973      	ldr	r1, [pc, #460]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	496a      	ldr	r1, [pc, #424]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f0:	4b65      	ldr	r3, [pc, #404]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4962      	ldr	r1, [pc, #392]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003212:	4b5d      	ldr	r3, [pc, #372]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003218:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	4959      	ldr	r1, [pc, #356]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003234:	4b54      	ldr	r3, [pc, #336]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	4951      	ldr	r1, [pc, #324]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003256:	4b4c      	ldr	r3, [pc, #304]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	4948      	ldr	r1, [pc, #288]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003278:	4b43      	ldr	r3, [pc, #268]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	4940      	ldr	r1, [pc, #256]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003296:	d105      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003298:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032b0:	4b35      	ldr	r3, [pc, #212]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032be:	4932      	ldr	r1, [pc, #200]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	4924      	ldr	r1, [pc, #144]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b1f      	ldr	r3, [pc, #124]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a1e      	ldr	r2, [pc, #120]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003320:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003326:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332e:	4916      	ldr	r1, [pc, #88]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a10      	ldr	r2, [pc, #64]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800334a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d019      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003376:	d109      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b03      	ldr	r3, [pc, #12]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a02      	ldr	r2, [pc, #8]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
 8003384:	e002      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003398:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	4926      	ldr	r1, [pc, #152]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033b6:	d105      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033b8:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a20      	ldr	r2, [pc, #128]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80033d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033de:	4918      	ldr	r1, [pc, #96]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ee:	d105      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003408:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800340a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800340e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	490a      	ldr	r1, [pc, #40]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003426:	d105      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800342e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003432:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003434:	7cbb      	ldrb	r3, [r7, #18]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000

08003444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e09d      	b.n	8003592 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003466:	d009      	beq.n	800347c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
 800346e:	e005      	b.n	800347c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fbd8 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034bc:	d902      	bls.n	80034c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e002      	b.n	80034ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80034d2:	d007      	beq.n	80034e4 <HAL_SPI_Init+0xa0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034dc:	d002      	beq.n	80034e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003526:	ea42 0103 	orr.w	r1, r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	f003 0204 	and.w	r2, r3, #4
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035b4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035bc:	7dbb      	ldrb	r3, [r7, #22]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d00d      	beq.n	80035de <HAL_SPI_TransmitReceive_IT+0x42>
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c8:	d106      	bne.n	80035d8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80035d2:	7dbb      	ldrb	r3, [r7, #22]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d002      	beq.n	80035de <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035dc:	e07d      	b.n	80036da <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_SPI_TransmitReceive_IT+0x54>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_TransmitReceive_IT+0x54>
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035f4:	e071      	b.n	80036da <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_SPI_TransmitReceive_IT+0x68>
 8003600:	2302      	movs	r3, #2
 8003602:	e06b      	b.n	80036dc <HAL_SPI_TransmitReceive_IT+0x140>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b04      	cmp	r3, #4
 8003616:	d003      	beq.n	8003620 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2205      	movs	r2, #5
 800361c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	887a      	ldrh	r2, [r7, #2]
 8003636:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	887a      	ldrh	r2, [r7, #2]
 8003642:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003656:	d906      	bls.n	8003666 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a23      	ldr	r2, [pc, #140]	@ (80036e8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800365c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a22      	ldr	r2, [pc, #136]	@ (80036ec <HAL_SPI_TransmitReceive_IT+0x150>)
 8003662:	651a      	str	r2, [r3, #80]	@ 0x50
 8003664:	e005      	b.n	8003672 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800366a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003670:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800367a:	d802      	bhi.n	8003682 <HAL_SPI_TransmitReceive_IT+0xe6>
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d908      	bls.n	8003694 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e007      	b.n	80036a4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036a2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d007      	beq.n	80036c2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80036d8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	08003a83 	.word	0x08003a83
 80036ec:	08003ae9 	.word	0x08003ae9
 80036f0:	08003933 	.word	0x08003933
 80036f4:	080039f1 	.word	0x080039f1

080036f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10e      	bne.n	8003738 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
    return;
 8003736:	e0ce      	b.n	80038d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_SPI_IRQHandler+0x5e>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
    return;
 8003754:	e0bf      	b.n	80038d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_SPI_IRQHandler+0x7e>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80b0 	beq.w	80038d6 <HAL_SPI_IRQHandler+0x1de>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80aa 	beq.w	80038d6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d023      	beq.n	80037d4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b03      	cmp	r3, #3
 8003796:	d011      	beq.n	80037bc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	e00b      	b.n	80037d4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
        return;
 80037d2:	e080      	b.n	80038d6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003816:	f043 0208 	orr.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	2b00      	cmp	r3, #0
 8003832:	d04f      	beq.n	80038d4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003842:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <HAL_SPI_IRQHandler+0x168>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d034      	beq.n	80038ca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0203 	bic.w	r2, r2, #3
 800386e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387c:	4a17      	ldr	r2, [pc, #92]	@ (80038dc <HAL_SPI_IRQHandler+0x1e4>)
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fc3e 	bl	8001106 <HAL_DMA_Abort_IT>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003894:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d016      	beq.n	80038d2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	4a0c      	ldr	r2, [pc, #48]	@ (80038dc <HAL_SPI_IRQHandler+0x1e4>)
 80038aa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fd fc28 	bl	8001106 <HAL_DMA_Abort_IT>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80038c8:	e003      	b.n	80038d2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f812 	bl	80038f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038d0:	e000      	b.n	80038d4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80038d2:	bf00      	nop
    return;
 80038d4:	bf00      	nop
  }
}
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	08003909 	.word	0x08003909

080038e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003914:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff ffe5 	bl	80038f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d923      	bls.n	800398e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	b292      	uxth	r2, r2
 8003952:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b02      	subs	r3, #2
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d11f      	bne.n	80039bc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	e016      	b.n	80039bc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f103 020c 	add.w	r2, r3, #12
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa14 	bl	8003e10 <SPI_CloseRxTx_ISR>
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d912      	bls.n	8003a28 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b02      	subs	r3, #2
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a26:	e012      	b.n	8003a4e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	7812      	ldrb	r2, [r2, #0]
 8003a34:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d110      	bne.n	8003a7a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a66:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f9cb 	bl	8003e10 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	b292      	uxth	r2, r2
 8003a96:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	1c9a      	adds	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ace:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f998 	bl	8003e10 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d110      	bne.n	8003b40 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b2c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f968 	bl	8003e10 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b58:	f7fd f9ba 	bl	8000ed0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	4413      	add	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b68:	f7fd f9b2 	bl	8000ed0 <HAL_GetTick>
 8003b6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b6e:	4b39      	ldr	r3, [pc, #228]	@ (8003c54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	015b      	lsls	r3, r3, #5
 8003b74:	0d1b      	lsrs	r3, r3, #20
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7e:	e054      	b.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b86:	d050      	beq.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b88:	f7fd f9a2 	bl	8000ed0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d902      	bls.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d13d      	bne.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb6:	d111      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc0:	d004      	beq.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d107      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be4:	d10f      	bne.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e017      	b.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d19b      	bne.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000

08003c58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c6a:	f7fd f931 	bl	8000ed0 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c7a:	f7fd f929 	bl	8000ed0 <HAL_GetTick>
 8003c7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c88:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	0d1b      	lsrs	r3, r3, #20
 8003c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ca0:	e060      	b.n	8003d64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ca8:	d107      	bne.n	8003cba <SPI_WaitFifoStateUntilTimeout+0x62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc0:	d050      	beq.n	8003d64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cc2:	f7fd f905 	bl	8000ed0 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d902      	bls.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d13d      	bne.n	8003d54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ce6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cf0:	d111      	bne.n	8003d16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cfa:	d004      	beq.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d04:	d107      	bne.n	8003d16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1e:	d10f      	bne.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e010      	b.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d196      	bne.n	8003ca2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3728      	adds	r7, #40	@ 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000000 	.word	0x20000000

08003d84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff ff5b 	bl	8003c58 <SPI_WaitFifoStateUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e027      	b.n	8003e08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2180      	movs	r1, #128	@ 0x80
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fec0 	bl	8003b48 <SPI_WaitFlagStateUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e014      	b.n	8003e08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ff34 	bl	8003c58 <SPI_WaitFifoStateUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e000      	b.n	8003e08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e18:	f7fd f85a 	bl	8000ed0 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0220 	bic.w	r2, r2, #32
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	2164      	movs	r1, #100	@ 0x64
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ffa6 	bl	8003d84 <SPI_EndRxTxTransaction>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d115      	bne.n	8003e7e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d107      	bne.n	8003e6e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fd3a 	bl	80038e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003e6c:	e00e      	b.n	8003e8c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fc fdbc 	bl	80009f4 <HAL_SPI_TxRxCpltCallback>
}
 8003e7c:	e006      	b.n	8003e8c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff fd34 	bl	80038f4 <HAL_SPI_ErrorCallback>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e042      	b.n	8003f2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fc fe6f 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2224      	movs	r2, #36	@ 0x24
 8003ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fb24 	bl	800452c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f825 	bl	8003f34 <UART_SetConfig>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e01b      	b.n	8003f2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fba3 	bl	8004670 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b08c      	sub	sp, #48	@ 0x30
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4baa      	ldr	r3, [pc, #680]	@ (800420c <UART_SetConfig+0x2d8>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a9f      	ldr	r2, [pc, #636]	@ (8004210 <UART_SetConfig+0x2dc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003faa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	f023 010f 	bic.w	r1, r3, #15
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a90      	ldr	r2, [pc, #576]	@ (8004214 <UART_SetConfig+0x2e0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d125      	bne.n	8004024 <UART_SetConfig+0xf0>
 8003fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004218 <UART_SetConfig+0x2e4>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d81a      	bhi.n	800401c <UART_SetConfig+0xe8>
 8003fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0xb8>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	0800400d 	.word	0x0800400d
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004015 	.word	0x08004015
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004002:	e116      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004004:	2302      	movs	r3, #2
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400a:	e112      	b.n	8004232 <UART_SetConfig+0x2fe>
 800400c:	2304      	movs	r3, #4
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004012:	e10e      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004014:	2308      	movs	r3, #8
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401a:	e10a      	b.n	8004232 <UART_SetConfig+0x2fe>
 800401c:	2310      	movs	r3, #16
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004022:	e106      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a7c      	ldr	r2, [pc, #496]	@ (800421c <UART_SetConfig+0x2e8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d138      	bne.n	80040a0 <UART_SetConfig+0x16c>
 800402e:	4b7a      	ldr	r3, [pc, #488]	@ (8004218 <UART_SetConfig+0x2e4>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d82d      	bhi.n	8004098 <UART_SetConfig+0x164>
 800403c:	a201      	add	r2, pc, #4	@ (adr r2, 8004044 <UART_SetConfig+0x110>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004079 	.word	0x08004079
 8004048:	08004099 	.word	0x08004099
 800404c:	08004099 	.word	0x08004099
 8004050:	08004099 	.word	0x08004099
 8004054:	08004089 	.word	0x08004089
 8004058:	08004099 	.word	0x08004099
 800405c:	08004099 	.word	0x08004099
 8004060:	08004099 	.word	0x08004099
 8004064:	08004081 	.word	0x08004081
 8004068:	08004099 	.word	0x08004099
 800406c:	08004099 	.word	0x08004099
 8004070:	08004099 	.word	0x08004099
 8004074:	08004091 	.word	0x08004091
 8004078:	2300      	movs	r3, #0
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407e:	e0d8      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004080:	2302      	movs	r3, #2
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004086:	e0d4      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004088:	2304      	movs	r3, #4
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408e:	e0d0      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004090:	2308      	movs	r3, #8
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e0cc      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004098:	2310      	movs	r3, #16
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409e:	e0c8      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <UART_SetConfig+0x2ec>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d125      	bne.n	80040f6 <UART_SetConfig+0x1c2>
 80040aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004218 <UART_SetConfig+0x2e4>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040b4:	2b30      	cmp	r3, #48	@ 0x30
 80040b6:	d016      	beq.n	80040e6 <UART_SetConfig+0x1b2>
 80040b8:	2b30      	cmp	r3, #48	@ 0x30
 80040ba:	d818      	bhi.n	80040ee <UART_SetConfig+0x1ba>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d00a      	beq.n	80040d6 <UART_SetConfig+0x1a2>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d814      	bhi.n	80040ee <UART_SetConfig+0x1ba>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <UART_SetConfig+0x19a>
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d008      	beq.n	80040de <UART_SetConfig+0x1aa>
 80040cc:	e00f      	b.n	80040ee <UART_SetConfig+0x1ba>
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d4:	e0ad      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040d6:	2302      	movs	r3, #2
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040dc:	e0a9      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040de:	2304      	movs	r3, #4
 80040e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e4:	e0a5      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040e6:	2308      	movs	r3, #8
 80040e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ec:	e0a1      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040ee:	2310      	movs	r3, #16
 80040f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f4:	e09d      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004224 <UART_SetConfig+0x2f0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d125      	bne.n	800414c <UART_SetConfig+0x218>
 8004100:	4b45      	ldr	r3, [pc, #276]	@ (8004218 <UART_SetConfig+0x2e4>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800410a:	2bc0      	cmp	r3, #192	@ 0xc0
 800410c:	d016      	beq.n	800413c <UART_SetConfig+0x208>
 800410e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004110:	d818      	bhi.n	8004144 <UART_SetConfig+0x210>
 8004112:	2b80      	cmp	r3, #128	@ 0x80
 8004114:	d00a      	beq.n	800412c <UART_SetConfig+0x1f8>
 8004116:	2b80      	cmp	r3, #128	@ 0x80
 8004118:	d814      	bhi.n	8004144 <UART_SetConfig+0x210>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <UART_SetConfig+0x1f0>
 800411e:	2b40      	cmp	r3, #64	@ 0x40
 8004120:	d008      	beq.n	8004134 <UART_SetConfig+0x200>
 8004122:	e00f      	b.n	8004144 <UART_SetConfig+0x210>
 8004124:	2300      	movs	r3, #0
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412a:	e082      	b.n	8004232 <UART_SetConfig+0x2fe>
 800412c:	2302      	movs	r3, #2
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004132:	e07e      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004134:	2304      	movs	r3, #4
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413a:	e07a      	b.n	8004232 <UART_SetConfig+0x2fe>
 800413c:	2308      	movs	r3, #8
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004142:	e076      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004144:	2310      	movs	r3, #16
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414a:	e072      	b.n	8004232 <UART_SetConfig+0x2fe>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a35      	ldr	r2, [pc, #212]	@ (8004228 <UART_SetConfig+0x2f4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d12a      	bne.n	80041ac <UART_SetConfig+0x278>
 8004156:	4b30      	ldr	r3, [pc, #192]	@ (8004218 <UART_SetConfig+0x2e4>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004164:	d01a      	beq.n	800419c <UART_SetConfig+0x268>
 8004166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800416a:	d81b      	bhi.n	80041a4 <UART_SetConfig+0x270>
 800416c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004170:	d00c      	beq.n	800418c <UART_SetConfig+0x258>
 8004172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004176:	d815      	bhi.n	80041a4 <UART_SetConfig+0x270>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <UART_SetConfig+0x250>
 800417c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004180:	d008      	beq.n	8004194 <UART_SetConfig+0x260>
 8004182:	e00f      	b.n	80041a4 <UART_SetConfig+0x270>
 8004184:	2300      	movs	r3, #0
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418a:	e052      	b.n	8004232 <UART_SetConfig+0x2fe>
 800418c:	2302      	movs	r3, #2
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004192:	e04e      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800419a:	e04a      	b.n	8004232 <UART_SetConfig+0x2fe>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041a2:	e046      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041aa:	e042      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a17      	ldr	r2, [pc, #92]	@ (8004210 <UART_SetConfig+0x2dc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d13a      	bne.n	800422c <UART_SetConfig+0x2f8>
 80041b6:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <UART_SetConfig+0x2e4>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041c4:	d01a      	beq.n	80041fc <UART_SetConfig+0x2c8>
 80041c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ca:	d81b      	bhi.n	8004204 <UART_SetConfig+0x2d0>
 80041cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d0:	d00c      	beq.n	80041ec <UART_SetConfig+0x2b8>
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d6:	d815      	bhi.n	8004204 <UART_SetConfig+0x2d0>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <UART_SetConfig+0x2b0>
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e0:	d008      	beq.n	80041f4 <UART_SetConfig+0x2c0>
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x2d0>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ea:	e022      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041f2:	e01e      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041f4:	2304      	movs	r3, #4
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041fa:	e01a      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041fc:	2308      	movs	r3, #8
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004202:	e016      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004204:	2310      	movs	r3, #16
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800420a:	e012      	b.n	8004232 <UART_SetConfig+0x2fe>
 800420c:	cfff69f3 	.word	0xcfff69f3
 8004210:	40008000 	.word	0x40008000
 8004214:	40013800 	.word	0x40013800
 8004218:	40021000 	.word	0x40021000
 800421c:	40004400 	.word	0x40004400
 8004220:	40004800 	.word	0x40004800
 8004224:	40004c00 	.word	0x40004c00
 8004228:	40005000 	.word	0x40005000
 800422c:	2310      	movs	r3, #16
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4aae      	ldr	r2, [pc, #696]	@ (80044f0 <UART_SetConfig+0x5bc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	f040 8097 	bne.w	800436c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800423e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004242:	2b08      	cmp	r3, #8
 8004244:	d823      	bhi.n	800428e <UART_SetConfig+0x35a>
 8004246:	a201      	add	r2, pc, #4	@ (adr r2, 800424c <UART_SetConfig+0x318>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	08004271 	.word	0x08004271
 8004250:	0800428f 	.word	0x0800428f
 8004254:	08004279 	.word	0x08004279
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800427f 	.word	0x0800427f
 8004260:	0800428f 	.word	0x0800428f
 8004264:	0800428f 	.word	0x0800428f
 8004268:	0800428f 	.word	0x0800428f
 800426c:	08004287 	.word	0x08004287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004270:	f7fe fe28 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8004274:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004276:	e010      	b.n	800429a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004278:	4b9e      	ldr	r3, [pc, #632]	@ (80044f4 <UART_SetConfig+0x5c0>)
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800427c:	e00d      	b.n	800429a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe fdb3 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8004282:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004284:	e009      	b.n	800429a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800428c:	e005      	b.n	800429a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8130 	beq.w	8004502 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	4a94      	ldr	r2, [pc, #592]	@ (80044f8 <UART_SetConfig+0x5c4>)
 80042a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d305      	bcc.n	80042d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d903      	bls.n	80042da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042d8:	e113      	b.n	8004502 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	2200      	movs	r2, #0
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	60fa      	str	r2, [r7, #12]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	4a84      	ldr	r2, [pc, #528]	@ (80044f8 <UART_SetConfig+0x5c4>)
 80042e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2200      	movs	r2, #0
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042fc:	f7fb ff8c 	bl	8000218 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	020b      	lsls	r3, r1, #8
 8004312:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004316:	0202      	lsls	r2, r0, #8
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	6849      	ldr	r1, [r1, #4]
 800431c:	0849      	lsrs	r1, r1, #1
 800431e:	2000      	movs	r0, #0
 8004320:	460c      	mov	r4, r1
 8004322:	4605      	mov	r5, r0
 8004324:	eb12 0804 	adds.w	r8, r2, r4
 8004328:	eb43 0905 	adc.w	r9, r3, r5
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	469a      	mov	sl, r3
 8004334:	4693      	mov	fp, r2
 8004336:	4652      	mov	r2, sl
 8004338:	465b      	mov	r3, fp
 800433a:	4640      	mov	r0, r8
 800433c:	4649      	mov	r1, r9
 800433e:	f7fb ff6b 	bl	8000218 <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4613      	mov	r3, r2
 8004348:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004350:	d308      	bcc.n	8004364 <UART_SetConfig+0x430>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004358:	d204      	bcs.n	8004364 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	e0ce      	b.n	8004502 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800436a:	e0ca      	b.n	8004502 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004374:	d166      	bne.n	8004444 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004376:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800437a:	2b08      	cmp	r3, #8
 800437c:	d827      	bhi.n	80043ce <UART_SetConfig+0x49a>
 800437e:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <UART_SetConfig+0x450>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fe fd8c 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 80043ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043ae:	e014      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fe fd9e 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 80043b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b4e      	ldr	r3, [pc, #312]	@ (80044f4 <UART_SetConfig+0x5c0>)
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043bc:	e00d      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fe fd13 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 80043c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043c4:	e009      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043cc:	e005      	b.n	80043da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8090 	beq.w	8004502 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	4a44      	ldr	r2, [pc, #272]	@ (80044f8 <UART_SetConfig+0x5c4>)
 80043e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f4:	005a      	lsls	r2, r3, #1
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	441a      	add	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	d916      	bls.n	800443c <UART_SetConfig+0x508>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004414:	d212      	bcs.n	800443c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f023 030f 	bic.w	r3, r3, #15
 800441e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	b29a      	uxth	r2, r3
 800442c:	8bfb      	ldrh	r3, [r7, #30]
 800442e:	4313      	orrs	r3, r2
 8004430:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	8bfa      	ldrh	r2, [r7, #30]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	e062      	b.n	8004502 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004442:	e05e      	b.n	8004502 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004444:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004448:	2b08      	cmp	r3, #8
 800444a:	d828      	bhi.n	800449e <UART_SetConfig+0x56a>
 800444c:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <UART_SetConfig+0x520>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	0800449f 	.word	0x0800449f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800449f 	.word	0x0800449f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe fd24 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 800447c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800447e:	e014      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe fd36 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8004484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004486:	e010      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b1a      	ldr	r3, [pc, #104]	@ (80044f4 <UART_SetConfig+0x5c0>)
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe fcab 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8004492:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800449c:	e005      	b.n	80044aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044a8:	bf00      	nop
    }

    if (pclk != 0U)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d028      	beq.n	8004502 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	4a10      	ldr	r2, [pc, #64]	@ (80044f8 <UART_SetConfig+0x5c4>)
 80044b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ba:	461a      	mov	r2, r3
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	fbb3 f2f2 	udiv	r2, r3, r2
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	441a      	add	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d910      	bls.n	80044fc <UART_SetConfig+0x5c8>
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e0:	d20c      	bcs.n	80044fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0x5ce>
 80044ee:	bf00      	nop
 80044f0:	40008000 	.word	0x40008000
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	08004bf8 	.word	0x08004bf8
      }
      else
      {
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2201      	movs	r2, #1
 8004506:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2201      	movs	r2, #1
 800450e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800451e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	@ 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800452c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01a      	beq.n	8004642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800462a:	d10a      	bne.n	8004642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b098      	sub	sp, #96	@ 0x60
 8004674:	af02      	add	r7, sp, #8
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004680:	f7fc fc26 	bl	8000ed0 <HAL_GetTick>
 8004684:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b08      	cmp	r3, #8
 8004692:	d12f      	bne.n	80046f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f88e 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d022      	beq.n	80046f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e6      	bne.n	80046ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e063      	b.n	80047bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d149      	bne.n	8004796 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004702:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470a:	2200      	movs	r2, #0
 800470c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f857 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03c      	beq.n	8004796 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	623b      	str	r3, [r7, #32]
   return(result);
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30
 800473c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e6      	bne.n	800471c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	60fb      	str	r3, [r7, #12]
   return(result);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800476e:	61fa      	str	r2, [r7, #28]
 8004770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	617b      	str	r3, [r7, #20]
   return(result);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e5      	bne.n	800474e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e012      	b.n	80047bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3758      	adds	r7, #88	@ 0x58
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d4:	e04f      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047dc:	d04b      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7fc fb77 	bl	8000ed0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e04e      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d037      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b80      	cmp	r3, #128	@ 0x80
 800480a:	d034      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d031      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d110      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2208      	movs	r2, #8
 8004826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f838 	bl	800489e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2208      	movs	r2, #8
 8004832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e029      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004850:	d111      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800485a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f81e 	bl	800489e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e00f      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4013      	ands	r3, r2
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	429a      	cmp	r2, r3
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	429a      	cmp	r2, r3
 8004892:	d0a0      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489e:	b480      	push	{r7}
 80048a0:	b095      	sub	sp, #84	@ 0x54
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e3      	bne.n	80048d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d118      	bne.n	800494a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	60bb      	str	r3, [r7, #8]
   return(result);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f023 0310 	bic.w	r3, r3, #16
 800492c:	647b      	str	r3, [r7, #68]	@ 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	613b      	str	r3, [r7, #16]
   return(result);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e6      	bne.n	8004918 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800495e:	bf00      	nop
 8004960:	3754      	adds	r7, #84	@ 0x54
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_UARTEx_DisableFifoMode+0x16>
 800497c:	2302      	movs	r3, #2
 800497e:	e027      	b.n	80049d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2224      	movs	r2, #36	@ 0x24
 800498c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80049ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e02d      	b.n	8004a50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2224      	movs	r2, #36	@ 0x24
 8004a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f84f 	bl	8004ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e02d      	b.n	8004acc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2224      	movs	r2, #36	@ 0x24
 8004a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f811 	bl	8004ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004af4:	e031      	b.n	8004b5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004af6:	2308      	movs	r3, #8
 8004af8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004afa:	2308      	movs	r3, #8
 8004afc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	0e5b      	lsrs	r3, r3, #25
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	0f5b      	lsrs	r3, r3, #29
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b1e:	7bbb      	ldrb	r3, [r7, #14]
 8004b20:	7b3a      	ldrb	r2, [r7, #12]
 8004b22:	4911      	ldr	r1, [pc, #68]	@ (8004b68 <UARTEx_SetNbDataToProcess+0x94>)
 8004b24:	5c8a      	ldrb	r2, [r1, r2]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b2a:	7b3a      	ldrb	r2, [r7, #12]
 8004b2c:	490f      	ldr	r1, [pc, #60]	@ (8004b6c <UARTEx_SetNbDataToProcess+0x98>)
 8004b2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	7b7a      	ldrb	r2, [r7, #13]
 8004b40:	4909      	ldr	r1, [pc, #36]	@ (8004b68 <UARTEx_SetNbDataToProcess+0x94>)
 8004b42:	5c8a      	ldrb	r2, [r1, r2]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b48:	7b7a      	ldrb	r2, [r7, #13]
 8004b4a:	4908      	ldr	r1, [pc, #32]	@ (8004b6c <UARTEx_SetNbDataToProcess+0x98>)
 8004b4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	08004c10 	.word	0x08004c10
 8004b6c:	08004c18 	.word	0x08004c18

08004b70 <memset>:
 8004b70:	4402      	add	r2, r0
 8004b72:	4603      	mov	r3, r0
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d100      	bne.n	8004b7a <memset+0xa>
 8004b78:	4770      	bx	lr
 8004b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7e:	e7f9      	b.n	8004b74 <memset+0x4>

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	@ (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	@ (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	@ (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f000 f818 	bl	8004bc8 <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08004c28 	.word	0x08004c28
 8004bbc:	08004c28 	.word	0x08004c28
 8004bc0:	08004c28 	.word	0x08004c28
 8004bc4:	08004c2c 	.word	0x08004c2c

08004bc8 <_init>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_fini>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr
