
Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005d90  08005d90  00006d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb0  08005eb0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005eb0  08005eb0  00006eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb8  08005eb8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb8  08005eb8  00006eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ec0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  08005f28  00007068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005f28  0000734c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f88  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6f  00000000  00000000  0001d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026853  00000000  00000000  0001e437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d1e  00000000  00000000  00044c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0572  00000000  00000000  000589a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  00148f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005d78 	.word	0x08005d78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005d78 	.word	0x08005d78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd4b 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f814 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f926 	bl	800080c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c0:	f000 f89c 	bl	80006fc <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005c4:	f000 f8e4 	bl	8000790 <MX_SPI3_Init>
  MX_I2C1_Init();
 80005c8:	f000 f858 	bl	800067c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LIGHT_OUTPUT_Setup();
 80005cc:	f000 f9ae 	bl	800092c <LIGHT_OUTPUT_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 80005d0:	f000 f9cc 	bl	800096c <SPITxRx_readIO>
	  Convert_HC_35_2_Number();
 80005d4:	f000 fa10 	bl	80009f8 <Convert_HC_35_2_Number>
	  random_std();
 80005d8:	f000 fa90 	bl	8000afc <random_std>
	  LIGHT_OUTPUT_Setup();
 80005dc:	f000 f9a6 	bl	800092c <LIGHT_OUTPUT_Setup>
	  SPITxRx_readIO();
 80005e0:	bf00      	nop
 80005e2:	e7f5      	b.n	80005d0 <main+0x20>

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2238      	movs	r2, #56	@ 0x38
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fce0 	bl	8004fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000606:	2000      	movs	r0, #0
 8000608:	f002 f810 	bl	800262c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2340      	movs	r3, #64	@ 0x40
 8000618:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000626:	2355      	movs	r3, #85	@ 0x55
 8000628:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f8aa 	bl	8002794 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000646:	f000 fa73 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fba8 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066e:	f000 fa5f 	bl	8000b30 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	@ 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006b8:	f001 f888 	bl	80017cc <HAL_I2C_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 fa35 	bl	8000b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006ca:	f001 ff18 	bl	80024fe <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 fa2c 	bl	8000b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_I2C1_Init+0x74>)
 80006dc:	f001 ff5a 	bl	8002594 <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 fa23 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000084 	.word	0x20000084
 80006f4:	40005400 	.word	0x40005400
 80006f8:	30a0a7fb 	.word	0x30a0a7fb

080006fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000700:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	4a22      	ldr	r2, [pc, #136]	@ (800078c <MX_LPUART1_UART_Init+0x90>)
 8000704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073e:	4812      	ldr	r0, [pc, #72]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f003 fccc 	bl	80040dc <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f9f1 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	f004 fa67 	bl	8004c24 <HAL_UARTEx_SetTxFifoThreshold>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800075c:	f000 f9e8 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4809      	ldr	r0, [pc, #36]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f004 fa9c 	bl	8004ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800076e:	f000 f9df 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f004 fa1d 	bl	8004bb2 <HAL_UARTEx_DisableFifoMode>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800077e:	f000 f9d7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000d8 	.word	0x200000d8
 800078c:	40008000 	.word	0x40008000

08000790 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_SPI3_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_SPI3_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_SPI3_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007c6:	2238      	movs	r2, #56	@ 0x38
 80007c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_SPI3_Init+0x74>)
 80007f0:	f002 ff4c 	bl	800368c <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f999 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000016c 	.word	0x2000016c
 8000808:	40003c00 	.word	0x40003c00

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b3f      	ldr	r3, [pc, #252]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a3e      	ldr	r2, [pc, #248]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <MX_GPIO_Init+0x114>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a38      	ldr	r2, [pc, #224]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b36      	ldr	r3, [pc, #216]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b33      	ldr	r3, [pc, #204]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a32      	ldr	r2, [pc, #200]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b30      	ldr	r3, [pc, #192]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <MX_GPIO_Init+0x114>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a2c      	ldr	r2, [pc, #176]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b2a      	ldr	r3, [pc, #168]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a26      	ldr	r2, [pc, #152]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_GPIO_Init+0x114>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f000 ff63 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2104      	movs	r1, #4
 80008aa:	481e      	ldr	r0, [pc, #120]	@ (8000924 <MX_GPIO_Init+0x118>)
 80008ac:	f000 ff5e 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0x11c>)
 80008c8:	f000 fdb6 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f000 fda7 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ea:	2304      	movs	r3, #4
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4808      	ldr	r0, [pc, #32]	@ (8000924 <MX_GPIO_Init+0x118>)
 8000902:	f000 fd99 	bl	8001438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2028      	movs	r0, #40	@ 0x28
 800090c:	f000 fceb 	bl	80012e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000910:	2028      	movs	r0, #40	@ 0x28
 8000912:	f000 fd02 	bl	800131a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000
 8000924:	48000c00 	.word	0x48000c00
 8000928:	48000800 	.word	0x48000800

0800092c <LIGHT_OUTPUT_Setup>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
		HAL_Delay(1);
}

void LIGHT_OUTPUT_Setup()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2104      	movs	r1, #4
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <LIGHT_OUTPUT_Setup+0x30>)
 8000936:	f000 ff19 	bl	800176c <HAL_GPIO_WritePin>
	SPI_TX[0] = 0b01000000;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <LIGHT_OUTPUT_Setup+0x34>)
 800093c:	2240      	movs	r2, #64	@ 0x40
 800093e:	701a      	strb	r2, [r3, #0]
	SPI_TX[1] = 0x01;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <LIGHT_OUTPUT_Setup+0x34>)
 8000942:	2201      	movs	r2, #1
 8000944:	705a      	strb	r2, [r3, #1]
	SPI_TX[2] = 0b00000000;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <LIGHT_OUTPUT_Setup+0x34>)
 8000948:	2200      	movs	r2, #0
 800094a:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 800094c:	2303      	movs	r3, #3
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <LIGHT_OUTPUT_Setup+0x38>)
 8000950:	4903      	ldr	r1, [pc, #12]	@ (8000960 <LIGHT_OUTPUT_Setup+0x34>)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <LIGHT_OUTPUT_Setup+0x3c>)
 8000954:	f002 ff46 	bl	80037e4 <HAL_SPI_TransmitReceive_IT>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	48000c00 	.word	0x48000c00
 8000960:	200001d0 	.word	0x200001d0
 8000964:	200001dc 	.word	0x200001dc
 8000968:	2000016c 	.word	0x2000016c

0800096c <SPITxRx_readIO>:

void SPITxRx_readIO()
	{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000970:	2104      	movs	r1, #4
 8000972:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <SPITxRx_readIO+0x54>)
 8000974:	f000 fee2 	bl	800173c <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d01e      	beq.n	80009bc <SPITxRx_readIO+0x50>
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2104      	movs	r1, #4
 8000982:	480f      	ldr	r0, [pc, #60]	@ (80009c0 <SPITxRx_readIO+0x54>)
 8000984:	f000 fef2 	bl	800176c <HAL_GPIO_WritePin>
				if (State == 0)
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <SPITxRx_readIO+0x58>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d109      	bne.n	80009a4 <SPITxRx_readIO+0x38>
				{
					SPI_TX[0] = 0b01000001;
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <SPITxRx_readIO+0x5c>)
 8000992:	2241      	movs	r2, #65	@ 0x41
 8000994:	701a      	strb	r2, [r3, #0]
					SPI_TX[1] = 0x12;
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <SPITxRx_readIO+0x5c>)
 8000998:	2212      	movs	r2, #18
 800099a:	705a      	strb	r2, [r3, #1]
					SPI_TX[2] = 0;
 800099c:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <SPITxRx_readIO+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	709a      	strb	r2, [r3, #2]
 80009a2:	e005      	b.n	80009b0 <SPITxRx_readIO+0x44>
				}
				else if (State == 1)
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <SPITxRx_readIO+0x58>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <SPITxRx_readIO+0x44>
				{
					SET_LIGHT_B();
 80009ac:	f000 f812 	bl	80009d4 <SET_LIGHT_B>
				}
				HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 80009b0:	2303      	movs	r3, #3
 80009b2:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <SPITxRx_readIO+0x60>)
 80009b4:	4904      	ldr	r1, [pc, #16]	@ (80009c8 <SPITxRx_readIO+0x5c>)
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <SPITxRx_readIO+0x64>)
 80009b8:	f002 ff14 	bl	80037e4 <HAL_SPI_TransmitReceive_IT>
			}
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	48000c00 	.word	0x48000c00
 80009c4:	200001f6 	.word	0x200001f6
 80009c8:	200001d0 	.word	0x200001d0
 80009cc:	200001dc 	.word	0x200001dc
 80009d0:	2000016c 	.word	0x2000016c

080009d4 <SET_LIGHT_B>:

void SET_LIGHT_B()
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
			SPI_TX[0] = 0b01000000;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <SET_LIGHT_B+0x20>)
 80009da:	2240      	movs	r2, #64	@ 0x40
 80009dc:	701a      	strb	r2, [r3, #0]
			SPI_TX[1] = 0x15;
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <SET_LIGHT_B+0x20>)
 80009e0:	2215      	movs	r2, #21
 80009e2:	705a      	strb	r2, [r3, #1]
			SPI_TX[2] = 0b00001111;
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <SET_LIGHT_B+0x20>)
 80009e6:	220f      	movs	r2, #15
 80009e8:	709a      	strb	r2, [r3, #2]
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	200001d0 	.word	0x200001d0

080009f8 <Convert_HC_35_2_Number>:

void Convert_HC_35_2_Number()
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	if (SPI_RX[2]== 14)
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <Convert_HC_35_2_Number+0x7c>)
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	2b0e      	cmp	r3, #14
 8000a02:	d107      	bne.n	8000a14 <Convert_HC_35_2_Number+0x1c>
		{
			Number = 1;
 8000a04:	491c      	ldr	r1, [pc, #112]	@ (8000a78 <Convert_HC_35_2_Number+0x80>)
 8000a06:	f04f 0201 	mov.w	r2, #1
 8000a0a:	f04f 0300 	mov.w	r3, #0
 8000a0e:	e9c1 2300 	strd	r2, r3, [r1]
		}
	else
	{
		Number = 0;
	}
}
 8000a12:	e02a      	b.n	8000a6a <Convert_HC_35_2_Number+0x72>
	else if (SPI_RX[2]== 13)
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <Convert_HC_35_2_Number+0x7c>)
 8000a16:	789b      	ldrb	r3, [r3, #2]
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d107      	bne.n	8000a2c <Convert_HC_35_2_Number+0x34>
			Number = 2;
 8000a1c:	4916      	ldr	r1, [pc, #88]	@ (8000a78 <Convert_HC_35_2_Number+0x80>)
 8000a1e:	f04f 0202 	mov.w	r2, #2
 8000a22:	f04f 0300 	mov.w	r3, #0
 8000a26:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a2a:	e01e      	b.n	8000a6a <Convert_HC_35_2_Number+0x72>
	else if (SPI_RX[2]== 11)
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <Convert_HC_35_2_Number+0x7c>)
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	2b0b      	cmp	r3, #11
 8000a32:	d107      	bne.n	8000a44 <Convert_HC_35_2_Number+0x4c>
			Number = 3;
 8000a34:	4910      	ldr	r1, [pc, #64]	@ (8000a78 <Convert_HC_35_2_Number+0x80>)
 8000a36:	f04f 0203 	mov.w	r2, #3
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a42:	e012      	b.n	8000a6a <Convert_HC_35_2_Number+0x72>
	else if (SPI_RX[2]== 7)
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <Convert_HC_35_2_Number+0x7c>)
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	2b07      	cmp	r3, #7
 8000a4a:	d107      	bne.n	8000a5c <Convert_HC_35_2_Number+0x64>
			Number = 4;
 8000a4c:	490a      	ldr	r1, [pc, #40]	@ (8000a78 <Convert_HC_35_2_Number+0x80>)
 8000a4e:	f04f 0204 	mov.w	r2, #4
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a5a:	e006      	b.n	8000a6a <Convert_HC_35_2_Number+0x72>
		Number = 0;
 8000a5c:	4906      	ldr	r1, [pc, #24]	@ (8000a78 <Convert_HC_35_2_Number+0x80>)
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	200001dc 	.word	0x200001dc
 8000a78:	200001e8 	.word	0x200001e8

08000a7c <HAL_SPI_TxRxCpltCallback>:
{

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(State==0)
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <HAL_SPI_TxRxCpltCallback+0x18>
	{
		State = 1;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	801a      	strh	r2, [r3, #0]
 8000a92:	e006      	b.n	8000aa2 <HAL_SPI_TxRxCpltCallback+0x26>
	}
	else if(State == 1)
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d102      	bne.n	8000aa2 <HAL_SPI_TxRxCpltCallback+0x26>
	{
		State = 0;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000aa8:	f000 fe60 	bl	800176c <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001f6 	.word	0x200001f6
 8000ab8:	48000c00 	.word	0x48000c00

08000abc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_13)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000acc:	d10e      	bne.n	8000aec <HAL_GPIO_EXTI_Callback+0x30>
		{
			if (control_rand == 1)
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d103      	bne.n	8000ade <HAL_GPIO_EXTI_Callback+0x22>
				{
					control_rand = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	801a      	strh	r2, [r3, #0]
					control_rand = 1;
				}
		}


	}
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_EXTI_Callback+0x30>
			else if (control_rand == 0)
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <HAL_GPIO_EXTI_Callback+0x30>
					control_rand = 1;
 8000ae6:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	801a      	strh	r2, [r3, #0]
	}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	200001f4 	.word	0x200001f4

08000afc <random_std>:
void random_std()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	if(control_rand == 1)
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <random_std+0x2c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <random_std+0x26>
	{
		Random = rand() % 4;
 8000b08:	f004 f956 	bl	8004db8 <rand>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	425a      	negs	r2, r3
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	f002 0203 	and.w	r2, r2, #3
 8000b18:	bf58      	it	pl
 8000b1a:	4253      	negpl	r3, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b03      	ldr	r3, [pc, #12]	@ (8000b2c <random_std+0x30>)
 8000b20:	601a      	str	r2, [r3, #0]


	}
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001f4 	.word	0x200001f4
 8000b2c:	200001f0 	.word	0x200001f0

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b46:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b72:	f001 fdff 	bl	8002774 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b09e      	sub	sp, #120	@ 0x78
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2254      	movs	r2, #84	@ 0x54
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 fa07 	bl	8004fb8 <memset>
  if(hi2c->Instance==I2C1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <HAL_I2C_MspInit+0xc8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d146      	bne.n	8000c42 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fb15 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bcc:	f7ff ffb0 	bl	8000b30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000be8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c02:	4619      	mov	r1, r3
 8000c04:	4813      	ldr	r0, [pc, #76]	@ (8000c54 <HAL_I2C_MspInit+0xd0>)
 8000c06:	f000 fc17 	bl	8001438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	4a10      	ldr	r2, [pc, #64]	@ (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_I2C_MspInit+0xcc>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	201f      	movs	r0, #31
 8000c28:	f000 fb5d 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c2c:	201f      	movs	r0, #31
 8000c2e:	f000 fb74 	bl	800131a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2020      	movs	r0, #32
 8000c38:	f000 fb55 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c3c:	2020      	movs	r0, #32
 8000c3e:	f000 fb6c 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3778      	adds	r7, #120	@ 0x78
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000400 	.word	0x48000400

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b09e      	sub	sp, #120	@ 0x78
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2254      	movs	r2, #84	@ 0x54
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f99d 	bl	8004fb8 <memset>
  if(huart->Instance==LPUART1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1f      	ldr	r2, [pc, #124]	@ (8000d00 <HAL_UART_MspInit+0xa8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d136      	bne.n	8000cf6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 faab 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca0:	f7ff ff46 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_UART_MspInit+0xac>)
 8000ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ca8:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <HAL_UART_MspInit+0xac>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0xac>)
 8000cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_UART_MspInit+0xac>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc0:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <HAL_UART_MspInit+0xac>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_UART_MspInit+0xac>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f000 fba1 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3778      	adds	r7, #120	@ 0x78
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40008000 	.word	0x40008000
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <HAL_SPI_MspInit+0x8c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d130      	bne.n	8000d8c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4e:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_SPI_MspInit+0x90>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <HAL_SPI_MspInit+0x94>)
 8000d78:	f000 fb5e 	bl	8001438 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2033      	movs	r0, #51	@ 0x33
 8000d82:	f000 fab0 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d86:	2033      	movs	r0, #51	@ 0x33
 8000d88:	f000 fac7 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	@ 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40003c00 	.word	0x40003c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000800 	.word	0x48000800

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f97d 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <I2C1_EV_IRQHandler+0x10>)
 8000e06:	f000 fd7c 	bl	8001902 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000084 	.word	0x20000084

08000e14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <I2C1_ER_IRQHandler+0x10>)
 8000e1a:	f000 fd8c 	bl	8001936 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000084 	.word	0x20000084

08000e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e30:	f000 fcb4 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <SPI3_IRQHandler+0x10>)
 8000e3e:	f002 fd7f 	bl	8003940 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000016c 	.word	0x2000016c

08000e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return 1;
 8000e50:	2301      	movs	r3, #1
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_kill>:

int _kill(int pid, int sig)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e66:	f004 f8af 	bl	8004fc8 <__errno>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2216      	movs	r2, #22
 8000e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_exit>:

void _exit (int status)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ffe7 	bl	8000e5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e8e:	bf00      	nop
 8000e90:	e7fd      	b.n	8000e8e <_exit+0x12>

08000e92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e00a      	b.n	8000eba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	60ba      	str	r2, [r7, #8]
 8000eb0:	b2ca      	uxtb	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dbf0      	blt.n	8000ea4 <_read+0x12>
  }

  return len;
 8000ec2:	687b      	ldr	r3, [r7, #4]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e009      	b.n	8000ef2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	60ba      	str	r2, [r7, #8]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbf1      	blt.n	8000ede <_write+0x12>
  }
  return len;
 8000efa:	687b      	ldr	r3, [r7, #4]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_close>:

int _close(int file)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f2c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_isatty>:

int _isatty(int file)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f004 f814 	bl	8004fc8 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200001f8 	.word	0x200001f8
 8000fd4:	20000350 	.word	0x20000350

08000fd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 ffd3 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fabf 	bl	80005b0 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   r0, =_estack
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001040:	08005ec0 	.word	0x08005ec0
  ldr r2, =_sbss
 8001044:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001048:	2000034c 	.word	0x2000034c

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f939 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f80e 	bl	8001080 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fd64 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]

}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d022      	beq.n	80010da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_InitTick+0x6c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f944 	bl	8001336 <HAL_SYSTICK_Config>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10f      	bne.n	80010d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d809      	bhi.n	80010ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ba:	2200      	movs	r2, #0
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c2:	f000 f910 	bl	80012e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <HAL_InitTick+0x70>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e007      	b.n	80010de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e004      	b.n	80010de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <HAL_IncTick+0x1c>)
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	200001fc 	.word	0x200001fc
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200001fc 	.word	0x200001fc

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff40 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff33 	bl	8001194 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa4 	bl	800128c <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d00d      	beq.n	8001382 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e047      	b.n	8001412 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 020e 	bic.w	r2, r2, #14
 8001390:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0201 	bic.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f003 021f 	and.w	r2, r3, #31
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
    }
  }
  return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800142a:	b2db      	uxtb	r3, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001446:	e15a      	b.n	80016fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 814c 	beq.w	80016f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d005      	beq.n	8001478 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001474:	2b02      	cmp	r3, #2
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d017      	beq.n	8001516 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d123      	bne.n	800156a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	6939      	ldr	r1, [r7, #16]
 8001566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0203 	and.w	r2, r3, #3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80a6 	beq.w	80016f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ac:	4b5b      	ldr	r3, [pc, #364]	@ (800171c <HAL_GPIO_Init+0x2e4>)
 80015ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b0:	4a5a      	ldr	r2, [pc, #360]	@ (800171c <HAL_GPIO_Init+0x2e4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <HAL_GPIO_Init+0x2e4>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c4:	4a56      	ldr	r2, [pc, #344]	@ (8001720 <HAL_GPIO_Init+0x2e8>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ee:	d01f      	beq.n	8001630 <HAL_GPIO_Init+0x1f8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001724 <HAL_GPIO_Init+0x2ec>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d019      	beq.n	800162c <HAL_GPIO_Init+0x1f4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001728 <HAL_GPIO_Init+0x2f0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x1f0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4a      	ldr	r2, [pc, #296]	@ (800172c <HAL_GPIO_Init+0x2f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1ec>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a49      	ldr	r2, [pc, #292]	@ (8001730 <HAL_GPIO_Init+0x2f8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1e8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a48      	ldr	r2, [pc, #288]	@ (8001734 <HAL_GPIO_Init+0x2fc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1e4>
 8001618:	2305      	movs	r3, #5
 800161a:	e00a      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 800161c:	2306      	movs	r3, #6
 800161e:	e008      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001620:	2304      	movs	r3, #4
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001624:	2303      	movs	r3, #3
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x1fa>
 8001630:	2300      	movs	r3, #0
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001642:	4937      	ldr	r1, [pc, #220]	@ (8001720 <HAL_GPIO_Init+0x2e8>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001650:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <HAL_GPIO_Init+0x300>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001674:	4a30      	ldr	r2, [pc, #192]	@ (8001738 <HAL_GPIO_Init+0x300>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_GPIO_Init+0x300>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169e:	4a26      	ldr	r2, [pc, #152]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f2:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <HAL_GPIO_Init+0x300>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f ae9d 	bne.w	8001448 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	48001000 	.word	0x48001000
 8001734:	48001400 	.word	0x48001400
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e001      	b.n	800175e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e002      	b.n	8001790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f97e 	bl	8000abc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e08d      	b.n	80018fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff f9c6 	bl	8000b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2224      	movs	r2, #36	@ 0x24
 80017fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800181c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800182c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	e006      	b.n	8001854 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001852:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d108      	bne.n	800186e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	e007      	b.n	800187e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800187c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800188c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001890:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69d9      	ldr	r1, [r3, #28]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1a      	ldr	r2, [r3, #32]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
  }
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00f      	beq.n	8001978 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001976:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00f      	beq.n	80019a2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001990:	f043 0208 	orr.w	r2, r3, #8
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00f      	beq.n	80019cc <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00a      	beq.n	80019cc <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f043 0202 	orr.w	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ca:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f003 030b 	and.w	r3, r3, #11
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fbd6 	bl	8002190 <I2C_ITError>
  }
}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
 8001a20:	4613      	mov	r3, r2
 8001a22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <I2C_Slave_ISR_IT+0x24>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0e2      	b.n	8001c56 <I2C_Slave_ISR_IT+0x1ea>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001aac:	6939      	ldr	r1, [r7, #16]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f9b6 	bl	8001e20 <I2C_ITSlaveCplt>
 8001ab4:	e0ca      	b.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d04b      	beq.n	8001b58 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d046      	beq.n	8001b58 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d128      	bne.n	8001b26 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b28      	cmp	r3, #40	@ 0x28
 8001ade:	d108      	bne.n	8001af2 <I2C_Slave_ISR_IT+0x86>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ae6:	d104      	bne.n	8001af2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ae8:	6939      	ldr	r1, [r7, #16]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fafc 	bl	80020e8 <I2C_ITListenCplt>
 8001af0:	e031      	b.n	8001b56 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b29      	cmp	r3, #41	@ 0x29
 8001afc:	d10e      	bne.n	8001b1c <I2C_Slave_ISR_IT+0xb0>
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b04:	d00a      	beq.n	8001b1c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fc55 	bl	80023be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f926 	bl	8001d66 <I2C_ITSlaveSeqCplt>
 8001b1a:	e01c      	b.n	8001b56 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2210      	movs	r2, #16
 8001b22:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001b24:	e08f      	b.n	8001c46 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f043 0204 	orr.w	r2, r3, #4
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <I2C_Slave_ISR_IT+0xdc>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b46:	d17e      	bne.n	8001c46 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fb1e 	bl	8002190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b54:	e077      	b.n	8001c46 <I2C_Slave_ISR_IT+0x1da>
 8001b56:	e076      	b.n	8001c46 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02f      	beq.n	8001bc2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d02a      	beq.n	8001bc2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d018      	beq.n	8001ba8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d14b      	bne.n	8001c4a <I2C_Slave_ISR_IT+0x1de>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001bb8:	d047      	beq.n	8001c4a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f8d3 	bl	8001d66 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001bc0:	e043      	b.n	8001c4a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001bd6:	6939      	ldr	r1, [r7, #16]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f840 	bl	8001c5e <I2C_ITAddrCplt>
 8001bde:	e035      	b.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d030      	beq.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d02b      	beq.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d018      	beq.n	8001c30 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001c2e:	e00d      	b.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c36:	d002      	beq.n	8001c3e <I2C_Slave_ISR_IT+0x1d2>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f891 	bl	8001d66 <I2C_ITSlaveSeqCplt>
 8001c44:	e002      	b.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001c46:	bf00      	nop
 8001c48:	e000      	b.n	8001c4c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001c4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001c74:	2b28      	cmp	r3, #40	@ 0x28
 8001c76:	d16a      	bne.n	8001d4e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001c96:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001cb2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d138      	bne.n	8001d2e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001cbc:	897b      	ldrh	r3, [r7, #10]
 8001cbe:	09db      	lsrs	r3, r3, #7
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	89bb      	ldrh	r3, [r7, #12]
 8001cc4:	4053      	eors	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f003 0306 	and.w	r3, r3, #6
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11c      	bne.n	8001d0a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001cd0:	897b      	ldrh	r3, [r7, #10]
 8001cd2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d13b      	bne.n	8001d5e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cfc:	89ba      	ldrh	r2, [r7, #12]
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fe86 	bl	8001a14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d08:	e029      	b.n	8001d5e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001d0a:	893b      	ldrh	r3, [r7, #8]
 8001d0c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fb95 	bl	8002442 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d20:	89ba      	ldrh	r2, [r7, #12]
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fe74 	bl	8001a14 <HAL_I2C_AddrCallback>
}
 8001d2c:	e017      	b.n	8001d5e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb85 	bl	8002442 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d40:	89ba      	ldrh	r2, [r7, #12]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fe64 	bl	8001a14 <HAL_I2C_AddrCallback>
}
 8001d4c:	e007      	b.n	8001d5e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2208      	movs	r2, #8
 8001d54:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e00c      	b.n	8001db4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d007      	beq.n	8001db4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b29      	cmp	r3, #41	@ 0x29
 8001dbe:	d112      	bne.n	8001de6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2228      	movs	r2, #40	@ 0x28
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2221      	movs	r2, #33	@ 0x21
 8001dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fb36 	bl	8002442 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fe04 	bl	80019ec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001de4:	e017      	b.n	8001e16 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8001df0:	d111      	bne.n	8001e16 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2228      	movs	r2, #40	@ 0x28
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2222      	movs	r2, #34	@ 0x22
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e00:	2102      	movs	r1, #2
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fb1d 	bl	8002442 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fdf5 	bl	8001a00 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e42:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e4c:	7afb      	ldrb	r3, [r7, #11]
 8001e4e:	2b21      	cmp	r3, #33	@ 0x21
 8001e50:	d002      	beq.n	8001e58 <I2C_ITSlaveCplt+0x38>
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	2b29      	cmp	r3, #41	@ 0x29
 8001e56:	d108      	bne.n	8001e6a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e58:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 faf0 	bl	8002442 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2221      	movs	r2, #33	@ 0x21
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e68:	e019      	b.n	8001e9e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	2b22      	cmp	r3, #34	@ 0x22
 8001e6e:	d002      	beq.n	8001e76 <I2C_ITSlaveCplt+0x56>
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e74:	d108      	bne.n	8001e88 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e76:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fae1 	bl	8002442 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2222      	movs	r2, #34	@ 0x22
 8001e84:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e86:	e00a      	b.n	8001e9e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	2b28      	cmp	r3, #40	@ 0x28
 8001e8c:	d107      	bne.n	8001e9e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001e8e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fad5 	bl	8002442 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b89      	ldr	r3, [pc, #548]	@ (80020e0 <I2C_ITSlaveCplt+0x2c0>)
 8001eba:	400b      	ands	r3, r1
 8001ebc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fa7d 	bl	80023be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d013      	beq.n	8001ef6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001edc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01f      	beq.n	8001f26 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ef4:	e017      	b.n	8001f26 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00c      	beq.n	8001f72 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	f043 0204 	orr.w	r2, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d049      	beq.n	8002026 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d044      	beq.n	8002026 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d128      	bne.n	8001ff8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b28      	cmp	r3, #40	@ 0x28
 8001fb0:	d108      	bne.n	8001fc4 <I2C_ITSlaveCplt+0x1a4>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fb8:	d104      	bne.n	8001fc4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f893 	bl	80020e8 <I2C_ITListenCplt>
 8001fc2:	e030      	b.n	8002026 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b29      	cmp	r3, #41	@ 0x29
 8001fce:	d10e      	bne.n	8001fee <I2C_ITSlaveCplt+0x1ce>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fd6:	d00a      	beq.n	8001fee <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9ec 	bl	80023be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff febd 	bl	8001d66 <I2C_ITSlaveSeqCplt>
 8001fec:	e01b      	b.n	8002026 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	61da      	str	r2, [r3, #28]
 8001ff6:	e016      	b.n	8002026 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <I2C_ITSlaveCplt+0x1fa>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d105      	bne.n	8002026 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f8b5 	bl	8002190 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8a4 	bl	8002190 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b28      	cmp	r3, #40	@ 0x28
 8002052:	d141      	bne.n	80020d8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f846 	bl	80020e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800205c:	e03c      	b.n	80020d8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002066:	d014      	beq.n	8002092 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fe7c 	bl	8001d66 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <I2C_ITSlaveCplt+0x2c4>)
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fcd0 	bl	8001a30 <HAL_I2C_ListenCpltCallback>
}
 8002090:	e022      	b.n	80020d8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b22      	cmp	r3, #34	@ 0x22
 800209c:	d10e      	bne.n	80020bc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fca3 	bl	8001a00 <HAL_I2C_SlaveRxCpltCallback>
}
 80020ba:	e00d      	b.n	80020d8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fc8a 	bl	80019ec <HAL_I2C_SlaveTxCpltCallback>
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	fe00e800 	.word	0xfe00e800
 80020e4:	ffff0000 	.word	0xffff0000

080020e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a25      	ldr	r2, [pc, #148]	@ (800218c <I2C_ITListenCplt+0xa4>)
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d022      	beq.n	8002164 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002164:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f96a 	bl	8002442 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2210      	movs	r2, #16
 8002174:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fc56 	bl	8001a30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	ffff0000 	.word	0xffff0000

08002190 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002364 <I2C_ITError+0x1d4>)
 80021ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b28      	cmp	r3, #40	@ 0x28
 80021c6:	d005      	beq.n	80021d4 <I2C_ITError+0x44>
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b29      	cmp	r3, #41	@ 0x29
 80021cc:	d002      	beq.n	80021d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80021d2:	d10b      	bne.n	80021ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021d4:	2103      	movs	r1, #3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f933 	bl	8002442 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2228      	movs	r2, #40	@ 0x28
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a60      	ldr	r2, [pc, #384]	@ (8002368 <I2C_ITError+0x1d8>)
 80021e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ea:	e030      	b.n	800224e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f926 	bl	8002442 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8e1 	bl	80023be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b60      	cmp	r3, #96	@ 0x60
 8002206:	d01f      	beq.n	8002248 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b20      	cmp	r3, #32
 800221c:	d114      	bne.n	8002248 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b10      	cmp	r3, #16
 800222a:	d109      	bne.n	8002240 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2210      	movs	r2, #16
 8002232:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2220      	movs	r2, #32
 8002246:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	2b00      	cmp	r3, #0
 800225a:	d039      	beq.n	80022d0 <I2C_ITError+0x140>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b11      	cmp	r3, #17
 8002260:	d002      	beq.n	8002268 <I2C_ITError+0xd8>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b21      	cmp	r3, #33	@ 0x21
 8002266:	d133      	bne.n	80022d0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002276:	d107      	bne.n	8002288 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002286:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f8c5 	bl	800141c <HAL_DMA_GetState>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d017      	beq.n	80022c8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	4a33      	ldr	r2, [pc, #204]	@ (800236c <I2C_ITError+0x1dc>)
 800229e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f84e 	bl	800134e <HAL_DMA_Abort_IT>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04d      	beq.n	8002354 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022c2:	4610      	mov	r0, r2
 80022c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022c6:	e045      	b.n	8002354 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f851 	bl	8002370 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022ce:	e041      	b.n	8002354 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d039      	beq.n	800234c <I2C_ITError+0x1bc>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d002      	beq.n	80022e4 <I2C_ITError+0x154>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b22      	cmp	r3, #34	@ 0x22
 80022e2:	d133      	bne.n	800234c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022f2:	d107      	bne.n	8002304 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002302:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f887 	bl	800141c <HAL_DMA_GetState>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d017      	beq.n	8002344 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	4a14      	ldr	r2, [pc, #80]	@ (800236c <I2C_ITError+0x1dc>)
 800231a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f810 	bl	800134e <HAL_DMA_Abort_IT>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d011      	beq.n	8002358 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800233e:	4610      	mov	r0, r2
 8002340:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002342:	e009      	b.n	8002358 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f813 	bl	8002370 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800234a:	e005      	b.n	8002358 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f80f 	bl	8002370 <I2C_TreatErrorCallback>
  }
}
 8002352:	e002      	b.n	800235a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002358:	bf00      	nop
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	ffff0000 	.word	0xffff0000
 8002368:	08001a6d 	.word	0x08001a6d
 800236c:	08002407 	.word	0x08002407

08002370 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b60      	cmp	r3, #96	@ 0x60
 8002382:	d10e      	bne.n	80023a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fb5c 	bl	8001a58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023a0:	e009      	b.n	80023b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fb47 	bl	8001a44 <HAL_I2C_ErrorCallback>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d103      	bne.n	80023dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d007      	beq.n	80023fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	619a      	str	r2, [r3, #24]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	2200      	movs	r2, #0
 8002422:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	2200      	movs	r2, #0
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ff9b 	bl	8002370 <I2C_TreatErrorCallback>
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00f      	beq.n	800247c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002462:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002470:	2b28      	cmp	r3, #40	@ 0x28
 8002472:	d003      	beq.n	800247c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800247a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00f      	beq.n	80024a6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800248c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800249a:	2b28      	cmp	r3, #40	@ 0x28
 800249c:	d003      	beq.n	80024a6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80024a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80024a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da03      	bge.n	80024b6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d103      	bne.n	80024c4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80024c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d103      	bne.n	80024d2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	2b40      	cmp	r3, #64	@ 0x40
 80024d6:	d103      	bne.n	80024e0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b20      	cmp	r3, #32
 8002512:	d138      	bne.n	8002586 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800251e:	2302      	movs	r3, #2
 8002520:	e032      	b.n	8002588 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2224      	movs	r2, #36	@ 0x24
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002550:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
  }
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d139      	bne.n	800261e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e033      	b.n	8002620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	@ 0x24
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d141      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800263a:	4b4b      	ldr	r3, [pc, #300]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002646:	d131      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002648:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264e:	4a46      	ldr	r2, [pc, #280]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	4b43      	ldr	r3, [pc, #268]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002660:	4a41      	ldr	r2, [pc, #260]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002666:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002668:	4b40      	ldr	r3, [pc, #256]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2232      	movs	r2, #50	@ 0x32
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a3f      	ldr	r2, [pc, #252]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267e:	e002      	b.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3b01      	subs	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002686:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d102      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f2      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269a:	4b33      	ldr	r3, [pc, #204]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a6:	d158      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e057      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026bc:	e04d      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026c4:	d141      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c6:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d2:	d131      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d4:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026da:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2232      	movs	r2, #50	@ 0x32
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002770 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9b      	lsrs	r3, r3, #18
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270a:	e002      	b.n	8002712 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3b01      	subs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271e:	d102      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f2      	bne.n	800270c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002726:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002732:	d112      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e011      	b.n	800275c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002748:	e007      	b.n	800275a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002752:	4a05      	ldr	r2, [pc, #20]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002758:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40007000 	.word	0x40007000
 800276c:	20000000 	.word	0x20000000
 8002770:	431bde83 	.word	0x431bde83

08002774 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800277e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002782:	6093      	str	r3, [r2, #8]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e2fe      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b97      	ldr	r3, [pc, #604]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027bc:	4b94      	ldr	r3, [pc, #592]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3e>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_OscConfig+0x44>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d10b      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05b      	beq.n	800289c <HAL_RCC_OscConfig+0x108>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d157      	bne.n	800289c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e2d9      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x74>
 80027fa:	4b85      	ldr	r3, [pc, #532]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a84      	ldr	r2, [pc, #528]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b7f      	ldr	r3, [pc, #508]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xb0>
 800282c:	4b78      	ldr	r3, [pc, #480]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a77      	ldr	r2, [pc, #476]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b75      	ldr	r3, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a74      	ldr	r2, [pc, #464]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fc64 	bl	8001118 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fc60 	bl	8001118 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e29e      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	4b6a      	ldr	r3, [pc, #424]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xc0>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fc50 	bl	8001118 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe fc4c 	bl	8001118 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e28a      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xe8>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b59      	ldr	r3, [pc, #356]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b56      	ldr	r3, [pc, #344]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x136>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_OscConfig+0x13c>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11f      	bne.n	8002910 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x154>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e25d      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b49      	ldr	r3, [pc, #292]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4946      	ldr	r1, [pc, #280]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028fc:	4b45      	ldr	r3, [pc, #276]	@ (8002a14 <HAL_RCC_OscConfig+0x280>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fbbd 	bl	8001080 <HAL_InitTick>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d043      	beq.n	8002994 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e249      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fbf8 	bl	8001118 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fbf4 	bl	8001118 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e232      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800293e:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	492d      	ldr	r1, [pc, #180]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	e01a      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2a      	ldr	r2, [pc, #168]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002966:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fbd4 	bl	8001118 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe fbd0 	bl	8001118 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e20e      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1e0>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d041      	beq.n	8002a26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe fbad 	bl	8001118 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe fba9 	bl	8001118 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1e7      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCC_OscConfig+0x22e>
 80029e2:	e020      	b.n	8002a26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fb90 	bl	8001118 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029fa:	e00d      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fe fb8c 	bl	8001118 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d906      	bls.n	8002a18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a18:	4b8c      	ldr	r3, [pc, #560]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ea      	bne.n	80029fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80a6 	beq.w	8002b80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a38:	4b84      	ldr	r3, [pc, #528]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2b4>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x2b6>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	4a7e      	ldr	r2, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	4b79      	ldr	r3, [pc, #484]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a76:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fb49 	bl	8001118 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe fb45 	bl	8001118 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e183      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c50 <HAL_RCC_OscConfig+0x4bc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x32e>
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a65      	ldr	r2, [pc, #404]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac0:	e024      	b.n	8002b0c <HAL_RCC_OscConfig+0x378>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d110      	bne.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002aca:	4b60      	ldr	r3, [pc, #384]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ada:	4b5c      	ldr	r3, [pc, #368]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x378>
 8002aec:	4b57      	ldr	r3, [pc, #348]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	4a56      	ldr	r2, [pc, #344]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002afc:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe fb00 	bl	8001118 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fafc 	bl	8001118 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e138      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ed      	beq.n	8002b1c <HAL_RCC_OscConfig+0x388>
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fae9 	bl	8001118 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fae5 	bl	8001118 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e121      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b60:	4b3a      	ldr	r3, [pc, #232]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ed      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	4a34      	ldr	r2, [pc, #208]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b94:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fab8 	bl	8001118 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7fe fab4 	bl	8001118 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0f2      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bbe:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x418>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bce:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fa9b 	bl	8001118 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be6:	f7fe fa97 	bl	8001118 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0d5      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80c9 	beq.w	8002da2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f000 8083 	beq.w	8002d24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d15e      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	@ (8002c4c <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fa71 	bl	8001118 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	e00c      	b.n	8002c54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe fa6d 	bl	8001118 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d905      	bls.n	8002c54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ab      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	4b55      	ldr	r3, [pc, #340]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ec      	bne.n	8002c3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c60:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4b52      	ldr	r3, [pc, #328]	@ (8002db0 <HAL_RCC_OscConfig+0x61c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6a11      	ldr	r1, [r2, #32]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c70:	3a01      	subs	r2, #1
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c7a:	0212      	lsls	r2, r2, #8
 8002c7c:	4311      	orrs	r1, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0552      	lsls	r2, r2, #21
 8002c88:	4311      	orrs	r1, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c8e:	0852      	lsrs	r2, r2, #1
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0652      	lsls	r2, r2, #25
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c9a:	06d2      	lsls	r2, r2, #27
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4943      	ldr	r1, [pc, #268]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca4:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a40      	ldr	r2, [pc, #256]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fa2c 	bl	8001118 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fa28 	bl	8001118 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e066      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	4b35      	ldr	r3, [pc, #212]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x530>
 8002ce2:	e05e      	b.n	8002da2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fa12 	bl	8001118 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fa0e 	bl	8001118 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e04c      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d16:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4924      	ldr	r1, [pc, #144]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d1c:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
 8002d22:	e03e      	b.n	8002da2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e039      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d30:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_RCC_OscConfig+0x618>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d12c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d123      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d11b      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d113      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	019f800c 	.word	0x019f800c
 8002db4:	feeefffc 	.word	0xfeeefffc

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e11e      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b91      	ldr	r3, [pc, #580]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	498c      	ldr	r1, [pc, #560]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b8a      	ldr	r3, [pc, #552]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e106      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d073      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d129      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e14:	4b81      	ldr	r3, [pc, #516]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0f4      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e24:	f000 f99e 	bl	8003164 <RCC_GetSysClockFreqFromPLLSource>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4a7c      	ldr	r2, [pc, #496]	@ (8003020 <HAL_RCC_ClockConfig+0x268>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d93f      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e32:	4b7a      	ldr	r3, [pc, #488]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d033      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d12f      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e52:	4b72      	ldr	r3, [pc, #456]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e5a:	4a70      	ldr	r2, [pc, #448]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e024      	b.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e70:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0c6      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e80:	4b66      	ldr	r3, [pc, #408]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0be      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e90:	f000 f8ce 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4a61      	ldr	r2, [pc, #388]	@ (8003020 <HAL_RCC_ClockConfig+0x268>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d909      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4957      	ldr	r1, [pc, #348]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f928 	bl	8001118 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fe f924 	bl	8001118 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e095      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d023      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b43      	ldr	r3, [pc, #268]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a42      	ldr	r2, [pc, #264]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f24:	4b3d      	ldr	r3, [pc, #244]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f2c:	4a3b      	ldr	r2, [pc, #236]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b39      	ldr	r3, [pc, #228]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4936      	ldr	r1, [pc, #216]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f4e:	4b33      	ldr	r3, [pc, #204]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a32      	ldr	r2, [pc, #200]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002f54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d21d      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 020f 	bic.w	r2, r3, #15
 8002f70:	4929      	ldr	r1, [pc, #164]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f78:	f7fe f8ce 	bl	8001118 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe f8ca 	bl	8001118 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e03b      	b.n	800300e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1ed      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4917      	ldr	r1, [pc, #92]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490f      	ldr	r1, [pc, #60]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fe2:	f000 f825 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <HAL_RCC_ClockConfig+0x264>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490c      	ldr	r1, [pc, #48]	@ (8003024 <HAL_RCC_ClockConfig+0x26c>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <HAL_RCC_ClockConfig+0x270>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <HAL_RCC_ClockConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe f83a 	bl	8001080 <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40022000 	.word	0x40022000
 800301c:	40021000 	.word	0x40021000
 8003020:	04c4b400 	.word	0x04c4b400
 8003024:	08005d90 	.word	0x08005d90
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d102      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003042:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e047      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003048:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d102      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003054:	4b26      	ldr	r3, [pc, #152]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e03e      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800305a:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d136      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3301      	adds	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d10c      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003084:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800308e:	68d2      	ldr	r2, [r2, #12]
 8003090:	0a12      	lsrs	r2, r2, #8
 8003092:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	617b      	str	r3, [r7, #20]
      break;
 800309c:	e00c      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800309e:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4a10      	ldr	r2, [pc, #64]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	0a12      	lsrs	r2, r2, #8
 80030ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
      break;
 80030b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0e5b      	lsrs	r3, r3, #25
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e001      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80030d8:	693b      	ldr	r3, [r7, #16]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	016e3600 	.word	0x016e3600

080030f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_RCC_GetHCLKFreq+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000000 	.word	0x20000000

0800310c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003110:	f7ff fff0 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4904      	ldr	r1, [pc, #16]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08005da0 	.word	0x08005da0

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800313c:	f7ff ffda 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0adb      	lsrs	r3, r3, #11
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4904      	ldr	r1, [pc, #16]	@ (8003160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08005da0 	.word	0x08005da0

08003164 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d10c      	bne.n	80031a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003188:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	4a14      	ldr	r2, [pc, #80]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003192:	68d2      	ldr	r2, [r2, #12]
 8003194:	0a12      	lsrs	r2, r2, #8
 8003196:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	617b      	str	r3, [r7, #20]
    break;
 80031a0:	e00c      	b.n	80031bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031a2:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	4a0e      	ldr	r2, [pc, #56]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	0a12      	lsrs	r2, r2, #8
 80031b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    break;
 80031ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031bc:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0e5b      	lsrs	r3, r3, #25
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031d6:	687b      	ldr	r3, [r7, #4]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40021000 	.word	0x40021000
 80031e8:	016e3600 	.word	0x016e3600
 80031ec:	00f42400 	.word	0x00f42400

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8098 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003212:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10d      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321e:	4b40      	ldr	r3, [pc, #256]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	4a3f      	ldr	r2, [pc, #252]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003228:	6593      	str	r3, [r2, #88]	@ 0x58
 800322a:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003236:	2301      	movs	r3, #1
 8003238:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800323a:	4b3a      	ldr	r3, [pc, #232]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a39      	ldr	r2, [pc, #228]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003246:	f7fd ff67 	bl	8001118 <HAL_GetTick>
 800324a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800324c:	e009      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7fd ff63 	bl	8001118 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d902      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	74fb      	strb	r3, [r7, #19]
        break;
 8003260:	e005      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003262:	4b30      	ldr	r3, [pc, #192]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ef      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d159      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003274:	4b2a      	ldr	r3, [pc, #168]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01e      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	429a      	cmp	r2, r3
 800328e:	d019      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003290:	4b23      	ldr	r3, [pc, #140]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800329a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800329c:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032bc:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fd ff23 	bl	8001118 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d4:	e00b      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fd ff1f 	bl	8001118 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d902      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	74fb      	strb	r3, [r7, #19]
            break;
 80032ec:	e006      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ec      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003318:	e008      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800331a:	7cfb      	ldrb	r3, [r7, #19]
 800331c:	74bb      	strb	r3, [r7, #18]
 800331e:	e005      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7c7b      	ldrb	r3, [r7, #17]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4ba7      	ldr	r3, [pc, #668]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	4aa6      	ldr	r2, [pc, #664]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334a:	4ba1      	ldr	r3, [pc, #644]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003350:	f023 0203 	bic.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	499d      	ldr	r1, [pc, #628]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800336c:	4b98      	ldr	r3, [pc, #608]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003372:	f023 020c 	bic.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4995      	ldr	r1, [pc, #596]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338e:	4b90      	ldr	r3, [pc, #576]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	498c      	ldr	r1, [pc, #560]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033b0:	4b87      	ldr	r3, [pc, #540]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4984      	ldr	r1, [pc, #528]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033d2:	4b7f      	ldr	r3, [pc, #508]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	497b      	ldr	r1, [pc, #492]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f4:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	4973      	ldr	r1, [pc, #460]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003416:	4b6e      	ldr	r3, [pc, #440]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	496a      	ldr	r1, [pc, #424]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003438:	4b65      	ldr	r3, [pc, #404]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4962      	ldr	r1, [pc, #392]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800345a:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	4959      	ldr	r1, [pc, #356]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800347c:	4b54      	ldr	r3, [pc, #336]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	4951      	ldr	r1, [pc, #324]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349e:	4b4c      	ldr	r3, [pc, #304]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	4948      	ldr	r1, [pc, #288]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c0:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4940      	ldr	r1, [pc, #256]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f8:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003506:	4932      	ldr	r1, [pc, #200]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003518:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003522:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003530:	4b27      	ldr	r3, [pc, #156]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	4924      	ldr	r1, [pc, #144]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b1f      	ldr	r3, [pc, #124]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a1e      	ldr	r2, [pc, #120]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	4916      	ldr	r1, [pc, #88]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	4908      	ldr	r1, [pc, #32]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035be:	d109      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c0:	4b03      	ldr	r3, [pc, #12]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a02      	ldr	r2, [pc, #8]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035e0:	4b29      	ldr	r3, [pc, #164]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	4926      	ldr	r1, [pc, #152]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003600:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003626:	4918      	ldr	r1, [pc, #96]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003636:	d105      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003638:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a12      	ldr	r2, [pc, #72]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003650:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	490a      	ldr	r1, [pc, #40]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a04      	ldr	r2, [pc, #16]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800367c:	7cbb      	ldrb	r3, [r7, #18]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e09d      	b.n	80037da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ae:	d009      	beq.n	80036c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
 80036b6:	e005      	b.n	80036c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fb12 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003704:	d902      	bls.n	800370c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e002      	b.n	8003712 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800370c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003710:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800371a:	d007      	beq.n	800372c <HAL_SPI_Init+0xa0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003724:	d002      	beq.n	800372c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	ea42 0103 	orr.w	r1, r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	f003 0204 	and.w	r2, r3, #4
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80037a8:	ea42 0103 	orr.w	r1, r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037fc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003804:	7dbb      	ldrb	r3, [r7, #22]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d00d      	beq.n	8003826 <HAL_SPI_TransmitReceive_IT+0x42>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003810:	d106      	bne.n	8003820 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <HAL_SPI_TransmitReceive_IT+0x3c>
 800381a:	7dbb      	ldrb	r3, [r7, #22]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d002      	beq.n	8003826 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003820:	2302      	movs	r3, #2
 8003822:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003824:	e07d      	b.n	8003922 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_SPI_TransmitReceive_IT+0x54>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_TransmitReceive_IT+0x54>
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800383c:	e071      	b.n	8003922 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_SPI_TransmitReceive_IT+0x68>
 8003848:	2302      	movs	r3, #2
 800384a:	e06b      	b.n	8003924 <HAL_SPI_TransmitReceive_IT+0x140>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b04      	cmp	r3, #4
 800385e:	d003      	beq.n	8003868 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2205      	movs	r2, #5
 8003864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	887a      	ldrh	r2, [r7, #2]
 800387e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	887a      	ldrh	r2, [r7, #2]
 800388a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	887a      	ldrh	r2, [r7, #2]
 8003892:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800389e:	d906      	bls.n	80038ae <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80038a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a22      	ldr	r2, [pc, #136]	@ (8003934 <HAL_SPI_TransmitReceive_IT+0x150>)
 80038aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80038ac:	e005      	b.n	80038ba <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a21      	ldr	r2, [pc, #132]	@ (8003938 <HAL_SPI_TransmitReceive_IT+0x154>)
 80038b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a21      	ldr	r2, [pc, #132]	@ (800393c <HAL_SPI_TransmitReceive_IT+0x158>)
 80038b8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038c2:	d802      	bhi.n	80038ca <HAL_SPI_TransmitReceive_IT+0xe6>
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d908      	bls.n	80038dc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	e007      	b.n	80038ec <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038ea:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d007      	beq.n	800390a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003908:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003920:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	08003ccb 	.word	0x08003ccb
 8003934:	08003d31 	.word	0x08003d31
 8003938:	08003b7b 	.word	0x08003b7b
 800393c:	08003c39 	.word	0x08003c39

08003940 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10e      	bne.n	8003980 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
    return;
 800397e:	e0ce      	b.n	8003b1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_SPI_IRQHandler+0x5e>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
    return;
 800399c:	e0bf      	b.n	8003b1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <HAL_SPI_IRQHandler+0x7e>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80b0 	beq.w	8003b1e <HAL_SPI_IRQHandler+0x1de>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80aa 	beq.w	8003b1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d011      	beq.n	8003a04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	e00b      	b.n	8003a1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
        return;
 8003a1a:	e080      	b.n	8003b1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d014      	beq.n	8003a50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	f043 0208 	orr.w	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d04f      	beq.n	8003b1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <HAL_SPI_IRQHandler+0x168>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d034      	beq.n	8003b12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0203 	bic.w	r2, r2, #3
 8003ab6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d011      	beq.n	8003ae4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_SPI_IRQHandler+0x1e4>)
 8003ac6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fc3e 	bl	800134e <HAL_DMA_Abort_IT>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003adc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d016      	beq.n	8003b1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b24 <HAL_SPI_IRQHandler+0x1e4>)
 8003af2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fc28 	bl	800134e <HAL_DMA_Abort_IT>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003b10:	e003      	b.n	8003b1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f812 	bl	8003b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b18:	e000      	b.n	8003b1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003b1a:	bf00      	nop
    return;
 8003b1c:	bf00      	nop
  }
}
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	08003b51 	.word	0x08003b51

08003b28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff ffe5 	bl	8003b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d923      	bls.n	8003bd6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b02      	subs	r3, #2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11f      	bne.n	8003c04 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	e016      	b.n	8003c04 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f103 020c 	add.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10f      	bne.n	8003c30 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fa14 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d912      	bls.n	8003c70 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b02      	subs	r3, #2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c6e:	e012      	b.n	8003c96 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d110      	bne.n	8003cc2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f9cb 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10f      	bne.n	8003d28 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f998 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d110      	bne.n	8003d88 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d74:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f968 	bl	8004058 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003da0:	f7fd f9ba 	bl	8001118 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003db0:	f7fd f9b2 	bl	8001118 <HAL_GetTick>
 8003db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003db6:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	015b      	lsls	r3, r3, #5
 8003dbc:	0d1b      	lsrs	r3, r3, #20
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc6:	e054      	b.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dce:	d050      	beq.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd0:	f7fd f9a2 	bl	8001118 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d902      	bls.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d13d      	bne.n	8003e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dfe:	d111      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e08:	d004      	beq.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e12:	d107      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2c:	d10f      	bne.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e017      	b.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d19b      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000000 	.word	0x20000000

08003ea0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eb2:	f7fd f931 	bl	8001118 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ec2:	f7fd f929 	bl	8001118 <HAL_GetTick>
 8003ec6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00da      	lsls	r2, r3, #3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	0d1b      	lsrs	r3, r3, #20
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ee8:	e060      	b.n	8003fac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ef0:	d107      	bne.n	8003f02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f08:	d050      	beq.n	8003fac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f0a:	f7fd f905 	bl	8001118 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d902      	bls.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13d      	bne.n	8003f9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f38:	d111      	bne.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f42:	d004      	beq.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4c:	d107      	bne.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f66:	d10f      	bne.n	8003f88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e010      	b.n	8003fbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d196      	bne.n	8003eea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3728      	adds	r7, #40	@ 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000000 	.word	0x20000000

08003fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff5b 	bl	8003ea0 <SPI_WaitFifoStateUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e027      	b.n	8004050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	2180      	movs	r1, #128	@ 0x80
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff fec0 	bl	8003d90 <SPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e014      	b.n	8004050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2200      	movs	r2, #0
 800402e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff ff34 	bl	8003ea0 <SPI_WaitFifoStateUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e000      	b.n	8004050 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004060:	f7fd f85a 	bl	8001118 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0220 	bic.w	r2, r2, #32
 8004074:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	2164      	movs	r1, #100	@ 0x64
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ffa6 	bl	8003fcc <SPI_EndRxTxTransaction>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d107      	bne.n	80040b6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fd3a 	bl	8003b28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80040b4:	e00e      	b.n	80040d4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc fcdc 	bl	8000a7c <HAL_SPI_TxRxCpltCallback>
}
 80040c4:	e006      	b.n	80040d4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fd34 	bl	8003b3c <HAL_SPI_ErrorCallback>
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e042      	b.n	8004174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fc fda9 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2224      	movs	r2, #36	@ 0x24
 800410a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fb24 	bl	8004774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f825 	bl	800417c <UART_SetConfig>
 8004132:	4603      	mov	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e01b      	b.n	8004174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fba3 	bl	80048b8 <UART_CheckIdleState>
 8004172:	4603      	mov	r3, r0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800417c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004180:	b08c      	sub	sp, #48	@ 0x30
 8004182:	af00      	add	r7, sp, #0
 8004184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	431a      	orrs	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	431a      	orrs	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4baa      	ldr	r3, [pc, #680]	@ (8004454 <UART_SetConfig+0x2d8>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004458 <UART_SetConfig+0x2dc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e4:	4313      	orrs	r3, r2
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80041f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f023 010f 	bic.w	r1, r3, #15
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a90      	ldr	r2, [pc, #576]	@ (800445c <UART_SetConfig+0x2e0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d125      	bne.n	800426c <UART_SetConfig+0xf0>
 8004220:	4b8f      	ldr	r3, [pc, #572]	@ (8004460 <UART_SetConfig+0x2e4>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b03      	cmp	r3, #3
 800422c:	d81a      	bhi.n	8004264 <UART_SetConfig+0xe8>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <UART_SetConfig+0xb8>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004245 	.word	0x08004245
 8004238:	08004255 	.word	0x08004255
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425d 	.word	0x0800425d
 8004244:	2301      	movs	r3, #1
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424a:	e116      	b.n	800447a <UART_SetConfig+0x2fe>
 800424c:	2302      	movs	r3, #2
 800424e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004252:	e112      	b.n	800447a <UART_SetConfig+0x2fe>
 8004254:	2304      	movs	r3, #4
 8004256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800425a:	e10e      	b.n	800447a <UART_SetConfig+0x2fe>
 800425c:	2308      	movs	r3, #8
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004262:	e10a      	b.n	800447a <UART_SetConfig+0x2fe>
 8004264:	2310      	movs	r3, #16
 8004266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800426a:	e106      	b.n	800447a <UART_SetConfig+0x2fe>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7c      	ldr	r2, [pc, #496]	@ (8004464 <UART_SetConfig+0x2e8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d138      	bne.n	80042e8 <UART_SetConfig+0x16c>
 8004276:	4b7a      	ldr	r3, [pc, #488]	@ (8004460 <UART_SetConfig+0x2e4>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d82d      	bhi.n	80042e0 <UART_SetConfig+0x164>
 8004284:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <UART_SetConfig+0x110>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042c1 	.word	0x080042c1
 8004290:	080042e1 	.word	0x080042e1
 8004294:	080042e1 	.word	0x080042e1
 8004298:	080042e1 	.word	0x080042e1
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042e1 	.word	0x080042e1
 80042a4:	080042e1 	.word	0x080042e1
 80042a8:	080042e1 	.word	0x080042e1
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	080042e1 	.word	0x080042e1
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042d9 	.word	0x080042d9
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042c6:	e0d8      	b.n	800447a <UART_SetConfig+0x2fe>
 80042c8:	2302      	movs	r3, #2
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ce:	e0d4      	b.n	800447a <UART_SetConfig+0x2fe>
 80042d0:	2304      	movs	r3, #4
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042d6:	e0d0      	b.n	800447a <UART_SetConfig+0x2fe>
 80042d8:	2308      	movs	r3, #8
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042de:	e0cc      	b.n	800447a <UART_SetConfig+0x2fe>
 80042e0:	2310      	movs	r3, #16
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e6:	e0c8      	b.n	800447a <UART_SetConfig+0x2fe>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004468 <UART_SetConfig+0x2ec>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d125      	bne.n	800433e <UART_SetConfig+0x1c2>
 80042f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004460 <UART_SetConfig+0x2e4>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042fc:	2b30      	cmp	r3, #48	@ 0x30
 80042fe:	d016      	beq.n	800432e <UART_SetConfig+0x1b2>
 8004300:	2b30      	cmp	r3, #48	@ 0x30
 8004302:	d818      	bhi.n	8004336 <UART_SetConfig+0x1ba>
 8004304:	2b20      	cmp	r3, #32
 8004306:	d00a      	beq.n	800431e <UART_SetConfig+0x1a2>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d814      	bhi.n	8004336 <UART_SetConfig+0x1ba>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <UART_SetConfig+0x19a>
 8004310:	2b10      	cmp	r3, #16
 8004312:	d008      	beq.n	8004326 <UART_SetConfig+0x1aa>
 8004314:	e00f      	b.n	8004336 <UART_SetConfig+0x1ba>
 8004316:	2300      	movs	r3, #0
 8004318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800431c:	e0ad      	b.n	800447a <UART_SetConfig+0x2fe>
 800431e:	2302      	movs	r3, #2
 8004320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004324:	e0a9      	b.n	800447a <UART_SetConfig+0x2fe>
 8004326:	2304      	movs	r3, #4
 8004328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800432c:	e0a5      	b.n	800447a <UART_SetConfig+0x2fe>
 800432e:	2308      	movs	r3, #8
 8004330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004334:	e0a1      	b.n	800447a <UART_SetConfig+0x2fe>
 8004336:	2310      	movs	r3, #16
 8004338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433c:	e09d      	b.n	800447a <UART_SetConfig+0x2fe>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a4a      	ldr	r2, [pc, #296]	@ (800446c <UART_SetConfig+0x2f0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d125      	bne.n	8004394 <UART_SetConfig+0x218>
 8004348:	4b45      	ldr	r3, [pc, #276]	@ (8004460 <UART_SetConfig+0x2e4>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004352:	2bc0      	cmp	r3, #192	@ 0xc0
 8004354:	d016      	beq.n	8004384 <UART_SetConfig+0x208>
 8004356:	2bc0      	cmp	r3, #192	@ 0xc0
 8004358:	d818      	bhi.n	800438c <UART_SetConfig+0x210>
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d00a      	beq.n	8004374 <UART_SetConfig+0x1f8>
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d814      	bhi.n	800438c <UART_SetConfig+0x210>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <UART_SetConfig+0x1f0>
 8004366:	2b40      	cmp	r3, #64	@ 0x40
 8004368:	d008      	beq.n	800437c <UART_SetConfig+0x200>
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x210>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004372:	e082      	b.n	800447a <UART_SetConfig+0x2fe>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437a:	e07e      	b.n	800447a <UART_SetConfig+0x2fe>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004382:	e07a      	b.n	800447a <UART_SetConfig+0x2fe>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800438a:	e076      	b.n	800447a <UART_SetConfig+0x2fe>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004392:	e072      	b.n	800447a <UART_SetConfig+0x2fe>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a35      	ldr	r2, [pc, #212]	@ (8004470 <UART_SetConfig+0x2f4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d12a      	bne.n	80043f4 <UART_SetConfig+0x278>
 800439e:	4b30      	ldr	r3, [pc, #192]	@ (8004460 <UART_SetConfig+0x2e4>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ac:	d01a      	beq.n	80043e4 <UART_SetConfig+0x268>
 80043ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b2:	d81b      	bhi.n	80043ec <UART_SetConfig+0x270>
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b8:	d00c      	beq.n	80043d4 <UART_SetConfig+0x258>
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043be:	d815      	bhi.n	80043ec <UART_SetConfig+0x270>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <UART_SetConfig+0x250>
 80043c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c8:	d008      	beq.n	80043dc <UART_SetConfig+0x260>
 80043ca:	e00f      	b.n	80043ec <UART_SetConfig+0x270>
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d2:	e052      	b.n	800447a <UART_SetConfig+0x2fe>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043da:	e04e      	b.n	800447a <UART_SetConfig+0x2fe>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e2:	e04a      	b.n	800447a <UART_SetConfig+0x2fe>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ea:	e046      	b.n	800447a <UART_SetConfig+0x2fe>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f2:	e042      	b.n	800447a <UART_SetConfig+0x2fe>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <UART_SetConfig+0x2dc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d13a      	bne.n	8004474 <UART_SetConfig+0x2f8>
 80043fe:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <UART_SetConfig+0x2e4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004408:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800440c:	d01a      	beq.n	8004444 <UART_SetConfig+0x2c8>
 800440e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004412:	d81b      	bhi.n	800444c <UART_SetConfig+0x2d0>
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004418:	d00c      	beq.n	8004434 <UART_SetConfig+0x2b8>
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800441e:	d815      	bhi.n	800444c <UART_SetConfig+0x2d0>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <UART_SetConfig+0x2b0>
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	d008      	beq.n	800443c <UART_SetConfig+0x2c0>
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x2d0>
 800442c:	2300      	movs	r3, #0
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004432:	e022      	b.n	800447a <UART_SetConfig+0x2fe>
 8004434:	2302      	movs	r3, #2
 8004436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443a:	e01e      	b.n	800447a <UART_SetConfig+0x2fe>
 800443c:	2304      	movs	r3, #4
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004442:	e01a      	b.n	800447a <UART_SetConfig+0x2fe>
 8004444:	2308      	movs	r3, #8
 8004446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444a:	e016      	b.n	800447a <UART_SetConfig+0x2fe>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004452:	e012      	b.n	800447a <UART_SetConfig+0x2fe>
 8004454:	cfff69f3 	.word	0xcfff69f3
 8004458:	40008000 	.word	0x40008000
 800445c:	40013800 	.word	0x40013800
 8004460:	40021000 	.word	0x40021000
 8004464:	40004400 	.word	0x40004400
 8004468:	40004800 	.word	0x40004800
 800446c:	40004c00 	.word	0x40004c00
 8004470:	40005000 	.word	0x40005000
 8004474:	2310      	movs	r3, #16
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4aae      	ldr	r2, [pc, #696]	@ (8004738 <UART_SetConfig+0x5bc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	f040 8097 	bne.w	80045b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800448a:	2b08      	cmp	r3, #8
 800448c:	d823      	bhi.n	80044d6 <UART_SetConfig+0x35a>
 800448e:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <UART_SetConfig+0x318>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044d7 	.word	0x080044d7
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044d7 	.word	0x080044d7
 80044a4:	080044c7 	.word	0x080044c7
 80044a8:	080044d7 	.word	0x080044d7
 80044ac:	080044d7 	.word	0x080044d7
 80044b0:	080044d7 	.word	0x080044d7
 80044b4:	080044cf 	.word	0x080044cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fe fe28 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 80044bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044be:	e010      	b.n	80044e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c0:	4b9e      	ldr	r3, [pc, #632]	@ (800473c <UART_SetConfig+0x5c0>)
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044c4:	e00d      	b.n	80044e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c6:	f7fe fdb3 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80044ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044cc:	e009      	b.n	80044e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044d4:	e005      	b.n	80044e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80044e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8130 	beq.w	800474a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	4a94      	ldr	r2, [pc, #592]	@ (8004740 <UART_SetConfig+0x5c4>)
 80044f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	429a      	cmp	r2, r3
 800450c:	d305      	bcc.n	800451a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004520:	e113      	b.n	800474a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	2200      	movs	r2, #0
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	60fa      	str	r2, [r7, #12]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	4a84      	ldr	r2, [pc, #528]	@ (8004740 <UART_SetConfig+0x5c4>)
 8004530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004534:	b29b      	uxth	r3, r3
 8004536:	2200      	movs	r2, #0
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004544:	f7fb febc 	bl	80002c0 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	020b      	lsls	r3, r1, #8
 800455a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800455e:	0202      	lsls	r2, r0, #8
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	6849      	ldr	r1, [r1, #4]
 8004564:	0849      	lsrs	r1, r1, #1
 8004566:	2000      	movs	r0, #0
 8004568:	460c      	mov	r4, r1
 800456a:	4605      	mov	r5, r0
 800456c:	eb12 0804 	adds.w	r8, r2, r4
 8004570:	eb43 0905 	adc.w	r9, r3, r5
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	469a      	mov	sl, r3
 800457c:	4693      	mov	fp, r2
 800457e:	4652      	mov	r2, sl
 8004580:	465b      	mov	r3, fp
 8004582:	4640      	mov	r0, r8
 8004584:	4649      	mov	r1, r9
 8004586:	f7fb fe9b 	bl	80002c0 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4613      	mov	r3, r2
 8004590:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004598:	d308      	bcc.n	80045ac <UART_SetConfig+0x430>
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045a0:	d204      	bcs.n	80045ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e0ce      	b.n	800474a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045b2:	e0ca      	b.n	800474a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045bc:	d166      	bne.n	800468c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80045be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d827      	bhi.n	8004616 <UART_SetConfig+0x49a>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <UART_SetConfig+0x450>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	08004601 	.word	0x08004601
 80045d8:	08004617 	.word	0x08004617
 80045dc:	08004607 	.word	0x08004607
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004617 	.word	0x08004617
 80045e8:	08004617 	.word	0x08004617
 80045ec:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f0:	f7fe fd8c 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 80045f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045f6:	e014      	b.n	8004622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fe fd9e 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 80045fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045fe:	e010      	b.n	8004622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b4e      	ldr	r3, [pc, #312]	@ (800473c <UART_SetConfig+0x5c0>)
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004604:	e00d      	b.n	8004622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fe fd13 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800460a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800460c:	e009      	b.n	8004622 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004614:	e005      	b.n	8004622 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8090 	beq.w	800474a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	4a44      	ldr	r2, [pc, #272]	@ (8004740 <UART_SetConfig+0x5c4>)
 8004630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004634:	461a      	mov	r2, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	fbb3 f3f2 	udiv	r3, r3, r2
 800463c:	005a      	lsls	r2, r3, #1
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	441a      	add	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	d916      	bls.n	8004684 <UART_SetConfig+0x508>
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465c:	d212      	bcs.n	8004684 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f023 030f 	bic.w	r3, r3, #15
 8004666:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	b29b      	uxth	r3, r3
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	b29a      	uxth	r2, r3
 8004674:	8bfb      	ldrh	r3, [r7, #30]
 8004676:	4313      	orrs	r3, r2
 8004678:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	8bfa      	ldrh	r2, [r7, #30]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	e062      	b.n	800474a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800468a:	e05e      	b.n	800474a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800468c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004690:	2b08      	cmp	r3, #8
 8004692:	d828      	bhi.n	80046e6 <UART_SetConfig+0x56a>
 8004694:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <UART_SetConfig+0x520>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d7 	.word	0x080046d7
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046e7 	.word	0x080046e7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c0:	f7fe fd24 	bl	800310c <HAL_RCC_GetPCLK1Freq>
 80046c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046c6:	e014      	b.n	80046f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7fe fd36 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046ce:	e010      	b.n	80046f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <UART_SetConfig+0x5c0>)
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046d4:	e00d      	b.n	80046f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7fe fcab 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 80046da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046dc:	e009      	b.n	80046f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046e4:	e005      	b.n	80046f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046f0:	bf00      	nop
    }

    if (pclk != 0U)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d028      	beq.n	800474a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	4a10      	ldr	r2, [pc, #64]	@ (8004740 <UART_SetConfig+0x5c4>)
 80046fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004702:	461a      	mov	r2, r3
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	fbb3 f2f2 	udiv	r2, r3, r2
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	441a      	add	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d910      	bls.n	8004744 <UART_SetConfig+0x5c8>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d20c      	bcs.n	8004744 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	b29a      	uxth	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
 8004734:	e009      	b.n	800474a <UART_SetConfig+0x5ce>
 8004736:	bf00      	nop
 8004738:	40008000 	.word	0x40008000
 800473c:	00f42400 	.word	0x00f42400
 8004740:	08005da8 	.word	0x08005da8
      }
      else
      {
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2201      	movs	r2, #1
 800474e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2201      	movs	r2, #1
 8004756:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004766:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800476a:	4618      	mov	r0, r3
 800476c:	3730      	adds	r7, #48	@ 0x30
 800476e:	46bd      	mov	sp, r7
 8004770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01a      	beq.n	800488a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004872:	d10a      	bne.n	800488a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b098      	sub	sp, #96	@ 0x60
 80048bc:	af02      	add	r7, sp, #8
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c8:	f7fc fc26 	bl	8001118 <HAL_GetTick>
 80048cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d12f      	bne.n	800493c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e4:	2200      	movs	r2, #0
 80048e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f88e 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d022      	beq.n	800493c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800490a:	653b      	str	r3, [r7, #80]	@ 0x50
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004914:	647b      	str	r3, [r7, #68]	@ 0x44
 8004916:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800491a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e6      	bne.n	80048f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e063      	b.n	8004a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d149      	bne.n	80049de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004952:	2200      	movs	r2, #0
 8004954:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f857 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d03c      	beq.n	80049de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	623b      	str	r3, [r7, #32]
   return(result);
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004982:	633b      	str	r3, [r7, #48]	@ 0x30
 8004984:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049b6:	61fa      	str	r2, [r7, #28]
 80049b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	69b9      	ldr	r1, [r7, #24]
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	617b      	str	r3, [r7, #20]
   return(result);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e012      	b.n	8004a04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3758      	adds	r7, #88	@ 0x58
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	e04f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a24:	d04b      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fc fb77 	bl	8001118 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e04e      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d037      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b80      	cmp	r3, #128	@ 0x80
 8004a52:	d034      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d031      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d110      	bne.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f838 	bl	8004ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e029      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d111      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f81e 	bl	8004ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e00f      	b.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d0a0      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b095      	sub	sp, #84	@ 0x54
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e3      	bne.n	8004b20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d118      	bne.n	8004b92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 0310 	bic.w	r3, r3, #16
 8004b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e6      	bne.n	8004b60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ba6:	bf00      	nop
 8004ba8:	3754      	adds	r7, #84	@ 0x54
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e027      	b.n	8004c18 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	@ 0x24
 8004bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004bf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e02d      	b.n	8004c98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2224      	movs	r2, #36	@ 0x24
 8004c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f84f 	bl	8004d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e02d      	b.n	8004d14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2224      	movs	r2, #36	@ 0x24
 8004cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f811 	bl	8004d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d108      	bne.n	8004d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d3c:	e031      	b.n	8004da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d3e:	2308      	movs	r3, #8
 8004d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d42:	2308      	movs	r3, #8
 8004d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	0e5b      	lsrs	r3, r3, #25
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	0f5b      	lsrs	r3, r3, #29
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	7b3a      	ldrb	r2, [r7, #12]
 8004d6a:	4911      	ldr	r1, [pc, #68]	@ (8004db0 <UARTEx_SetNbDataToProcess+0x94>)
 8004d6c:	5c8a      	ldrb	r2, [r1, r2]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d72:	7b3a      	ldrb	r2, [r7, #12]
 8004d74:	490f      	ldr	r1, [pc, #60]	@ (8004db4 <UARTEx_SetNbDataToProcess+0x98>)
 8004d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
 8004d86:	7b7a      	ldrb	r2, [r7, #13]
 8004d88:	4909      	ldr	r1, [pc, #36]	@ (8004db0 <UARTEx_SetNbDataToProcess+0x94>)
 8004d8a:	5c8a      	ldrb	r2, [r1, r2]
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d90:	7b7a      	ldrb	r2, [r7, #13]
 8004d92:	4908      	ldr	r1, [pc, #32]	@ (8004db4 <UARTEx_SetNbDataToProcess+0x98>)
 8004d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	08005dc0 	.word	0x08005dc0
 8004db4:	08005dc8 	.word	0x08005dc8

08004db8 <rand>:
 8004db8:	4b16      	ldr	r3, [pc, #88]	@ (8004e14 <rand+0x5c>)
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	681c      	ldr	r4, [r3, #0]
 8004dbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004dc0:	b9b3      	cbnz	r3, 8004df0 <rand+0x38>
 8004dc2:	2018      	movs	r0, #24
 8004dc4:	f000 f94c 	bl	8005060 <malloc>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6320      	str	r0, [r4, #48]	@ 0x30
 8004dcc:	b920      	cbnz	r0, 8004dd8 <rand+0x20>
 8004dce:	4b12      	ldr	r3, [pc, #72]	@ (8004e18 <rand+0x60>)
 8004dd0:	4812      	ldr	r0, [pc, #72]	@ (8004e1c <rand+0x64>)
 8004dd2:	2152      	movs	r1, #82	@ 0x52
 8004dd4:	f000 f926 	bl	8005024 <__assert_func>
 8004dd8:	4911      	ldr	r1, [pc, #68]	@ (8004e20 <rand+0x68>)
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <rand+0x6c>)
 8004ddc:	e9c0 1300 	strd	r1, r3, [r0]
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <rand+0x70>)
 8004de2:	6083      	str	r3, [r0, #8]
 8004de4:	230b      	movs	r3, #11
 8004de6:	8183      	strh	r3, [r0, #12]
 8004de8:	2100      	movs	r1, #0
 8004dea:	2001      	movs	r0, #1
 8004dec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004df0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004df2:	480e      	ldr	r0, [pc, #56]	@ (8004e2c <rand+0x74>)
 8004df4:	690b      	ldr	r3, [r1, #16]
 8004df6:	694c      	ldr	r4, [r1, #20]
 8004df8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e30 <rand+0x78>)
 8004dfa:	4358      	muls	r0, r3
 8004dfc:	fb02 0004 	mla	r0, r2, r4, r0
 8004e00:	fba3 3202 	umull	r3, r2, r3, r2
 8004e04:	3301      	adds	r3, #1
 8004e06:	eb40 0002 	adc.w	r0, r0, r2
 8004e0a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004e0e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	20000018 	.word	0x20000018
 8004e18:	08005dd0 	.word	0x08005dd0
 8004e1c:	08005de7 	.word	0x08005de7
 8004e20:	abcd330e 	.word	0xabcd330e
 8004e24:	e66d1234 	.word	0xe66d1234
 8004e28:	0005deec 	.word	0x0005deec
 8004e2c:	5851f42d 	.word	0x5851f42d
 8004e30:	4c957f2d 	.word	0x4c957f2d

08004e34 <std>:
 8004e34:	2300      	movs	r3, #0
 8004e36:	b510      	push	{r4, lr}
 8004e38:	4604      	mov	r4, r0
 8004e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e42:	6083      	str	r3, [r0, #8]
 8004e44:	8181      	strh	r1, [r0, #12]
 8004e46:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e48:	81c2      	strh	r2, [r0, #14]
 8004e4a:	6183      	str	r3, [r0, #24]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	2208      	movs	r2, #8
 8004e50:	305c      	adds	r0, #92	@ 0x5c
 8004e52:	f000 f8b1 	bl	8004fb8 <memset>
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <std+0x58>)
 8004e58:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <std+0x5c>)
 8004e5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <std+0x60>)
 8004e60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <std+0x64>)
 8004e64:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <std+0x68>)
 8004e68:	6224      	str	r4, [r4, #32]
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	d006      	beq.n	8004e7c <std+0x48>
 8004e6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e72:	4294      	cmp	r4, r2
 8004e74:	d002      	beq.n	8004e7c <std+0x48>
 8004e76:	33d0      	adds	r3, #208	@ 0xd0
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	d105      	bne.n	8004e88 <std+0x54>
 8004e7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e84:	f000 b8ca 	b.w	800501c <__retarget_lock_init_recursive>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08005325 	.word	0x08005325
 8004e90:	08005347 	.word	0x08005347
 8004e94:	0800537f 	.word	0x0800537f
 8004e98:	080053a3 	.word	0x080053a3
 8004e9c:	20000200 	.word	0x20000200

08004ea0 <stdio_exit_handler>:
 8004ea0:	4a02      	ldr	r2, [pc, #8]	@ (8004eac <stdio_exit_handler+0xc>)
 8004ea2:	4903      	ldr	r1, [pc, #12]	@ (8004eb0 <stdio_exit_handler+0x10>)
 8004ea4:	4803      	ldr	r0, [pc, #12]	@ (8004eb4 <stdio_exit_handler+0x14>)
 8004ea6:	f000 b869 	b.w	8004f7c <_fwalk_sglue>
 8004eaa:	bf00      	nop
 8004eac:	2000000c 	.word	0x2000000c
 8004eb0:	080052bd 	.word	0x080052bd
 8004eb4:	2000001c 	.word	0x2000001c

08004eb8 <cleanup_stdio>:
 8004eb8:	6841      	ldr	r1, [r0, #4]
 8004eba:	4b0c      	ldr	r3, [pc, #48]	@ (8004eec <cleanup_stdio+0x34>)
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	d001      	beq.n	8004ec8 <cleanup_stdio+0x10>
 8004ec4:	f000 f9fa 	bl	80052bc <_fflush_r>
 8004ec8:	68a1      	ldr	r1, [r4, #8]
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <cleanup_stdio+0x38>)
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	d002      	beq.n	8004ed6 <cleanup_stdio+0x1e>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 f9f3 	bl	80052bc <_fflush_r>
 8004ed6:	68e1      	ldr	r1, [r4, #12]
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <cleanup_stdio+0x3c>)
 8004eda:	4299      	cmp	r1, r3
 8004edc:	d004      	beq.n	8004ee8 <cleanup_stdio+0x30>
 8004ede:	4620      	mov	r0, r4
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee4:	f000 b9ea 	b.w	80052bc <_fflush_r>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	bf00      	nop
 8004eec:	20000200 	.word	0x20000200
 8004ef0:	20000268 	.word	0x20000268
 8004ef4:	200002d0 	.word	0x200002d0

08004ef8 <global_stdio_init.part.0>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <global_stdio_init.part.0+0x30>)
 8004efc:	4c0b      	ldr	r4, [pc, #44]	@ (8004f2c <global_stdio_init.part.0+0x34>)
 8004efe:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <global_stdio_init.part.0+0x38>)
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	4620      	mov	r0, r4
 8004f04:	2200      	movs	r2, #0
 8004f06:	2104      	movs	r1, #4
 8004f08:	f7ff ff94 	bl	8004e34 <std>
 8004f0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f10:	2201      	movs	r2, #1
 8004f12:	2109      	movs	r1, #9
 8004f14:	f7ff ff8e 	bl	8004e34 <std>
 8004f18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f22:	2112      	movs	r1, #18
 8004f24:	f7ff bf86 	b.w	8004e34 <std>
 8004f28:	20000338 	.word	0x20000338
 8004f2c:	20000200 	.word	0x20000200
 8004f30:	08004ea1 	.word	0x08004ea1

08004f34 <__sfp_lock_acquire>:
 8004f34:	4801      	ldr	r0, [pc, #4]	@ (8004f3c <__sfp_lock_acquire+0x8>)
 8004f36:	f000 b872 	b.w	800501e <__retarget_lock_acquire_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	2000033d 	.word	0x2000033d

08004f40 <__sfp_lock_release>:
 8004f40:	4801      	ldr	r0, [pc, #4]	@ (8004f48 <__sfp_lock_release+0x8>)
 8004f42:	f000 b86d 	b.w	8005020 <__retarget_lock_release_recursive>
 8004f46:	bf00      	nop
 8004f48:	2000033d 	.word	0x2000033d

08004f4c <__sinit>:
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	f7ff fff0 	bl	8004f34 <__sfp_lock_acquire>
 8004f54:	6a23      	ldr	r3, [r4, #32]
 8004f56:	b11b      	cbz	r3, 8004f60 <__sinit+0x14>
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	f7ff bff0 	b.w	8004f40 <__sfp_lock_release>
 8004f60:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <__sinit+0x28>)
 8004f62:	6223      	str	r3, [r4, #32]
 8004f64:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <__sinit+0x2c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f5      	bne.n	8004f58 <__sinit+0xc>
 8004f6c:	f7ff ffc4 	bl	8004ef8 <global_stdio_init.part.0>
 8004f70:	e7f2      	b.n	8004f58 <__sinit+0xc>
 8004f72:	bf00      	nop
 8004f74:	08004eb9 	.word	0x08004eb9
 8004f78:	20000338 	.word	0x20000338

08004f7c <_fwalk_sglue>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	4607      	mov	r7, r0
 8004f82:	4688      	mov	r8, r1
 8004f84:	4614      	mov	r4, r2
 8004f86:	2600      	movs	r6, #0
 8004f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f90:	d505      	bpl.n	8004f9e <_fwalk_sglue+0x22>
 8004f92:	6824      	ldr	r4, [r4, #0]
 8004f94:	2c00      	cmp	r4, #0
 8004f96:	d1f7      	bne.n	8004f88 <_fwalk_sglue+0xc>
 8004f98:	4630      	mov	r0, r6
 8004f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d907      	bls.n	8004fb4 <_fwalk_sglue+0x38>
 8004fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	d003      	beq.n	8004fb4 <_fwalk_sglue+0x38>
 8004fac:	4629      	mov	r1, r5
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c0      	blx	r8
 8004fb2:	4306      	orrs	r6, r0
 8004fb4:	3568      	adds	r5, #104	@ 0x68
 8004fb6:	e7e9      	b.n	8004f8c <_fwalk_sglue+0x10>

08004fb8 <memset>:
 8004fb8:	4402      	add	r2, r0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d100      	bne.n	8004fc2 <memset+0xa>
 8004fc0:	4770      	bx	lr
 8004fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc6:	e7f9      	b.n	8004fbc <memset+0x4>

08004fc8 <__errno>:
 8004fc8:	4b01      	ldr	r3, [pc, #4]	@ (8004fd0 <__errno+0x8>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000018 	.word	0x20000018

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8005010 <__libc_init_array+0x3c>)
 8004fda:	1b64      	subs	r4, r4, r5
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2600      	movs	r6, #0
 8004fe0:	42a6      	cmp	r6, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8005018 <__libc_init_array+0x44>)
 8004fe8:	f000 fec6 	bl	8005d78 <_init>
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffc:	4798      	blx	r3
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f855 3b04 	ldr.w	r3, [r5], #4
 8005006:	4798      	blx	r3
 8005008:	3601      	adds	r6, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	08005eb8 	.word	0x08005eb8
 8005010:	08005eb8 	.word	0x08005eb8
 8005014:	08005eb8 	.word	0x08005eb8
 8005018:	08005ebc 	.word	0x08005ebc

0800501c <__retarget_lock_init_recursive>:
 800501c:	4770      	bx	lr

0800501e <__retarget_lock_acquire_recursive>:
 800501e:	4770      	bx	lr

08005020 <__retarget_lock_release_recursive>:
 8005020:	4770      	bx	lr
	...

08005024 <__assert_func>:
 8005024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005026:	4614      	mov	r4, r2
 8005028:	461a      	mov	r2, r3
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <__assert_func+0x2c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4605      	mov	r5, r0
 8005030:	68d8      	ldr	r0, [r3, #12]
 8005032:	b954      	cbnz	r4, 800504a <__assert_func+0x26>
 8005034:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <__assert_func+0x30>)
 8005036:	461c      	mov	r4, r3
 8005038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800503c:	9100      	str	r1, [sp, #0]
 800503e:	462b      	mov	r3, r5
 8005040:	4905      	ldr	r1, [pc, #20]	@ (8005058 <__assert_func+0x34>)
 8005042:	f000 f9b3 	bl	80053ac <fiprintf>
 8005046:	f000 fa19 	bl	800547c <abort>
 800504a:	4b04      	ldr	r3, [pc, #16]	@ (800505c <__assert_func+0x38>)
 800504c:	e7f4      	b.n	8005038 <__assert_func+0x14>
 800504e:	bf00      	nop
 8005050:	20000018 	.word	0x20000018
 8005054:	08005e7a 	.word	0x08005e7a
 8005058:	08005e4c 	.word	0x08005e4c
 800505c:	08005e3f 	.word	0x08005e3f

08005060 <malloc>:
 8005060:	4b02      	ldr	r3, [pc, #8]	@ (800506c <malloc+0xc>)
 8005062:	4601      	mov	r1, r0
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f000 b825 	b.w	80050b4 <_malloc_r>
 800506a:	bf00      	nop
 800506c:	20000018 	.word	0x20000018

08005070 <sbrk_aligned>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4e0f      	ldr	r6, [pc, #60]	@ (80050b0 <sbrk_aligned+0x40>)
 8005074:	460c      	mov	r4, r1
 8005076:	6831      	ldr	r1, [r6, #0]
 8005078:	4605      	mov	r5, r0
 800507a:	b911      	cbnz	r1, 8005082 <sbrk_aligned+0x12>
 800507c:	f000 f9dc 	bl	8005438 <_sbrk_r>
 8005080:	6030      	str	r0, [r6, #0]
 8005082:	4621      	mov	r1, r4
 8005084:	4628      	mov	r0, r5
 8005086:	f000 f9d7 	bl	8005438 <_sbrk_r>
 800508a:	1c43      	adds	r3, r0, #1
 800508c:	d103      	bne.n	8005096 <sbrk_aligned+0x26>
 800508e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005092:	4620      	mov	r0, r4
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d0f8      	beq.n	8005092 <sbrk_aligned+0x22>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f9c8 	bl	8005438 <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1f2      	bne.n	8005092 <sbrk_aligned+0x22>
 80050ac:	e7ef      	b.n	800508e <sbrk_aligned+0x1e>
 80050ae:	bf00      	nop
 80050b0:	20000340 	.word	0x20000340

080050b4 <_malloc_r>:
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	1ccd      	adds	r5, r1, #3
 80050ba:	f025 0503 	bic.w	r5, r5, #3
 80050be:	3508      	adds	r5, #8
 80050c0:	2d0c      	cmp	r5, #12
 80050c2:	bf38      	it	cc
 80050c4:	250c      	movcc	r5, #12
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	4606      	mov	r6, r0
 80050ca:	db01      	blt.n	80050d0 <_malloc_r+0x1c>
 80050cc:	42a9      	cmp	r1, r5
 80050ce:	d904      	bls.n	80050da <_malloc_r+0x26>
 80050d0:	230c      	movs	r3, #12
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	2000      	movs	r0, #0
 80050d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051b0 <_malloc_r+0xfc>
 80050de:	f000 f915 	bl	800530c <__malloc_lock>
 80050e2:	f8d8 3000 	ldr.w	r3, [r8]
 80050e6:	461c      	mov	r4, r3
 80050e8:	bb44      	cbnz	r4, 800513c <_malloc_r+0x88>
 80050ea:	4629      	mov	r1, r5
 80050ec:	4630      	mov	r0, r6
 80050ee:	f7ff ffbf 	bl	8005070 <sbrk_aligned>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	4604      	mov	r4, r0
 80050f6:	d158      	bne.n	80051aa <_malloc_r+0xf6>
 80050f8:	f8d8 4000 	ldr.w	r4, [r8]
 80050fc:	4627      	mov	r7, r4
 80050fe:	2f00      	cmp	r7, #0
 8005100:	d143      	bne.n	800518a <_malloc_r+0xd6>
 8005102:	2c00      	cmp	r4, #0
 8005104:	d04b      	beq.n	800519e <_malloc_r+0xea>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	4639      	mov	r1, r7
 800510a:	4630      	mov	r0, r6
 800510c:	eb04 0903 	add.w	r9, r4, r3
 8005110:	f000 f992 	bl	8005438 <_sbrk_r>
 8005114:	4581      	cmp	r9, r0
 8005116:	d142      	bne.n	800519e <_malloc_r+0xea>
 8005118:	6821      	ldr	r1, [r4, #0]
 800511a:	1a6d      	subs	r5, r5, r1
 800511c:	4629      	mov	r1, r5
 800511e:	4630      	mov	r0, r6
 8005120:	f7ff ffa6 	bl	8005070 <sbrk_aligned>
 8005124:	3001      	adds	r0, #1
 8005126:	d03a      	beq.n	800519e <_malloc_r+0xea>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	442b      	add	r3, r5
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	f8d8 3000 	ldr.w	r3, [r8]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	bb62      	cbnz	r2, 8005190 <_malloc_r+0xdc>
 8005136:	f8c8 7000 	str.w	r7, [r8]
 800513a:	e00f      	b.n	800515c <_malloc_r+0xa8>
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	1b52      	subs	r2, r2, r5
 8005140:	d420      	bmi.n	8005184 <_malloc_r+0xd0>
 8005142:	2a0b      	cmp	r2, #11
 8005144:	d917      	bls.n	8005176 <_malloc_r+0xc2>
 8005146:	1961      	adds	r1, r4, r5
 8005148:	42a3      	cmp	r3, r4
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	bf18      	it	ne
 800514e:	6059      	strne	r1, [r3, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	bf08      	it	eq
 8005154:	f8c8 1000 	streq.w	r1, [r8]
 8005158:	5162      	str	r2, [r4, r5]
 800515a:	604b      	str	r3, [r1, #4]
 800515c:	4630      	mov	r0, r6
 800515e:	f000 f8db 	bl	8005318 <__malloc_unlock>
 8005162:	f104 000b 	add.w	r0, r4, #11
 8005166:	1d23      	adds	r3, r4, #4
 8005168:	f020 0007 	bic.w	r0, r0, #7
 800516c:	1ac2      	subs	r2, r0, r3
 800516e:	bf1c      	itt	ne
 8005170:	1a1b      	subne	r3, r3, r0
 8005172:	50a3      	strne	r3, [r4, r2]
 8005174:	e7af      	b.n	80050d6 <_malloc_r+0x22>
 8005176:	6862      	ldr	r2, [r4, #4]
 8005178:	42a3      	cmp	r3, r4
 800517a:	bf0c      	ite	eq
 800517c:	f8c8 2000 	streq.w	r2, [r8]
 8005180:	605a      	strne	r2, [r3, #4]
 8005182:	e7eb      	b.n	800515c <_malloc_r+0xa8>
 8005184:	4623      	mov	r3, r4
 8005186:	6864      	ldr	r4, [r4, #4]
 8005188:	e7ae      	b.n	80050e8 <_malloc_r+0x34>
 800518a:	463c      	mov	r4, r7
 800518c:	687f      	ldr	r7, [r7, #4]
 800518e:	e7b6      	b.n	80050fe <_malloc_r+0x4a>
 8005190:	461a      	mov	r2, r3
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	42a3      	cmp	r3, r4
 8005196:	d1fb      	bne.n	8005190 <_malloc_r+0xdc>
 8005198:	2300      	movs	r3, #0
 800519a:	6053      	str	r3, [r2, #4]
 800519c:	e7de      	b.n	800515c <_malloc_r+0xa8>
 800519e:	230c      	movs	r3, #12
 80051a0:	6033      	str	r3, [r6, #0]
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 f8b8 	bl	8005318 <__malloc_unlock>
 80051a8:	e794      	b.n	80050d4 <_malloc_r+0x20>
 80051aa:	6005      	str	r5, [r0, #0]
 80051ac:	e7d6      	b.n	800515c <_malloc_r+0xa8>
 80051ae:	bf00      	nop
 80051b0:	20000344 	.word	0x20000344

080051b4 <__sflush_r>:
 80051b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051bc:	0716      	lsls	r6, r2, #28
 80051be:	4605      	mov	r5, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	d454      	bmi.n	800526e <__sflush_r+0xba>
 80051c4:	684b      	ldr	r3, [r1, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	dc02      	bgt.n	80051d0 <__sflush_r+0x1c>
 80051ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd48      	ble.n	8005262 <__sflush_r+0xae>
 80051d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d045      	beq.n	8005262 <__sflush_r+0xae>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051dc:	682f      	ldr	r7, [r5, #0]
 80051de:	6a21      	ldr	r1, [r4, #32]
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	d030      	beq.n	8005246 <__sflush_r+0x92>
 80051e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	0759      	lsls	r1, r3, #29
 80051ea:	d505      	bpl.n	80051f8 <__sflush_r+0x44>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051f2:	b10b      	cbz	r3, 80051f8 <__sflush_r+0x44>
 80051f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051f6:	1ad2      	subs	r2, r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051fc:	6a21      	ldr	r1, [r4, #32]
 80051fe:	4628      	mov	r0, r5
 8005200:	47b0      	blx	r6
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	d106      	bne.n	8005216 <__sflush_r+0x62>
 8005208:	6829      	ldr	r1, [r5, #0]
 800520a:	291d      	cmp	r1, #29
 800520c:	d82b      	bhi.n	8005266 <__sflush_r+0xb2>
 800520e:	4a2a      	ldr	r2, [pc, #168]	@ (80052b8 <__sflush_r+0x104>)
 8005210:	410a      	asrs	r2, r1
 8005212:	07d6      	lsls	r6, r2, #31
 8005214:	d427      	bmi.n	8005266 <__sflush_r+0xb2>
 8005216:	2200      	movs	r2, #0
 8005218:	6062      	str	r2, [r4, #4]
 800521a:	04d9      	lsls	r1, r3, #19
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	d504      	bpl.n	800522c <__sflush_r+0x78>
 8005222:	1c42      	adds	r2, r0, #1
 8005224:	d101      	bne.n	800522a <__sflush_r+0x76>
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	b903      	cbnz	r3, 800522c <__sflush_r+0x78>
 800522a:	6560      	str	r0, [r4, #84]	@ 0x54
 800522c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800522e:	602f      	str	r7, [r5, #0]
 8005230:	b1b9      	cbz	r1, 8005262 <__sflush_r+0xae>
 8005232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005236:	4299      	cmp	r1, r3
 8005238:	d002      	beq.n	8005240 <__sflush_r+0x8c>
 800523a:	4628      	mov	r0, r5
 800523c:	f000 f926 	bl	800548c <_free_r>
 8005240:	2300      	movs	r3, #0
 8005242:	6363      	str	r3, [r4, #52]	@ 0x34
 8005244:	e00d      	b.n	8005262 <__sflush_r+0xae>
 8005246:	2301      	movs	r3, #1
 8005248:	4628      	mov	r0, r5
 800524a:	47b0      	blx	r6
 800524c:	4602      	mov	r2, r0
 800524e:	1c50      	adds	r0, r2, #1
 8005250:	d1c9      	bne.n	80051e6 <__sflush_r+0x32>
 8005252:	682b      	ldr	r3, [r5, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0c6      	beq.n	80051e6 <__sflush_r+0x32>
 8005258:	2b1d      	cmp	r3, #29
 800525a:	d001      	beq.n	8005260 <__sflush_r+0xac>
 800525c:	2b16      	cmp	r3, #22
 800525e:	d11e      	bne.n	800529e <__sflush_r+0xea>
 8005260:	602f      	str	r7, [r5, #0]
 8005262:	2000      	movs	r0, #0
 8005264:	e022      	b.n	80052ac <__sflush_r+0xf8>
 8005266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800526a:	b21b      	sxth	r3, r3
 800526c:	e01b      	b.n	80052a6 <__sflush_r+0xf2>
 800526e:	690f      	ldr	r7, [r1, #16]
 8005270:	2f00      	cmp	r7, #0
 8005272:	d0f6      	beq.n	8005262 <__sflush_r+0xae>
 8005274:	0793      	lsls	r3, r2, #30
 8005276:	680e      	ldr	r6, [r1, #0]
 8005278:	bf08      	it	eq
 800527a:	694b      	ldreq	r3, [r1, #20]
 800527c:	600f      	str	r7, [r1, #0]
 800527e:	bf18      	it	ne
 8005280:	2300      	movne	r3, #0
 8005282:	eba6 0807 	sub.w	r8, r6, r7
 8005286:	608b      	str	r3, [r1, #8]
 8005288:	f1b8 0f00 	cmp.w	r8, #0
 800528c:	dde9      	ble.n	8005262 <__sflush_r+0xae>
 800528e:	6a21      	ldr	r1, [r4, #32]
 8005290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005292:	4643      	mov	r3, r8
 8005294:	463a      	mov	r2, r7
 8005296:	4628      	mov	r0, r5
 8005298:	47b0      	blx	r6
 800529a:	2800      	cmp	r0, #0
 800529c:	dc08      	bgt.n	80052b0 <__sflush_r+0xfc>
 800529e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	4407      	add	r7, r0
 80052b2:	eba8 0800 	sub.w	r8, r8, r0
 80052b6:	e7e7      	b.n	8005288 <__sflush_r+0xd4>
 80052b8:	dfbffffe 	.word	0xdfbffffe

080052bc <_fflush_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	690b      	ldr	r3, [r1, #16]
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	b913      	cbnz	r3, 80052cc <_fflush_r+0x10>
 80052c6:	2500      	movs	r5, #0
 80052c8:	4628      	mov	r0, r5
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	b118      	cbz	r0, 80052d6 <_fflush_r+0x1a>
 80052ce:	6a03      	ldr	r3, [r0, #32]
 80052d0:	b90b      	cbnz	r3, 80052d6 <_fflush_r+0x1a>
 80052d2:	f7ff fe3b 	bl	8004f4c <__sinit>
 80052d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f3      	beq.n	80052c6 <_fflush_r+0xa>
 80052de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052e0:	07d0      	lsls	r0, r2, #31
 80052e2:	d404      	bmi.n	80052ee <_fflush_r+0x32>
 80052e4:	0599      	lsls	r1, r3, #22
 80052e6:	d402      	bmi.n	80052ee <_fflush_r+0x32>
 80052e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ea:	f7ff fe98 	bl	800501e <__retarget_lock_acquire_recursive>
 80052ee:	4628      	mov	r0, r5
 80052f0:	4621      	mov	r1, r4
 80052f2:	f7ff ff5f 	bl	80051b4 <__sflush_r>
 80052f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052f8:	07da      	lsls	r2, r3, #31
 80052fa:	4605      	mov	r5, r0
 80052fc:	d4e4      	bmi.n	80052c8 <_fflush_r+0xc>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	d4e1      	bmi.n	80052c8 <_fflush_r+0xc>
 8005304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005306:	f7ff fe8b 	bl	8005020 <__retarget_lock_release_recursive>
 800530a:	e7dd      	b.n	80052c8 <_fflush_r+0xc>

0800530c <__malloc_lock>:
 800530c:	4801      	ldr	r0, [pc, #4]	@ (8005314 <__malloc_lock+0x8>)
 800530e:	f7ff be86 	b.w	800501e <__retarget_lock_acquire_recursive>
 8005312:	bf00      	nop
 8005314:	2000033c 	.word	0x2000033c

08005318 <__malloc_unlock>:
 8005318:	4801      	ldr	r0, [pc, #4]	@ (8005320 <__malloc_unlock+0x8>)
 800531a:	f7ff be81 	b.w	8005020 <__retarget_lock_release_recursive>
 800531e:	bf00      	nop
 8005320:	2000033c 	.word	0x2000033c

08005324 <__sread>:
 8005324:	b510      	push	{r4, lr}
 8005326:	460c      	mov	r4, r1
 8005328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532c:	f000 f872 	bl	8005414 <_read_r>
 8005330:	2800      	cmp	r0, #0
 8005332:	bfab      	itete	ge
 8005334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005336:	89a3      	ldrhlt	r3, [r4, #12]
 8005338:	181b      	addge	r3, r3, r0
 800533a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800533e:	bfac      	ite	ge
 8005340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005342:	81a3      	strhlt	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__swrite>:
 8005346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534a:	461f      	mov	r7, r3
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	05db      	lsls	r3, r3, #23
 8005350:	4605      	mov	r5, r0
 8005352:	460c      	mov	r4, r1
 8005354:	4616      	mov	r6, r2
 8005356:	d505      	bpl.n	8005364 <__swrite+0x1e>
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	2302      	movs	r3, #2
 800535e:	2200      	movs	r2, #0
 8005360:	f000 f846 	bl	80053f0 <_lseek_r>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800536a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800536e:	81a3      	strh	r3, [r4, #12]
 8005370:	4632      	mov	r2, r6
 8005372:	463b      	mov	r3, r7
 8005374:	4628      	mov	r0, r5
 8005376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	f000 b86d 	b.w	8005458 <_write_r>

0800537e <__sseek>:
 800537e:	b510      	push	{r4, lr}
 8005380:	460c      	mov	r4, r1
 8005382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005386:	f000 f833 	bl	80053f0 <_lseek_r>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	bf15      	itete	ne
 8005390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800539a:	81a3      	strheq	r3, [r4, #12]
 800539c:	bf18      	it	ne
 800539e:	81a3      	strhne	r3, [r4, #12]
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <__sclose>:
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f000 b813 	b.w	80053d0 <_close_r>
	...

080053ac <fiprintf>:
 80053ac:	b40e      	push	{r1, r2, r3}
 80053ae:	b503      	push	{r0, r1, lr}
 80053b0:	4601      	mov	r1, r0
 80053b2:	ab03      	add	r3, sp, #12
 80053b4:	4805      	ldr	r0, [pc, #20]	@ (80053cc <fiprintf+0x20>)
 80053b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	f000 f8d9 	bl	8005574 <_vfiprintf_r>
 80053c2:	b002      	add	sp, #8
 80053c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c8:	b003      	add	sp, #12
 80053ca:	4770      	bx	lr
 80053cc:	20000018 	.word	0x20000018

080053d0 <_close_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4d06      	ldr	r5, [pc, #24]	@ (80053ec <_close_r+0x1c>)
 80053d4:	2300      	movs	r3, #0
 80053d6:	4604      	mov	r4, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	602b      	str	r3, [r5, #0]
 80053dc:	f7fb fd92 	bl	8000f04 <_close>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_close_r+0x1a>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_close_r+0x1a>
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000348 	.word	0x20000348

080053f0 <_lseek_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d07      	ldr	r5, [pc, #28]	@ (8005410 <_lseek_r+0x20>)
 80053f4:	4604      	mov	r4, r0
 80053f6:	4608      	mov	r0, r1
 80053f8:	4611      	mov	r1, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	602a      	str	r2, [r5, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f7fb fda7 	bl	8000f52 <_lseek>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_lseek_r+0x1e>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_lseek_r+0x1e>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	20000348 	.word	0x20000348

08005414 <_read_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d07      	ldr	r5, [pc, #28]	@ (8005434 <_read_r+0x20>)
 8005418:	4604      	mov	r4, r0
 800541a:	4608      	mov	r0, r1
 800541c:	4611      	mov	r1, r2
 800541e:	2200      	movs	r2, #0
 8005420:	602a      	str	r2, [r5, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	f7fb fd35 	bl	8000e92 <_read>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d102      	bne.n	8005432 <_read_r+0x1e>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	b103      	cbz	r3, 8005432 <_read_r+0x1e>
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	20000348 	.word	0x20000348

08005438 <_sbrk_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	@ (8005454 <_sbrk_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb fd92 	bl	8000f6c <_sbrk>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_sbrk_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_sbrk_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	20000348 	.word	0x20000348

08005458 <_write_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d07      	ldr	r5, [pc, #28]	@ (8005478 <_write_r+0x20>)
 800545c:	4604      	mov	r4, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fb fd30 	bl	8000ecc <_write>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_write_r+0x1e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_write_r+0x1e>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	20000348 	.word	0x20000348

0800547c <abort>:
 800547c:	b508      	push	{r3, lr}
 800547e:	2006      	movs	r0, #6
 8005480:	f000 fc5e 	bl	8005d40 <raise>
 8005484:	2001      	movs	r0, #1
 8005486:	f7fb fcf9 	bl	8000e7c <_exit>
	...

0800548c <_free_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4605      	mov	r5, r0
 8005490:	2900      	cmp	r1, #0
 8005492:	d041      	beq.n	8005518 <_free_r+0x8c>
 8005494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005498:	1f0c      	subs	r4, r1, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	bfb8      	it	lt
 800549e:	18e4      	addlt	r4, r4, r3
 80054a0:	f7ff ff34 	bl	800530c <__malloc_lock>
 80054a4:	4a1d      	ldr	r2, [pc, #116]	@ (800551c <_free_r+0x90>)
 80054a6:	6813      	ldr	r3, [r2, #0]
 80054a8:	b933      	cbnz	r3, 80054b8 <_free_r+0x2c>
 80054aa:	6063      	str	r3, [r4, #4]
 80054ac:	6014      	str	r4, [r2, #0]
 80054ae:	4628      	mov	r0, r5
 80054b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b4:	f7ff bf30 	b.w	8005318 <__malloc_unlock>
 80054b8:	42a3      	cmp	r3, r4
 80054ba:	d908      	bls.n	80054ce <_free_r+0x42>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	1821      	adds	r1, r4, r0
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf01      	itttt	eq
 80054c4:	6819      	ldreq	r1, [r3, #0]
 80054c6:	685b      	ldreq	r3, [r3, #4]
 80054c8:	1809      	addeq	r1, r1, r0
 80054ca:	6021      	streq	r1, [r4, #0]
 80054cc:	e7ed      	b.n	80054aa <_free_r+0x1e>
 80054ce:	461a      	mov	r2, r3
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	b10b      	cbz	r3, 80054d8 <_free_r+0x4c>
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d9fa      	bls.n	80054ce <_free_r+0x42>
 80054d8:	6811      	ldr	r1, [r2, #0]
 80054da:	1850      	adds	r0, r2, r1
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d10b      	bne.n	80054f8 <_free_r+0x6c>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	4401      	add	r1, r0
 80054e4:	1850      	adds	r0, r2, r1
 80054e6:	4283      	cmp	r3, r0
 80054e8:	6011      	str	r1, [r2, #0]
 80054ea:	d1e0      	bne.n	80054ae <_free_r+0x22>
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	6053      	str	r3, [r2, #4]
 80054f2:	4408      	add	r0, r1
 80054f4:	6010      	str	r0, [r2, #0]
 80054f6:	e7da      	b.n	80054ae <_free_r+0x22>
 80054f8:	d902      	bls.n	8005500 <_free_r+0x74>
 80054fa:	230c      	movs	r3, #12
 80054fc:	602b      	str	r3, [r5, #0]
 80054fe:	e7d6      	b.n	80054ae <_free_r+0x22>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	1821      	adds	r1, r4, r0
 8005504:	428b      	cmp	r3, r1
 8005506:	bf04      	itt	eq
 8005508:	6819      	ldreq	r1, [r3, #0]
 800550a:	685b      	ldreq	r3, [r3, #4]
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	bf04      	itt	eq
 8005510:	1809      	addeq	r1, r1, r0
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	6054      	str	r4, [r2, #4]
 8005516:	e7ca      	b.n	80054ae <_free_r+0x22>
 8005518:	bd38      	pop	{r3, r4, r5, pc}
 800551a:	bf00      	nop
 800551c:	20000344 	.word	0x20000344

08005520 <__sfputc_r>:
 8005520:	6893      	ldr	r3, [r2, #8]
 8005522:	3b01      	subs	r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	b410      	push	{r4}
 8005528:	6093      	str	r3, [r2, #8]
 800552a:	da08      	bge.n	800553e <__sfputc_r+0x1e>
 800552c:	6994      	ldr	r4, [r2, #24]
 800552e:	42a3      	cmp	r3, r4
 8005530:	db01      	blt.n	8005536 <__sfputc_r+0x16>
 8005532:	290a      	cmp	r1, #10
 8005534:	d103      	bne.n	800553e <__sfputc_r+0x1e>
 8005536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800553a:	f000 bac1 	b.w	8005ac0 <__swbuf_r>
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	1c58      	adds	r0, r3, #1
 8005542:	6010      	str	r0, [r2, #0]
 8005544:	7019      	strb	r1, [r3, #0]
 8005546:	4608      	mov	r0, r1
 8005548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554c:	4770      	bx	lr

0800554e <__sfputs_r>:
 800554e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005550:	4606      	mov	r6, r0
 8005552:	460f      	mov	r7, r1
 8005554:	4614      	mov	r4, r2
 8005556:	18d5      	adds	r5, r2, r3
 8005558:	42ac      	cmp	r4, r5
 800555a:	d101      	bne.n	8005560 <__sfputs_r+0x12>
 800555c:	2000      	movs	r0, #0
 800555e:	e007      	b.n	8005570 <__sfputs_r+0x22>
 8005560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005564:	463a      	mov	r2, r7
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff ffda 	bl	8005520 <__sfputc_r>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d1f3      	bne.n	8005558 <__sfputs_r+0xa>
 8005570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005574 <_vfiprintf_r>:
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	460d      	mov	r5, r1
 800557a:	b09d      	sub	sp, #116	@ 0x74
 800557c:	4614      	mov	r4, r2
 800557e:	4698      	mov	r8, r3
 8005580:	4606      	mov	r6, r0
 8005582:	b118      	cbz	r0, 800558c <_vfiprintf_r+0x18>
 8005584:	6a03      	ldr	r3, [r0, #32]
 8005586:	b90b      	cbnz	r3, 800558c <_vfiprintf_r+0x18>
 8005588:	f7ff fce0 	bl	8004f4c <__sinit>
 800558c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800558e:	07d9      	lsls	r1, r3, #31
 8005590:	d405      	bmi.n	800559e <_vfiprintf_r+0x2a>
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	059a      	lsls	r2, r3, #22
 8005596:	d402      	bmi.n	800559e <_vfiprintf_r+0x2a>
 8005598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800559a:	f7ff fd40 	bl	800501e <__retarget_lock_acquire_recursive>
 800559e:	89ab      	ldrh	r3, [r5, #12]
 80055a0:	071b      	lsls	r3, r3, #28
 80055a2:	d501      	bpl.n	80055a8 <_vfiprintf_r+0x34>
 80055a4:	692b      	ldr	r3, [r5, #16]
 80055a6:	b99b      	cbnz	r3, 80055d0 <_vfiprintf_r+0x5c>
 80055a8:	4629      	mov	r1, r5
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 fac6 	bl	8005b3c <__swsetup_r>
 80055b0:	b170      	cbz	r0, 80055d0 <_vfiprintf_r+0x5c>
 80055b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055b4:	07dc      	lsls	r4, r3, #31
 80055b6:	d504      	bpl.n	80055c2 <_vfiprintf_r+0x4e>
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055bc:	b01d      	add	sp, #116	@ 0x74
 80055be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	89ab      	ldrh	r3, [r5, #12]
 80055c4:	0598      	lsls	r0, r3, #22
 80055c6:	d4f7      	bmi.n	80055b8 <_vfiprintf_r+0x44>
 80055c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055ca:	f7ff fd29 	bl	8005020 <__retarget_lock_release_recursive>
 80055ce:	e7f3      	b.n	80055b8 <_vfiprintf_r+0x44>
 80055d0:	2300      	movs	r3, #0
 80055d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055d4:	2320      	movs	r3, #32
 80055d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055da:	f8cd 800c 	str.w	r8, [sp, #12]
 80055de:	2330      	movs	r3, #48	@ 0x30
 80055e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005790 <_vfiprintf_r+0x21c>
 80055e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055e8:	f04f 0901 	mov.w	r9, #1
 80055ec:	4623      	mov	r3, r4
 80055ee:	469a      	mov	sl, r3
 80055f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055f4:	b10a      	cbz	r2, 80055fa <_vfiprintf_r+0x86>
 80055f6:	2a25      	cmp	r2, #37	@ 0x25
 80055f8:	d1f9      	bne.n	80055ee <_vfiprintf_r+0x7a>
 80055fa:	ebba 0b04 	subs.w	fp, sl, r4
 80055fe:	d00b      	beq.n	8005618 <_vfiprintf_r+0xa4>
 8005600:	465b      	mov	r3, fp
 8005602:	4622      	mov	r2, r4
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f7ff ffa1 	bl	800554e <__sfputs_r>
 800560c:	3001      	adds	r0, #1
 800560e:	f000 80a7 	beq.w	8005760 <_vfiprintf_r+0x1ec>
 8005612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005614:	445a      	add	r2, fp
 8005616:	9209      	str	r2, [sp, #36]	@ 0x24
 8005618:	f89a 3000 	ldrb.w	r3, [sl]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 809f 	beq.w	8005760 <_vfiprintf_r+0x1ec>
 8005622:	2300      	movs	r3, #0
 8005624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800562c:	f10a 0a01 	add.w	sl, sl, #1
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005638:	931a      	str	r3, [sp, #104]	@ 0x68
 800563a:	4654      	mov	r4, sl
 800563c:	2205      	movs	r2, #5
 800563e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005642:	4853      	ldr	r0, [pc, #332]	@ (8005790 <_vfiprintf_r+0x21c>)
 8005644:	f7fa fdec 	bl	8000220 <memchr>
 8005648:	9a04      	ldr	r2, [sp, #16]
 800564a:	b9d8      	cbnz	r0, 8005684 <_vfiprintf_r+0x110>
 800564c:	06d1      	lsls	r1, r2, #27
 800564e:	bf44      	itt	mi
 8005650:	2320      	movmi	r3, #32
 8005652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005656:	0713      	lsls	r3, r2, #28
 8005658:	bf44      	itt	mi
 800565a:	232b      	movmi	r3, #43	@ 0x2b
 800565c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005660:	f89a 3000 	ldrb.w	r3, [sl]
 8005664:	2b2a      	cmp	r3, #42	@ 0x2a
 8005666:	d015      	beq.n	8005694 <_vfiprintf_r+0x120>
 8005668:	9a07      	ldr	r2, [sp, #28]
 800566a:	4654      	mov	r4, sl
 800566c:	2000      	movs	r0, #0
 800566e:	f04f 0c0a 	mov.w	ip, #10
 8005672:	4621      	mov	r1, r4
 8005674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005678:	3b30      	subs	r3, #48	@ 0x30
 800567a:	2b09      	cmp	r3, #9
 800567c:	d94b      	bls.n	8005716 <_vfiprintf_r+0x1a2>
 800567e:	b1b0      	cbz	r0, 80056ae <_vfiprintf_r+0x13a>
 8005680:	9207      	str	r2, [sp, #28]
 8005682:	e014      	b.n	80056ae <_vfiprintf_r+0x13a>
 8005684:	eba0 0308 	sub.w	r3, r0, r8
 8005688:	fa09 f303 	lsl.w	r3, r9, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	46a2      	mov	sl, r4
 8005692:	e7d2      	b.n	800563a <_vfiprintf_r+0xc6>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	1d19      	adds	r1, r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	9103      	str	r1, [sp, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	bfbb      	ittet	lt
 80056a0:	425b      	neglt	r3, r3
 80056a2:	f042 0202 	orrlt.w	r2, r2, #2
 80056a6:	9307      	strge	r3, [sp, #28]
 80056a8:	9307      	strlt	r3, [sp, #28]
 80056aa:	bfb8      	it	lt
 80056ac:	9204      	strlt	r2, [sp, #16]
 80056ae:	7823      	ldrb	r3, [r4, #0]
 80056b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80056b2:	d10a      	bne.n	80056ca <_vfiprintf_r+0x156>
 80056b4:	7863      	ldrb	r3, [r4, #1]
 80056b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b8:	d132      	bne.n	8005720 <_vfiprintf_r+0x1ac>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	9203      	str	r2, [sp, #12]
 80056c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056c6:	3402      	adds	r4, #2
 80056c8:	9305      	str	r3, [sp, #20]
 80056ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80057a0 <_vfiprintf_r+0x22c>
 80056ce:	7821      	ldrb	r1, [r4, #0]
 80056d0:	2203      	movs	r2, #3
 80056d2:	4650      	mov	r0, sl
 80056d4:	f7fa fda4 	bl	8000220 <memchr>
 80056d8:	b138      	cbz	r0, 80056ea <_vfiprintf_r+0x176>
 80056da:	9b04      	ldr	r3, [sp, #16]
 80056dc:	eba0 000a 	sub.w	r0, r0, sl
 80056e0:	2240      	movs	r2, #64	@ 0x40
 80056e2:	4082      	lsls	r2, r0
 80056e4:	4313      	orrs	r3, r2
 80056e6:	3401      	adds	r4, #1
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ee:	4829      	ldr	r0, [pc, #164]	@ (8005794 <_vfiprintf_r+0x220>)
 80056f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056f4:	2206      	movs	r2, #6
 80056f6:	f7fa fd93 	bl	8000220 <memchr>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d03f      	beq.n	800577e <_vfiprintf_r+0x20a>
 80056fe:	4b26      	ldr	r3, [pc, #152]	@ (8005798 <_vfiprintf_r+0x224>)
 8005700:	bb1b      	cbnz	r3, 800574a <_vfiprintf_r+0x1d6>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	3307      	adds	r3, #7
 8005706:	f023 0307 	bic.w	r3, r3, #7
 800570a:	3308      	adds	r3, #8
 800570c:	9303      	str	r3, [sp, #12]
 800570e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005710:	443b      	add	r3, r7
 8005712:	9309      	str	r3, [sp, #36]	@ 0x24
 8005714:	e76a      	b.n	80055ec <_vfiprintf_r+0x78>
 8005716:	fb0c 3202 	mla	r2, ip, r2, r3
 800571a:	460c      	mov	r4, r1
 800571c:	2001      	movs	r0, #1
 800571e:	e7a8      	b.n	8005672 <_vfiprintf_r+0xfe>
 8005720:	2300      	movs	r3, #0
 8005722:	3401      	adds	r4, #1
 8005724:	9305      	str	r3, [sp, #20]
 8005726:	4619      	mov	r1, r3
 8005728:	f04f 0c0a 	mov.w	ip, #10
 800572c:	4620      	mov	r0, r4
 800572e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005732:	3a30      	subs	r2, #48	@ 0x30
 8005734:	2a09      	cmp	r2, #9
 8005736:	d903      	bls.n	8005740 <_vfiprintf_r+0x1cc>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0c6      	beq.n	80056ca <_vfiprintf_r+0x156>
 800573c:	9105      	str	r1, [sp, #20]
 800573e:	e7c4      	b.n	80056ca <_vfiprintf_r+0x156>
 8005740:	fb0c 2101 	mla	r1, ip, r1, r2
 8005744:	4604      	mov	r4, r0
 8005746:	2301      	movs	r3, #1
 8005748:	e7f0      	b.n	800572c <_vfiprintf_r+0x1b8>
 800574a:	ab03      	add	r3, sp, #12
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	462a      	mov	r2, r5
 8005750:	4b12      	ldr	r3, [pc, #72]	@ (800579c <_vfiprintf_r+0x228>)
 8005752:	a904      	add	r1, sp, #16
 8005754:	4630      	mov	r0, r6
 8005756:	f3af 8000 	nop.w
 800575a:	4607      	mov	r7, r0
 800575c:	1c78      	adds	r0, r7, #1
 800575e:	d1d6      	bne.n	800570e <_vfiprintf_r+0x19a>
 8005760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005762:	07d9      	lsls	r1, r3, #31
 8005764:	d405      	bmi.n	8005772 <_vfiprintf_r+0x1fe>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	059a      	lsls	r2, r3, #22
 800576a:	d402      	bmi.n	8005772 <_vfiprintf_r+0x1fe>
 800576c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800576e:	f7ff fc57 	bl	8005020 <__retarget_lock_release_recursive>
 8005772:	89ab      	ldrh	r3, [r5, #12]
 8005774:	065b      	lsls	r3, r3, #25
 8005776:	f53f af1f 	bmi.w	80055b8 <_vfiprintf_r+0x44>
 800577a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800577c:	e71e      	b.n	80055bc <_vfiprintf_r+0x48>
 800577e:	ab03      	add	r3, sp, #12
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	462a      	mov	r2, r5
 8005784:	4b05      	ldr	r3, [pc, #20]	@ (800579c <_vfiprintf_r+0x228>)
 8005786:	a904      	add	r1, sp, #16
 8005788:	4630      	mov	r0, r6
 800578a:	f000 f879 	bl	8005880 <_printf_i>
 800578e:	e7e4      	b.n	800575a <_vfiprintf_r+0x1e6>
 8005790:	08005e7b 	.word	0x08005e7b
 8005794:	08005e85 	.word	0x08005e85
 8005798:	00000000 	.word	0x00000000
 800579c:	0800554f 	.word	0x0800554f
 80057a0:	08005e81 	.word	0x08005e81

080057a4 <_printf_common>:
 80057a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	4616      	mov	r6, r2
 80057aa:	4698      	mov	r8, r3
 80057ac:	688a      	ldr	r2, [r1, #8]
 80057ae:	690b      	ldr	r3, [r1, #16]
 80057b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	bfb8      	it	lt
 80057b8:	4613      	movlt	r3, r2
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057c0:	4607      	mov	r7, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	b10a      	cbz	r2, 80057ca <_printf_common+0x26>
 80057c6:	3301      	adds	r3, #1
 80057c8:	6033      	str	r3, [r6, #0]
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	0699      	lsls	r1, r3, #26
 80057ce:	bf42      	ittt	mi
 80057d0:	6833      	ldrmi	r3, [r6, #0]
 80057d2:	3302      	addmi	r3, #2
 80057d4:	6033      	strmi	r3, [r6, #0]
 80057d6:	6825      	ldr	r5, [r4, #0]
 80057d8:	f015 0506 	ands.w	r5, r5, #6
 80057dc:	d106      	bne.n	80057ec <_printf_common+0x48>
 80057de:	f104 0a19 	add.w	sl, r4, #25
 80057e2:	68e3      	ldr	r3, [r4, #12]
 80057e4:	6832      	ldr	r2, [r6, #0]
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	42ab      	cmp	r3, r5
 80057ea:	dc26      	bgt.n	800583a <_printf_common+0x96>
 80057ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	3b00      	subs	r3, #0
 80057f4:	bf18      	it	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	0692      	lsls	r2, r2, #26
 80057fa:	d42b      	bmi.n	8005854 <_printf_common+0xb0>
 80057fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005800:	4641      	mov	r1, r8
 8005802:	4638      	mov	r0, r7
 8005804:	47c8      	blx	r9
 8005806:	3001      	adds	r0, #1
 8005808:	d01e      	beq.n	8005848 <_printf_common+0xa4>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	6922      	ldr	r2, [r4, #16]
 800580e:	f003 0306 	and.w	r3, r3, #6
 8005812:	2b04      	cmp	r3, #4
 8005814:	bf02      	ittt	eq
 8005816:	68e5      	ldreq	r5, [r4, #12]
 8005818:	6833      	ldreq	r3, [r6, #0]
 800581a:	1aed      	subeq	r5, r5, r3
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	bf0c      	ite	eq
 8005820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005824:	2500      	movne	r5, #0
 8005826:	4293      	cmp	r3, r2
 8005828:	bfc4      	itt	gt
 800582a:	1a9b      	subgt	r3, r3, r2
 800582c:	18ed      	addgt	r5, r5, r3
 800582e:	2600      	movs	r6, #0
 8005830:	341a      	adds	r4, #26
 8005832:	42b5      	cmp	r5, r6
 8005834:	d11a      	bne.n	800586c <_printf_common+0xc8>
 8005836:	2000      	movs	r0, #0
 8005838:	e008      	b.n	800584c <_printf_common+0xa8>
 800583a:	2301      	movs	r3, #1
 800583c:	4652      	mov	r2, sl
 800583e:	4641      	mov	r1, r8
 8005840:	4638      	mov	r0, r7
 8005842:	47c8      	blx	r9
 8005844:	3001      	adds	r0, #1
 8005846:	d103      	bne.n	8005850 <_printf_common+0xac>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	3501      	adds	r5, #1
 8005852:	e7c6      	b.n	80057e2 <_printf_common+0x3e>
 8005854:	18e1      	adds	r1, r4, r3
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	2030      	movs	r0, #48	@ 0x30
 800585a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800585e:	4422      	add	r2, r4
 8005860:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005864:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005868:	3302      	adds	r3, #2
 800586a:	e7c7      	b.n	80057fc <_printf_common+0x58>
 800586c:	2301      	movs	r3, #1
 800586e:	4622      	mov	r2, r4
 8005870:	4641      	mov	r1, r8
 8005872:	4638      	mov	r0, r7
 8005874:	47c8      	blx	r9
 8005876:	3001      	adds	r0, #1
 8005878:	d0e6      	beq.n	8005848 <_printf_common+0xa4>
 800587a:	3601      	adds	r6, #1
 800587c:	e7d9      	b.n	8005832 <_printf_common+0x8e>
	...

08005880 <_printf_i>:
 8005880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005884:	7e0f      	ldrb	r7, [r1, #24]
 8005886:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005888:	2f78      	cmp	r7, #120	@ 0x78
 800588a:	4691      	mov	r9, r2
 800588c:	4680      	mov	r8, r0
 800588e:	460c      	mov	r4, r1
 8005890:	469a      	mov	sl, r3
 8005892:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005896:	d807      	bhi.n	80058a8 <_printf_i+0x28>
 8005898:	2f62      	cmp	r7, #98	@ 0x62
 800589a:	d80a      	bhi.n	80058b2 <_printf_i+0x32>
 800589c:	2f00      	cmp	r7, #0
 800589e:	f000 80d2 	beq.w	8005a46 <_printf_i+0x1c6>
 80058a2:	2f58      	cmp	r7, #88	@ 0x58
 80058a4:	f000 80b9 	beq.w	8005a1a <_printf_i+0x19a>
 80058a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058b0:	e03a      	b.n	8005928 <_printf_i+0xa8>
 80058b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058b6:	2b15      	cmp	r3, #21
 80058b8:	d8f6      	bhi.n	80058a8 <_printf_i+0x28>
 80058ba:	a101      	add	r1, pc, #4	@ (adr r1, 80058c0 <_printf_i+0x40>)
 80058bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058c0:	08005919 	.word	0x08005919
 80058c4:	0800592d 	.word	0x0800592d
 80058c8:	080058a9 	.word	0x080058a9
 80058cc:	080058a9 	.word	0x080058a9
 80058d0:	080058a9 	.word	0x080058a9
 80058d4:	080058a9 	.word	0x080058a9
 80058d8:	0800592d 	.word	0x0800592d
 80058dc:	080058a9 	.word	0x080058a9
 80058e0:	080058a9 	.word	0x080058a9
 80058e4:	080058a9 	.word	0x080058a9
 80058e8:	080058a9 	.word	0x080058a9
 80058ec:	08005a2d 	.word	0x08005a2d
 80058f0:	08005957 	.word	0x08005957
 80058f4:	080059e7 	.word	0x080059e7
 80058f8:	080058a9 	.word	0x080058a9
 80058fc:	080058a9 	.word	0x080058a9
 8005900:	08005a4f 	.word	0x08005a4f
 8005904:	080058a9 	.word	0x080058a9
 8005908:	08005957 	.word	0x08005957
 800590c:	080058a9 	.word	0x080058a9
 8005910:	080058a9 	.word	0x080058a9
 8005914:	080059ef 	.word	0x080059ef
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	1d1a      	adds	r2, r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6032      	str	r2, [r6, #0]
 8005920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005924:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005928:	2301      	movs	r3, #1
 800592a:	e09d      	b.n	8005a68 <_printf_i+0x1e8>
 800592c:	6833      	ldr	r3, [r6, #0]
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	1d19      	adds	r1, r3, #4
 8005932:	6031      	str	r1, [r6, #0]
 8005934:	0606      	lsls	r6, r0, #24
 8005936:	d501      	bpl.n	800593c <_printf_i+0xbc>
 8005938:	681d      	ldr	r5, [r3, #0]
 800593a:	e003      	b.n	8005944 <_printf_i+0xc4>
 800593c:	0645      	lsls	r5, r0, #25
 800593e:	d5fb      	bpl.n	8005938 <_printf_i+0xb8>
 8005940:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005944:	2d00      	cmp	r5, #0
 8005946:	da03      	bge.n	8005950 <_printf_i+0xd0>
 8005948:	232d      	movs	r3, #45	@ 0x2d
 800594a:	426d      	negs	r5, r5
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005950:	4859      	ldr	r0, [pc, #356]	@ (8005ab8 <_printf_i+0x238>)
 8005952:	230a      	movs	r3, #10
 8005954:	e011      	b.n	800597a <_printf_i+0xfa>
 8005956:	6821      	ldr	r1, [r4, #0]
 8005958:	6833      	ldr	r3, [r6, #0]
 800595a:	0608      	lsls	r0, r1, #24
 800595c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005960:	d402      	bmi.n	8005968 <_printf_i+0xe8>
 8005962:	0649      	lsls	r1, r1, #25
 8005964:	bf48      	it	mi
 8005966:	b2ad      	uxthmi	r5, r5
 8005968:	2f6f      	cmp	r7, #111	@ 0x6f
 800596a:	4853      	ldr	r0, [pc, #332]	@ (8005ab8 <_printf_i+0x238>)
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	bf14      	ite	ne
 8005970:	230a      	movne	r3, #10
 8005972:	2308      	moveq	r3, #8
 8005974:	2100      	movs	r1, #0
 8005976:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800597a:	6866      	ldr	r6, [r4, #4]
 800597c:	60a6      	str	r6, [r4, #8]
 800597e:	2e00      	cmp	r6, #0
 8005980:	bfa2      	ittt	ge
 8005982:	6821      	ldrge	r1, [r4, #0]
 8005984:	f021 0104 	bicge.w	r1, r1, #4
 8005988:	6021      	strge	r1, [r4, #0]
 800598a:	b90d      	cbnz	r5, 8005990 <_printf_i+0x110>
 800598c:	2e00      	cmp	r6, #0
 800598e:	d04b      	beq.n	8005a28 <_printf_i+0x1a8>
 8005990:	4616      	mov	r6, r2
 8005992:	fbb5 f1f3 	udiv	r1, r5, r3
 8005996:	fb03 5711 	mls	r7, r3, r1, r5
 800599a:	5dc7      	ldrb	r7, [r0, r7]
 800599c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059a0:	462f      	mov	r7, r5
 80059a2:	42bb      	cmp	r3, r7
 80059a4:	460d      	mov	r5, r1
 80059a6:	d9f4      	bls.n	8005992 <_printf_i+0x112>
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d10b      	bne.n	80059c4 <_printf_i+0x144>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	07df      	lsls	r7, r3, #31
 80059b0:	d508      	bpl.n	80059c4 <_printf_i+0x144>
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	6861      	ldr	r1, [r4, #4]
 80059b6:	4299      	cmp	r1, r3
 80059b8:	bfde      	ittt	le
 80059ba:	2330      	movle	r3, #48	@ 0x30
 80059bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80059c4:	1b92      	subs	r2, r2, r6
 80059c6:	6122      	str	r2, [r4, #16]
 80059c8:	f8cd a000 	str.w	sl, [sp]
 80059cc:	464b      	mov	r3, r9
 80059ce:	aa03      	add	r2, sp, #12
 80059d0:	4621      	mov	r1, r4
 80059d2:	4640      	mov	r0, r8
 80059d4:	f7ff fee6 	bl	80057a4 <_printf_common>
 80059d8:	3001      	adds	r0, #1
 80059da:	d14a      	bne.n	8005a72 <_printf_i+0x1f2>
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059e0:	b004      	add	sp, #16
 80059e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	f043 0320 	orr.w	r3, r3, #32
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	4833      	ldr	r0, [pc, #204]	@ (8005abc <_printf_i+0x23c>)
 80059f0:	2778      	movs	r7, #120	@ 0x78
 80059f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	6831      	ldr	r1, [r6, #0]
 80059fa:	061f      	lsls	r7, r3, #24
 80059fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a00:	d402      	bmi.n	8005a08 <_printf_i+0x188>
 8005a02:	065f      	lsls	r7, r3, #25
 8005a04:	bf48      	it	mi
 8005a06:	b2ad      	uxthmi	r5, r5
 8005a08:	6031      	str	r1, [r6, #0]
 8005a0a:	07d9      	lsls	r1, r3, #31
 8005a0c:	bf44      	itt	mi
 8005a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a12:	6023      	strmi	r3, [r4, #0]
 8005a14:	b11d      	cbz	r5, 8005a1e <_printf_i+0x19e>
 8005a16:	2310      	movs	r3, #16
 8005a18:	e7ac      	b.n	8005974 <_printf_i+0xf4>
 8005a1a:	4827      	ldr	r0, [pc, #156]	@ (8005ab8 <_printf_i+0x238>)
 8005a1c:	e7e9      	b.n	80059f2 <_printf_i+0x172>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	f023 0320 	bic.w	r3, r3, #32
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	e7f6      	b.n	8005a16 <_printf_i+0x196>
 8005a28:	4616      	mov	r6, r2
 8005a2a:	e7bd      	b.n	80059a8 <_printf_i+0x128>
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	6825      	ldr	r5, [r4, #0]
 8005a30:	6961      	ldr	r1, [r4, #20]
 8005a32:	1d18      	adds	r0, r3, #4
 8005a34:	6030      	str	r0, [r6, #0]
 8005a36:	062e      	lsls	r6, r5, #24
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	d501      	bpl.n	8005a40 <_printf_i+0x1c0>
 8005a3c:	6019      	str	r1, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <_printf_i+0x1c6>
 8005a40:	0668      	lsls	r0, r5, #25
 8005a42:	d5fb      	bpl.n	8005a3c <_printf_i+0x1bc>
 8005a44:	8019      	strh	r1, [r3, #0]
 8005a46:	2300      	movs	r3, #0
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	4616      	mov	r6, r2
 8005a4c:	e7bc      	b.n	80059c8 <_printf_i+0x148>
 8005a4e:	6833      	ldr	r3, [r6, #0]
 8005a50:	1d1a      	adds	r2, r3, #4
 8005a52:	6032      	str	r2, [r6, #0]
 8005a54:	681e      	ldr	r6, [r3, #0]
 8005a56:	6862      	ldr	r2, [r4, #4]
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7fa fbe0 	bl	8000220 <memchr>
 8005a60:	b108      	cbz	r0, 8005a66 <_printf_i+0x1e6>
 8005a62:	1b80      	subs	r0, r0, r6
 8005a64:	6060      	str	r0, [r4, #4]
 8005a66:	6863      	ldr	r3, [r4, #4]
 8005a68:	6123      	str	r3, [r4, #16]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a70:	e7aa      	b.n	80059c8 <_printf_i+0x148>
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	4632      	mov	r2, r6
 8005a76:	4649      	mov	r1, r9
 8005a78:	4640      	mov	r0, r8
 8005a7a:	47d0      	blx	sl
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d0ad      	beq.n	80059dc <_printf_i+0x15c>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	079b      	lsls	r3, r3, #30
 8005a84:	d413      	bmi.n	8005aae <_printf_i+0x22e>
 8005a86:	68e0      	ldr	r0, [r4, #12]
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	4298      	cmp	r0, r3
 8005a8c:	bfb8      	it	lt
 8005a8e:	4618      	movlt	r0, r3
 8005a90:	e7a6      	b.n	80059e0 <_printf_i+0x160>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4632      	mov	r2, r6
 8005a96:	4649      	mov	r1, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	47d0      	blx	sl
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d09d      	beq.n	80059dc <_printf_i+0x15c>
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	68e3      	ldr	r3, [r4, #12]
 8005aa4:	9903      	ldr	r1, [sp, #12]
 8005aa6:	1a5b      	subs	r3, r3, r1
 8005aa8:	42ab      	cmp	r3, r5
 8005aaa:	dcf2      	bgt.n	8005a92 <_printf_i+0x212>
 8005aac:	e7eb      	b.n	8005a86 <_printf_i+0x206>
 8005aae:	2500      	movs	r5, #0
 8005ab0:	f104 0619 	add.w	r6, r4, #25
 8005ab4:	e7f5      	b.n	8005aa2 <_printf_i+0x222>
 8005ab6:	bf00      	nop
 8005ab8:	08005e8c 	.word	0x08005e8c
 8005abc:	08005e9d 	.word	0x08005e9d

08005ac0 <__swbuf_r>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	460e      	mov	r6, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	b118      	cbz	r0, 8005ad2 <__swbuf_r+0x12>
 8005aca:	6a03      	ldr	r3, [r0, #32]
 8005acc:	b90b      	cbnz	r3, 8005ad2 <__swbuf_r+0x12>
 8005ace:	f7ff fa3d 	bl	8004f4c <__sinit>
 8005ad2:	69a3      	ldr	r3, [r4, #24]
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	071a      	lsls	r2, r3, #28
 8005ada:	d501      	bpl.n	8005ae0 <__swbuf_r+0x20>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	b943      	cbnz	r3, 8005af2 <__swbuf_r+0x32>
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f82a 	bl	8005b3c <__swsetup_r>
 8005ae8:	b118      	cbz	r0, 8005af2 <__swbuf_r+0x32>
 8005aea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005aee:	4638      	mov	r0, r7
 8005af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	6922      	ldr	r2, [r4, #16]
 8005af6:	1a98      	subs	r0, r3, r2
 8005af8:	6963      	ldr	r3, [r4, #20]
 8005afa:	b2f6      	uxtb	r6, r6
 8005afc:	4283      	cmp	r3, r0
 8005afe:	4637      	mov	r7, r6
 8005b00:	dc05      	bgt.n	8005b0e <__swbuf_r+0x4e>
 8005b02:	4621      	mov	r1, r4
 8005b04:	4628      	mov	r0, r5
 8005b06:	f7ff fbd9 	bl	80052bc <_fflush_r>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d1ed      	bne.n	8005aea <__swbuf_r+0x2a>
 8005b0e:	68a3      	ldr	r3, [r4, #8]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	701e      	strb	r6, [r3, #0]
 8005b1c:	6962      	ldr	r2, [r4, #20]
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d004      	beq.n	8005b2e <__swbuf_r+0x6e>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	07db      	lsls	r3, r3, #31
 8005b28:	d5e1      	bpl.n	8005aee <__swbuf_r+0x2e>
 8005b2a:	2e0a      	cmp	r6, #10
 8005b2c:	d1df      	bne.n	8005aee <__swbuf_r+0x2e>
 8005b2e:	4621      	mov	r1, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7ff fbc3 	bl	80052bc <_fflush_r>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d0d9      	beq.n	8005aee <__swbuf_r+0x2e>
 8005b3a:	e7d6      	b.n	8005aea <__swbuf_r+0x2a>

08005b3c <__swsetup_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4b29      	ldr	r3, [pc, #164]	@ (8005be4 <__swsetup_r+0xa8>)
 8005b40:	4605      	mov	r5, r0
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	460c      	mov	r4, r1
 8005b46:	b118      	cbz	r0, 8005b50 <__swsetup_r+0x14>
 8005b48:	6a03      	ldr	r3, [r0, #32]
 8005b4a:	b90b      	cbnz	r3, 8005b50 <__swsetup_r+0x14>
 8005b4c:	f7ff f9fe 	bl	8004f4c <__sinit>
 8005b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b54:	0719      	lsls	r1, r3, #28
 8005b56:	d422      	bmi.n	8005b9e <__swsetup_r+0x62>
 8005b58:	06da      	lsls	r2, r3, #27
 8005b5a:	d407      	bmi.n	8005b6c <__swsetup_r+0x30>
 8005b5c:	2209      	movs	r2, #9
 8005b5e:	602a      	str	r2, [r5, #0]
 8005b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b6a:	e033      	b.n	8005bd4 <__swsetup_r+0x98>
 8005b6c:	0758      	lsls	r0, r3, #29
 8005b6e:	d512      	bpl.n	8005b96 <__swsetup_r+0x5a>
 8005b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b72:	b141      	cbz	r1, 8005b86 <__swsetup_r+0x4a>
 8005b74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <__swsetup_r+0x46>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f7ff fc85 	bl	800548c <_free_r>
 8005b82:	2300      	movs	r3, #0
 8005b84:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	b94b      	cbnz	r3, 8005bb6 <__swsetup_r+0x7a>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bac:	d003      	beq.n	8005bb6 <__swsetup_r+0x7a>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 f83f 	bl	8005c34 <__smakebuf_r>
 8005bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bba:	f013 0201 	ands.w	r2, r3, #1
 8005bbe:	d00a      	beq.n	8005bd6 <__swsetup_r+0x9a>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	60a2      	str	r2, [r4, #8]
 8005bc4:	6962      	ldr	r2, [r4, #20]
 8005bc6:	4252      	negs	r2, r2
 8005bc8:	61a2      	str	r2, [r4, #24]
 8005bca:	6922      	ldr	r2, [r4, #16]
 8005bcc:	b942      	cbnz	r2, 8005be0 <__swsetup_r+0xa4>
 8005bce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bd2:	d1c5      	bne.n	8005b60 <__swsetup_r+0x24>
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}
 8005bd6:	0799      	lsls	r1, r3, #30
 8005bd8:	bf58      	it	pl
 8005bda:	6962      	ldrpl	r2, [r4, #20]
 8005bdc:	60a2      	str	r2, [r4, #8]
 8005bde:	e7f4      	b.n	8005bca <__swsetup_r+0x8e>
 8005be0:	2000      	movs	r0, #0
 8005be2:	e7f7      	b.n	8005bd4 <__swsetup_r+0x98>
 8005be4:	20000018 	.word	0x20000018

08005be8 <__swhatbuf_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	b096      	sub	sp, #88	@ 0x58
 8005bf4:	4615      	mov	r5, r2
 8005bf6:	461e      	mov	r6, r3
 8005bf8:	da0d      	bge.n	8005c16 <__swhatbuf_r+0x2e>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2340      	movne	r3, #64	@ 0x40
 8005c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	6031      	str	r1, [r6, #0]
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	b016      	add	sp, #88	@ 0x58
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	466a      	mov	r2, sp
 8005c18:	f000 f848 	bl	8005cac <_fstat_r>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	dbec      	blt.n	8005bfa <__swhatbuf_r+0x12>
 8005c20:	9901      	ldr	r1, [sp, #4]
 8005c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c2a:	4259      	negs	r1, r3
 8005c2c:	4159      	adcs	r1, r3
 8005c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c32:	e7eb      	b.n	8005c0c <__swhatbuf_r+0x24>

08005c34 <__smakebuf_r>:
 8005c34:	898b      	ldrh	r3, [r1, #12]
 8005c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c38:	079d      	lsls	r5, r3, #30
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	d507      	bpl.n	8005c50 <__smakebuf_r+0x1c>
 8005c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	6163      	str	r3, [r4, #20]
 8005c4c:	b003      	add	sp, #12
 8005c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c50:	ab01      	add	r3, sp, #4
 8005c52:	466a      	mov	r2, sp
 8005c54:	f7ff ffc8 	bl	8005be8 <__swhatbuf_r>
 8005c58:	9f00      	ldr	r7, [sp, #0]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff fa28 	bl	80050b4 <_malloc_r>
 8005c64:	b948      	cbnz	r0, 8005c7a <__smakebuf_r+0x46>
 8005c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c6a:	059a      	lsls	r2, r3, #22
 8005c6c:	d4ee      	bmi.n	8005c4c <__smakebuf_r+0x18>
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	e7e2      	b.n	8005c40 <__smakebuf_r+0xc>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	6020      	str	r0, [r4, #0]
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c8a:	b15b      	cbz	r3, 8005ca4 <__smakebuf_r+0x70>
 8005c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 f81d 	bl	8005cd0 <_isatty_r>
 8005c96:	b128      	cbz	r0, 8005ca4 <__smakebuf_r+0x70>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	431d      	orrs	r5, r3
 8005ca8:	81a5      	strh	r5, [r4, #12]
 8005caa:	e7cf      	b.n	8005c4c <__smakebuf_r+0x18>

08005cac <_fstat_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	@ (8005ccc <_fstat_r+0x20>)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	f7fb f92f 	bl	8000f1c <_fstat>
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	d102      	bne.n	8005cc8 <_fstat_r+0x1c>
 8005cc2:	682b      	ldr	r3, [r5, #0]
 8005cc4:	b103      	cbz	r3, 8005cc8 <_fstat_r+0x1c>
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	bd38      	pop	{r3, r4, r5, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000348 	.word	0x20000348

08005cd0 <_isatty_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d06      	ldr	r5, [pc, #24]	@ (8005cec <_isatty_r+0x1c>)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	4608      	mov	r0, r1
 8005cda:	602b      	str	r3, [r5, #0]
 8005cdc:	f7fb f92e 	bl	8000f3c <_isatty>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d102      	bne.n	8005cea <_isatty_r+0x1a>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	b103      	cbz	r3, 8005cea <_isatty_r+0x1a>
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	20000348 	.word	0x20000348

08005cf0 <_raise_r>:
 8005cf0:	291f      	cmp	r1, #31
 8005cf2:	b538      	push	{r3, r4, r5, lr}
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	d904      	bls.n	8005d04 <_raise_r+0x14>
 8005cfa:	2316      	movs	r3, #22
 8005cfc:	6003      	str	r3, [r0, #0]
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005d06:	b112      	cbz	r2, 8005d0e <_raise_r+0x1e>
 8005d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d0c:	b94b      	cbnz	r3, 8005d22 <_raise_r+0x32>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 f830 	bl	8005d74 <_getpid_r>
 8005d14:	4622      	mov	r2, r4
 8005d16:	4601      	mov	r1, r0
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d1e:	f000 b817 	b.w	8005d50 <_kill_r>
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d00a      	beq.n	8005d3c <_raise_r+0x4c>
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	d103      	bne.n	8005d32 <_raise_r+0x42>
 8005d2a:	2316      	movs	r3, #22
 8005d2c:	6003      	str	r3, [r0, #0]
 8005d2e:	2001      	movs	r0, #1
 8005d30:	e7e7      	b.n	8005d02 <_raise_r+0x12>
 8005d32:	2100      	movs	r1, #0
 8005d34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4798      	blx	r3
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e7e0      	b.n	8005d02 <_raise_r+0x12>

08005d40 <raise>:
 8005d40:	4b02      	ldr	r3, [pc, #8]	@ (8005d4c <raise+0xc>)
 8005d42:	4601      	mov	r1, r0
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	f7ff bfd3 	b.w	8005cf0 <_raise_r>
 8005d4a:	bf00      	nop
 8005d4c:	20000018 	.word	0x20000018

08005d50 <_kill_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d07      	ldr	r5, [pc, #28]	@ (8005d70 <_kill_r+0x20>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	f7fb f87d 	bl	8000e5c <_kill>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d102      	bne.n	8005d6c <_kill_r+0x1c>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	b103      	cbz	r3, 8005d6c <_kill_r+0x1c>
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000348 	.word	0x20000348

08005d74 <_getpid_r>:
 8005d74:	f7fb b86a 	b.w	8000e4c <_getpid>

08005d78 <_init>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr

08005d84 <_fini>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr
