
Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007be0  08007be0  00008be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d08  08007d08  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007d10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000068  08007d78  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08007d78  000093c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189c5  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e55  00000000  00000000  00021a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000248b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b0  00000000  00000000  00025f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280c8  00000000  00000000  000270e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5cb  00000000  00000000  0004f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102970  00000000  00000000  0006977b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c0eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069fc  00000000  00000000  0016c130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00172b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007bc8 	.word	0x08007bc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007bc8 	.word	0x08007bc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 ffc3 	bl	800153e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f828 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f98a 	bl	80008d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c0:	f000 f8b0 	bl	8000724 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005c4:	f000 f8f8 	bl	80007b8 <MX_SPI3_Init>
  MX_I2C1_Init();
 80005c8:	f000 f86c 	bl	80006a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80005cc:	f000 f932 	bl	8000834 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005d0:	480b      	ldr	r0, [pc, #44]	@ (8000600 <main+0x50>)
 80005d2:	f004 ff79 	bl	80054c8 <HAL_TIM_Base_Start_IT>
  light = 0b11111111;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <main+0x54>)
 80005d8:	22ff      	movs	r2, #255	@ 0xff
 80005da:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_read_Write_IO();
 80005dc:	f000 fa0a 	bl	80009f4 <SPITxRx_read_Write_IO>
	  Convert_HC_35_2_Number();
 80005e0:	f000 fa94 	bl	8000b0c <Convert_HC_35_2_Number>
	  random_std();
 80005e4:	f000 fb62 	bl	8000cac <random_std>
	  Game();
 80005e8:	f000 faca 	bl	8000b80 <Game>
	  EEPROMWrite();
 80005ec:	f000 fc5a 	bl	8000ea4 <EEPROMWrite>
	  EEPROMRead(ReadBomb, 1);
 80005f0:	2101      	movs	r1, #1
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x58>)
 80005f4:	f000 fc7a 	bl	8000eec <EEPROMRead>
	  Checkbomb();
 80005f8:	f000 fc9e 	bl	8000f38 <Checkbomb>
  {
 80005fc:	bf00      	nop
 80005fe:	e7ed      	b.n	80005dc <main+0x2c>
 8000600:	200001d0 	.word	0x200001d0
 8000604:	20000260 	.word	0x20000260
 8000608:	2000026c 	.word	0x2000026c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2238      	movs	r2, #56	@ 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f006 fbf4 	bl	8006e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800062e:	2000      	movs	r0, #0
 8000630:	f003 f99a 	bl	8003968 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2340      	movs	r3, #64	@ 0x40
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800064e:	2355      	movs	r3, #85	@ 0x55
 8000650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fa34 	bl	8003ad0 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800066e:	f000 fca7 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fd32 	bl	80040f4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000696:	f000 fc93 	bl	8000fc0 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006aa:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <MX_I2C1_Init+0x78>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <MX_I2C1_Init+0x7c>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006de:	480e      	ldr	r0, [pc, #56]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006e0:	f001 fb0e 	bl	8001d00 <HAL_I2C_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ea:	f000 fc69 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <MX_I2C1_Init+0x74>)
 80006f2:	f003 f8a1 	bl	8003838 <HAL_I2CEx_ConfigAnalogFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 fc60 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_I2C1_Init+0x74>)
 8000704:	f003 f8e3 	bl	80038ce <HAL_I2CEx_ConfigDigitalFilter>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800070e:	f000 fc57 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084
 800071c:	40005400 	.word	0x40005400
 8000720:	30a0a7fb 	.word	0x30a0a7fb

08000724 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <MX_LPUART1_UART_Init+0x90>)
 800072c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000766:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000768:	f005 fbe0 	bl	8005f2c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 fc25 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800077a:	f006 f97b 	bl	8006a74 <HAL_UARTEx_SetTxFifoThreshold>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000784:	f000 fc1c 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800078c:	f006 f9b0 	bl	8006af0 <HAL_UARTEx_SetRxFifoThreshold>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000796:	f000 fc13 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f006 f931 	bl	8006a02 <HAL_UARTEx_DisableFifoMode>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007a6:	f000 fc0b 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	40008000 	.word	0x40008000

080007b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_SPI3_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <MX_SPI3_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_SPI3_Init+0x74>)
 80007c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <MX_SPI3_Init+0x74>)
 80007d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_SPI3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_SPI3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_SPI3_Init+0x74>)
 80007e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_SPI3_Init+0x74>)
 80007ee:	2238      	movs	r2, #56	@ 0x38
 80007f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_SPI3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_SPI3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_SPI3_Init+0x74>)
 8000806:	2207      	movs	r2, #7
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_SPI3_Init+0x74>)
 8000812:	2208      	movs	r2, #8
 8000814:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_SPI3_Init+0x74>)
 8000818:	f004 f8d6 	bl	80049c8 <HAL_SPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 fbcd 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000016c 	.word	0x2000016c
 8000830:	40003c00 	.word	0x40003c00

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000854:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <MX_TIM3_Init+0x9c>)
 8000856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_TIM3_Init+0x98>)
 800085a:	f244 2267 	movw	r2, #16999	@ 0x4267
 800085e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000868:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800086c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <MX_TIM3_Init+0x98>)
 800087c:	f004 fdcc 	bl	8005418 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000886:	f000 fb9b 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <MX_TIM3_Init+0x98>)
 8000898:	f004 ffde 	bl	8005858 <HAL_TIM_ConfigClockSource>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008a2:	f000 fb8d 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <MX_TIM3_Init+0x98>)
 80008b4:	f005 fa5e 	bl	8005d74 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 fb7f 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200001d0 	.word	0x200001d0
 80008d0:	40000400 	.word	0x40000400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b3f      	ldr	r3, [pc, #252]	@ (80009e8 <MX_GPIO_Init+0x114>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a3e      	ldr	r2, [pc, #248]	@ (80009e8 <MX_GPIO_Init+0x114>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x114>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b39      	ldr	r3, [pc, #228]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a38      	ldr	r2, [pc, #224]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4a32      	ldr	r2, [pc, #200]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4b30      	ldr	r3, [pc, #192]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a2c      	ldr	r2, [pc, #176]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b2a      	ldr	r3, [pc, #168]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b27      	ldr	r3, [pc, #156]	@ (80009e8 <MX_GPIO_Init+0x114>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a26      	ldr	r2, [pc, #152]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <MX_GPIO_Init+0x114>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f001 f999 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2104      	movs	r1, #4
 8000972:	481e      	ldr	r0, [pc, #120]	@ (80009ec <MX_GPIO_Init+0x118>)
 8000974:	f001 f994 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <MX_GPIO_Init+0x11c>)
 8000990:	f000 ffec 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000994:	2320      	movs	r3, #32
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f000 ffdd 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b2:	2304      	movs	r3, #4
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_GPIO_Init+0x118>)
 80009ca:	f000 ffcf 	bl	800196c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2028      	movs	r0, #40	@ 0x28
 80009d4:	f000 ff21 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d8:	2028      	movs	r0, #40	@ 0x28
 80009da:	f000 ff38 	bl	800184e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	@ 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	48000800 	.word	0x48000800

080009f4 <SPITxRx_read_Write_IO>:
	SPI_TX[2] = 0b00000000;
	HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
}

void SPITxRx_read_Write_IO()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80009f8:	2104      	movs	r1, #4
 80009fa:	481c      	ldr	r0, [pc, #112]	@ (8000a6c <SPITxRx_read_Write_IO+0x78>)
 80009fc:	f001 f938 	bl	8001c70 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d030      	beq.n	8000a68 <SPITxRx_read_Write_IO+0x74>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a06:	2200      	movs	r2, #0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <SPITxRx_read_Write_IO+0x78>)
 8000a0c:	f001 f948 	bl	8001ca0 <HAL_GPIO_WritePin>
        SPI_TX[0] = 0b01000001;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a12:	2241      	movs	r2, #65	@ 0x41
 8000a14:	701a      	strb	r2, [r3, #0]
        SPI_TX[1] = 0x12;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a18:	2212      	movs	r2, #18
 8000a1a:	705a      	strb	r2, [r3, #1]
        SPI_TX[2] = 0x00;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	709a      	strb	r2, [r3, #2]
        HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, Rx_Button, 3);
 8000a22:	2303      	movs	r3, #3
 8000a24:	4a13      	ldr	r2, [pc, #76]	@ (8000a74 <SPITxRx_read_Write_IO+0x80>)
 8000a26:	4912      	ldr	r1, [pc, #72]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a28:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <SPITxRx_read_Write_IO+0x84>)
 8000a2a:	f004 f879 	bl	8004b20 <HAL_SPI_TransmitReceive_IT>
        Convert_HC_35_2_Number();
 8000a2e:	f000 f86d 	bl	8000b0c <Convert_HC_35_2_Number>
        SET_LIGHT_B();
 8000a32:	f000 f827 	bl	8000a84 <SET_LIGHT_B>

        HAL_Delay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fdf2 	bl	8001620 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2104      	movs	r1, #4
 8000a40:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <SPITxRx_read_Write_IO+0x78>)
 8000a42:	f001 f92d 	bl	8001ca0 <HAL_GPIO_WritePin>
        SPI_TX[0] = 0b01000000;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a48:	2240      	movs	r2, #64	@ 0x40
 8000a4a:	701a      	strb	r2, [r3, #0]
        SPI_TX[1] = 0x01;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	705a      	strb	r2, [r3, #1]
        SPI_TX[2] = light;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <SPITxRx_read_Write_IO+0x88>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a5a:	709a      	strb	r2, [r3, #2]
        HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <SPITxRx_read_Write_IO+0x8c>)
 8000a60:	4903      	ldr	r1, [pc, #12]	@ (8000a70 <SPITxRx_read_Write_IO+0x7c>)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <SPITxRx_read_Write_IO+0x84>)
 8000a64:	f004 f85c 	bl	8004b20 <HAL_SPI_TransmitReceive_IT>

    }
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	48000c00 	.word	0x48000c00
 8000a70:	2000021c 	.word	0x2000021c
 8000a74:	2000024c 	.word	0x2000024c
 8000a78:	2000016c 	.word	0x2000016c
 8000a7c:	20000260 	.word	0x20000260
 8000a80:	20000228 	.word	0x20000228

08000a84 <SET_LIGHT_B>:

void SET_LIGHT_B()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	if(control_rand == 0)
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <SET_LIGHT_B+0x70>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d127      	bne.n	8000ae0 <SET_LIGHT_B+0x5c>
	{
		if (Reward == 1 && Press >= 2)
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <SET_LIGHT_B+0x74>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <SET_LIGHT_B+0x22>
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <SET_LIGHT_B+0x78>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d902      	bls.n	8000aa6 <SET_LIGHT_B+0x22>
			{
				Blink();
 8000aa0:	f000 f972 	bl	8000d88 <Blink>
			{
 8000aa4:	e023      	b.n	8000aee <SET_LIGHT_B+0x6a>
			}
			else if (Reward == 2 && Press >= 2)
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <SET_LIGHT_B+0x74>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d106      	bne.n	8000abc <SET_LIGHT_B+0x38>
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <SET_LIGHT_B+0x78>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d902      	bls.n	8000abc <SET_LIGHT_B+0x38>
			{
				Looping();
 8000ab6:	f000 f989 	bl	8000dcc <Looping>
			{
 8000aba:	e018      	b.n	8000aee <SET_LIGHT_B+0x6a>
			}
			else if(ReadBomb[0] != 0 && Press <= 1)
 8000abc:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <SET_LIGHT_B+0x7c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <SET_LIGHT_B+0x54>
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <SET_LIGHT_B+0x78>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d805      	bhi.n	8000ad8 <SET_LIGHT_B+0x54>
			{
				DisplayBomb();
 8000acc:	f000 fa4e 	bl	8000f6c <DisplayBomb>
				test = 10;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <SET_LIGHT_B+0x80>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	801a      	strh	r2, [r3, #0]
			{
 8000ad6:	e00a      	b.n	8000aee <SET_LIGHT_B+0x6a>
			}
			else
			{
				light = 0b11111111;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <SET_LIGHT_B+0x84>)
 8000ada:	22ff      	movs	r2, #255	@ 0xff
 8000adc:	801a      	strh	r2, [r3, #0]
	{
		Rand_Light();
	}


}
 8000ade:	e006      	b.n	8000aee <SET_LIGHT_B+0x6a>
	else if (control_rand == 1)
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SET_LIGHT_B+0x70>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d102      	bne.n	8000aee <SET_LIGHT_B+0x6a>
		Rand_Light();
 8000ae8:	f000 f904 	bl	8000cf4 <Rand_Light>
}
 8000aec:	e7ff      	b.n	8000aee <SET_LIGHT_B+0x6a>
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000244 	.word	0x20000244
 8000af8:	20000248 	.word	0x20000248
 8000afc:	20000264 	.word	0x20000264
 8000b00:	2000026c 	.word	0x2000026c
 8000b04:	20000266 	.word	0x20000266
 8000b08:	20000260 	.word	0x20000260

08000b0c <Convert_HC_35_2_Number>:
void shipbit()
{
	T = Rx_Button[1] >> 4;
}
void Convert_HC_35_2_Number()
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	if (Rx_Button[1]== 14)
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <Convert_HC_35_2_Number+0x6c>)
 8000b12:	885b      	ldrh	r3, [r3, #2]
 8000b14:	2b0e      	cmp	r3, #14
 8000b16:	d107      	bne.n	8000b28 <Convert_HC_35_2_Number+0x1c>
		{
			Number = 1;
 8000b18:	4918      	ldr	r1, [pc, #96]	@ (8000b7c <Convert_HC_35_2_Number+0x70>)
 8000b1a:	f04f 0201 	mov.w	r2, #1
 8000b1e:	f04f 0300 	mov.w	r3, #0
 8000b22:	e9c1 2300 	strd	r2, r3, [r1]
	else if (Rx_Button[1]== 7)
		{
			Number = 4;
		}

}
 8000b26:	e022      	b.n	8000b6e <Convert_HC_35_2_Number+0x62>
	else if (Rx_Button[1]== 13)
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <Convert_HC_35_2_Number+0x6c>)
 8000b2a:	885b      	ldrh	r3, [r3, #2]
 8000b2c:	2b0d      	cmp	r3, #13
 8000b2e:	d107      	bne.n	8000b40 <Convert_HC_35_2_Number+0x34>
			Number = 2;
 8000b30:	4912      	ldr	r1, [pc, #72]	@ (8000b7c <Convert_HC_35_2_Number+0x70>)
 8000b32:	f04f 0202 	mov.w	r2, #2
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b3e:	e016      	b.n	8000b6e <Convert_HC_35_2_Number+0x62>
	else if (Rx_Button[1]== 11)
 8000b40:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <Convert_HC_35_2_Number+0x6c>)
 8000b42:	885b      	ldrh	r3, [r3, #2]
 8000b44:	2b0b      	cmp	r3, #11
 8000b46:	d107      	bne.n	8000b58 <Convert_HC_35_2_Number+0x4c>
			Number = 3;
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <Convert_HC_35_2_Number+0x70>)
 8000b4a:	f04f 0203 	mov.w	r2, #3
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b56:	e00a      	b.n	8000b6e <Convert_HC_35_2_Number+0x62>
	else if (Rx_Button[1]== 7)
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <Convert_HC_35_2_Number+0x6c>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d106      	bne.n	8000b6e <Convert_HC_35_2_Number+0x62>
			Number = 4;
 8000b60:	4906      	ldr	r1, [pc, #24]	@ (8000b7c <Convert_HC_35_2_Number+0x70>)
 8000b62:	f04f 0204 	mov.w	r2, #4
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	2000024c 	.word	0x2000024c
 8000b7c:	20000238 	.word	0x20000238

08000b80 <Game>:

void Game()
{
 8000b80:	b4b0      	push	{r4, r5, r7}
 8000b82:	af00      	add	r7, sp, #0
	if(Random == Number && Press >= 2)
 8000b84:	4c1b      	ldr	r4, [pc, #108]	@ (8000bf4 <Game+0x74>)
 8000b86:	6824      	ldr	r4, [r4, #0]
 8000b88:	2500      	movs	r5, #0
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	4629      	mov	r1, r5
 8000b8e:	4c1a      	ldr	r4, [pc, #104]	@ (8000bf8 <Game+0x78>)
 8000b90:	e9d4 4500 	ldrd	r4, r5, [r4]
 8000b94:	42a9      	cmp	r1, r5
 8000b96:	bf08      	it	eq
 8000b98:	42a0      	cmpeq	r0, r4
 8000b9a:	d10f      	bne.n	8000bbc <Game+0x3c>
 8000b9c:	4917      	ldr	r1, [pc, #92]	@ (8000bfc <Game+0x7c>)
 8000b9e:	8809      	ldrh	r1, [r1, #0]
 8000ba0:	2901      	cmp	r1, #1
 8000ba2:	d90b      	bls.n	8000bbc <Game+0x3c>
	{
		Reward = 1;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <Game+0x80>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	801a      	strh	r2, [r3, #0]
		data[0] = Random;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <Game+0x74>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <Game+0x84>)
 8000bb2:	701a      	strb	r2, [r3, #0]
		WriteFlag = 1;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <Game+0x88>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	}
	else if (Random != Number && Press >= 2 && Number != 0)
	{
		Reward = 2;
	}
}
 8000bba:	e017      	b.n	8000bec <Game+0x6c>
	else if (Random != Number && Press >= 2 && Number != 0)
 8000bbc:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <Game+0x74>)
 8000bbe:	6809      	ldr	r1, [r1, #0]
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	460a      	mov	r2, r1
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <Game+0x78>)
 8000bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	bf08      	it	eq
 8000bd0:	4282      	cmpeq	r2, r0
 8000bd2:	d00b      	beq.n	8000bec <Game+0x6c>
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <Game+0x7c>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d907      	bls.n	8000bec <Game+0x6c>
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <Game+0x78>)
 8000bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	d002      	beq.n	8000bec <Game+0x6c>
		Reward = 2;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <Game+0x80>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	801a      	strh	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bcb0      	pop	{r4, r5, r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000240 	.word	0x20000240
 8000bf8:	20000238 	.word	0x20000238
 8000bfc:	20000264 	.word	0x20000264
 8000c00:	20000248 	.word	0x20000248
 8000c04:	20000270 	.word	0x20000270
 8000c08:	20000268 	.word	0x20000268

08000c0c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	if(State==0)
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d103      	bne.n	8000c24 <HAL_SPI_TxRxCpltCallback+0x18>
	{
		State = 1;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	e006      	b.n	8000c32 <HAL_SPI_TxRxCpltCallback+0x26>
	}
	else if(State == 1)
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d102      	bne.n	8000c32 <HAL_SPI_TxRxCpltCallback+0x26>
	{
		State = 0;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2104      	movs	r1, #4
 8000c36:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000c38:	f001 f832 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000246 	.word	0x20000246
 8000c48:	48000c00 	.word	0x48000c00

08000c4c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_13)
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c5c:	d11c      	bne.n	8000c98 <HAL_GPIO_EXTI_Callback+0x4c>
		{
			if (control_rand == 1 && Press < 2)
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d107      	bne.n	8000c76 <HAL_GPIO_EXTI_Callback+0x2a>
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d803      	bhi.n	8000c76 <HAL_GPIO_EXTI_Callback+0x2a>
				{
					control_rand = 0;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e00a      	b.n	8000c8c <HAL_GPIO_EXTI_Callback+0x40>
				}
			else if (control_rand == 0 && Press < 2)
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d106      	bne.n	8000c8c <HAL_GPIO_EXTI_Callback+0x40>
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d802      	bhi.n	8000c8c <HAL_GPIO_EXTI_Callback+0x40>
				{
					control_rand = 1;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	801a      	strh	r2, [r3, #0]
				}
			Press += 1;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c96:	801a      	strh	r2, [r3, #0]
		}

	}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000244 	.word	0x20000244
 8000ca8:	20000264 	.word	0x20000264

08000cac <random_std>:

void random_std()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	if(control_rand == 1 )
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <random_std+0x3c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d114      	bne.n	8000ce2 <random_std+0x36>
	{
		Random = (rand() % 4)+1;
 8000cb8:	f005 ffa6 	bl	8006c08 <rand>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	425a      	negs	r2, r3
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	bf58      	it	pl
 8000cca:	4253      	negpl	r3, r2
 8000ccc:	3301      	adds	r3, #1
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <random_std+0x40>)
 8000cd2:	601a      	str	r2, [r3, #0]
		Number = 0;
 8000cd4:	4906      	ldr	r1, [pc, #24]	@ (8000cf0 <random_std+0x44>)
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000244 	.word	0x20000244
 8000cec:	20000240 	.word	0x20000240
 8000cf0:	20000238 	.word	0x20000238

08000cf4 <Rand_Light>:

void Rand_Light()
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
			if (LMode == 1)
 8000cf8:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <Rand_Light+0x8c>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d103      	bne.n	8000d08 <Rand_Light+0x14>
				{
				light = 0b11111110;
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <Rand_Light+0x90>)
 8000d02:	22fe      	movs	r2, #254	@ 0xfe
 8000d04:	801a      	strh	r2, [r3, #0]
				}
			else if (LMode == 8)
				{
				light = 0b01111111;
				}
}
 8000d06:	e036      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 2)
 8000d08:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <Rand_Light+0x8c>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d103      	bne.n	8000d18 <Rand_Light+0x24>
				light = 0b11111101;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <Rand_Light+0x90>)
 8000d12:	22fd      	movs	r2, #253	@ 0xfd
 8000d14:	801a      	strh	r2, [r3, #0]
}
 8000d16:	e02e      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 3)
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <Rand_Light+0x8c>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d103      	bne.n	8000d28 <Rand_Light+0x34>
				light = 0b11111011;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <Rand_Light+0x90>)
 8000d22:	22fb      	movs	r2, #251	@ 0xfb
 8000d24:	801a      	strh	r2, [r3, #0]
}
 8000d26:	e026      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 4)
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <Rand_Light+0x8c>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d103      	bne.n	8000d38 <Rand_Light+0x44>
				light = 0b11110111;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <Rand_Light+0x90>)
 8000d32:	22f7      	movs	r2, #247	@ 0xf7
 8000d34:	801a      	strh	r2, [r3, #0]
}
 8000d36:	e01e      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 5)
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <Rand_Light+0x8c>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d103      	bne.n	8000d48 <Rand_Light+0x54>
				light = 0b11101111;
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <Rand_Light+0x90>)
 8000d42:	22ef      	movs	r2, #239	@ 0xef
 8000d44:	801a      	strh	r2, [r3, #0]
}
 8000d46:	e016      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 6)
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <Rand_Light+0x8c>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	d103      	bne.n	8000d58 <Rand_Light+0x64>
				light = 0b11011111;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <Rand_Light+0x90>)
 8000d52:	22df      	movs	r2, #223	@ 0xdf
 8000d54:	801a      	strh	r2, [r3, #0]
}
 8000d56:	e00e      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 7)
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <Rand_Light+0x8c>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b07      	cmp	r3, #7
 8000d5e:	d103      	bne.n	8000d68 <Rand_Light+0x74>
				light = 0b10111111;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <Rand_Light+0x90>)
 8000d62:	22bf      	movs	r2, #191	@ 0xbf
 8000d64:	801a      	strh	r2, [r3, #0]
}
 8000d66:	e006      	b.n	8000d76 <Rand_Light+0x82>
			else if (LMode == 8)
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <Rand_Light+0x8c>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	2b08      	cmp	r3, #8
 8000d6e:	d102      	bne.n	8000d76 <Rand_Light+0x82>
				light = 0b01111111;
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <Rand_Light+0x90>)
 8000d72:	227f      	movs	r2, #127	@ 0x7f
 8000d74:	801a      	strh	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000262 	.word	0x20000262
 8000d84:	20000260 	.word	0x20000260

08000d88 <Blink>:

void Blink()
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	if (LMode>=1 && LMode <= 4)
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <Blink+0x3c>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d007      	beq.n	8000da4 <Blink+0x1c>
 8000d94:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <Blink+0x3c>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d803      	bhi.n	8000da4 <Blink+0x1c>
	{
		light = 0b11111111;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <Blink+0x40>)
 8000d9e:	22ff      	movs	r2, #255	@ 0xff
 8000da0:	801a      	strh	r2, [r3, #0]
	}
	else if (LMode>=5 && LMode <=8)
	{
		light = 0b00000000;
	}
}
 8000da2:	e00a      	b.n	8000dba <Blink+0x32>
	else if (LMode>=5 && LMode <=8)
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <Blink+0x3c>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d906      	bls.n	8000dba <Blink+0x32>
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <Blink+0x3c>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d802      	bhi.n	8000dba <Blink+0x32>
		light = 0b00000000;
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <Blink+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	801a      	strh	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000262 	.word	0x20000262
 8000dc8:	20000260 	.word	0x20000260

08000dcc <Looping>:

void Looping()
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	if (LMode == 1)
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <Looping+0x90>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d103      	bne.n	8000de0 <Looping+0x14>
	{
		light = 0b11110000;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <Looping+0x94>)
 8000dda:	22f0      	movs	r2, #240	@ 0xf0
 8000ddc:	801a      	strh	r2, [r3, #0]
	}
	else if (LMode == 8)
	{
		light = 0b11100001;
	}
}
 8000dde:	e038      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 2)
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <Looping+0x90>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d103      	bne.n	8000df0 <Looping+0x24>
		light = 0b11100001;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <Looping+0x94>)
 8000dea:	22e1      	movs	r2, #225	@ 0xe1
 8000dec:	801a      	strh	r2, [r3, #0]
}
 8000dee:	e030      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 3)
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <Looping+0x90>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d103      	bne.n	8000e00 <Looping+0x34>
		light = 0b1100011;
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <Looping+0x94>)
 8000dfa:	2263      	movs	r2, #99	@ 0x63
 8000dfc:	801a      	strh	r2, [r3, #0]
}
 8000dfe:	e028      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 4)
 8000e00:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <Looping+0x90>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d103      	bne.n	8000e10 <Looping+0x44>
		light = 0b10000111;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <Looping+0x94>)
 8000e0a:	2287      	movs	r2, #135	@ 0x87
 8000e0c:	801a      	strh	r2, [r3, #0]
}
 8000e0e:	e020      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 5)
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <Looping+0x90>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d103      	bne.n	8000e20 <Looping+0x54>
		light = 0b00001111;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <Looping+0x94>)
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	801a      	strh	r2, [r3, #0]
}
 8000e1e:	e018      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 6)
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <Looping+0x90>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d104      	bne.n	8000e32 <Looping+0x66>
		light = 0b100001111;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <Looping+0x94>)
 8000e2a:	f240 120f 	movw	r2, #271	@ 0x10f
 8000e2e:	801a      	strh	r2, [r3, #0]
}
 8000e30:	e00f      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 7)
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <Looping+0x90>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	d104      	bne.n	8000e44 <Looping+0x78>
		light = 0b110000111;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <Looping+0x94>)
 8000e3c:	f240 1287 	movw	r2, #391	@ 0x187
 8000e40:	801a      	strh	r2, [r3, #0]
}
 8000e42:	e006      	b.n	8000e52 <Looping+0x86>
	else if (LMode == 8)
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <Looping+0x90>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	d102      	bne.n	8000e52 <Looping+0x86>
		light = 0b11100001;
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <Looping+0x94>)
 8000e4e:	22e1      	movs	r2, #225	@ 0xe1
 8000e50:	801a      	strh	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	20000262 	.word	0x20000262
 8000e60:	20000260 	.word	0x20000260

08000e64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10c      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		LMode+=1;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e7e:	801a      	strh	r2, [r3, #0]
		if (LMode>8)
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d902      	bls.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			LMode = 1;
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200001d0 	.word	0x200001d0
 8000ea0:	20000262 	.word	0x20000262

08000ea4 <EEPROMWrite>:

void EEPROMWrite() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af02      	add	r7, sp, #8
if (WriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <EEPROMWrite+0x3c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d012      	beq.n	8000ed8 <EEPROMWrite+0x34>
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <EEPROMWrite+0x40>)
 8000eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b20      	cmp	r3, #32
 8000ebc:	d10c      	bne.n	8000ed8 <EEPROMWrite+0x34>
HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <EEPROMWrite+0x44>)
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	222c      	movs	r2, #44	@ 0x2c
 8000eca:	21a0      	movs	r1, #160	@ 0xa0
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <EEPROMWrite+0x40>)
 8000ece:	f000 ffb3 	bl	8001e38 <HAL_I2C_Mem_Write_IT>

data, 1);

WriteFlag = 0;
 8000ed2:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <EEPROMWrite+0x3c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
}
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000268 	.word	0x20000268
 8000ee4:	20000084 	.word	0x20000084
 8000ee8:	20000270 	.word	0x20000270

08000eec <EEPROMRead>:

void EEPROMRead(uint8_t *Rdata, uint16_t len) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
if (ReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <EEPROMRead+0x44>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d012      	beq.n	8000f26 <EEPROMRead+0x3a>
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <EEPROMRead+0x48>)
 8000f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b20      	cmp	r3, #32
 8000f0a:	d10c      	bne.n	8000f26 <EEPROMRead+0x3a>
HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2302      	movs	r3, #2
 8000f16:	222c      	movs	r2, #44	@ 0x2c
 8000f18:	21a0      	movs	r1, #160	@ 0xa0
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <EEPROMRead+0x48>)
 8000f1c:	f001 f816 	bl	8001f4c <HAL_I2C_Mem_Read_IT>

Rdata, len);
ReadFlag = 0;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <EEPROMRead+0x44>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
}
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000269 	.word	0x20000269
 8000f34:	20000084 	.word	0x20000084

08000f38 <Checkbomb>:

void Checkbomb()
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	if (Number == 1 && Press < 2)
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <Checkbomb+0x28>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	1e51      	subs	r1, r2, #1
 8000f44:	430b      	orrs	r3, r1
 8000f46:	d106      	bne.n	8000f56 <Checkbomb+0x1e>
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <Checkbomb+0x2c>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d802      	bhi.n	8000f56 <Checkbomb+0x1e>
	{
		ReadFlag = 1;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <Checkbomb+0x30>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
	}

}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	20000238 	.word	0x20000238
 8000f64:	20000264 	.word	0x20000264
 8000f68:	20000269 	.word	0x20000269

08000f6c <DisplayBomb>:

void DisplayBomb()
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	if(ReadBomb[0] == 1)
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <DisplayBomb+0x4c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d103      	bne.n	8000f80 <DisplayBomb+0x14>
	{
		light = 0b11111110;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <DisplayBomb+0x50>)
 8000f7a:	22fe      	movs	r2, #254	@ 0xfe
 8000f7c:	801a      	strh	r2, [r3, #0]
		}
	else if(ReadBomb[0] == 4)
		{
			light = 0b11110000;
		}
}
 8000f7e:	e016      	b.n	8000fae <DisplayBomb+0x42>
	else if(ReadBomb[0] == 2)
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <DisplayBomb+0x4c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d103      	bne.n	8000f90 <DisplayBomb+0x24>
		light = 0b11111100;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <DisplayBomb+0x50>)
 8000f8a:	22fc      	movs	r2, #252	@ 0xfc
 8000f8c:	801a      	strh	r2, [r3, #0]
}
 8000f8e:	e00e      	b.n	8000fae <DisplayBomb+0x42>
	else if(ReadBomb[0] == 3)
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <DisplayBomb+0x4c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d103      	bne.n	8000fa0 <DisplayBomb+0x34>
			light = 0b11111000;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <DisplayBomb+0x50>)
 8000f9a:	22f8      	movs	r2, #248	@ 0xf8
 8000f9c:	801a      	strh	r2, [r3, #0]
}
 8000f9e:	e006      	b.n	8000fae <DisplayBomb+0x42>
	else if(ReadBomb[0] == 4)
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <DisplayBomb+0x4c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d102      	bne.n	8000fae <DisplayBomb+0x42>
			light = 0b11110000;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <DisplayBomb+0x50>)
 8000faa:	22f0      	movs	r2, #240	@ 0xf0
 8000fac:	801a      	strh	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	2000026c 	.word	0x2000026c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <Error_Handler+0x8>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001002:	f002 fd55 	bl	8003ab0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09e      	sub	sp, #120	@ 0x78
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2254      	movs	r2, #84	@ 0x54
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fee7 	bl	8006e08 <memset>
  if(hi2c->Instance==I2C1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <HAL_I2C_MspInit+0xc8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d146      	bne.n	80010d2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001044:	2340      	movs	r3, #64	@ 0x40
 8001046:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4618      	mov	r0, r3
 8001052:	f003 fa6b 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800105c:	f7ff ffb0 	bl	8000fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001064:	4a1e      	ldr	r2, [pc, #120]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001078:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800107c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107e:	2312      	movs	r3, #18
 8001080:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108a:	2304      	movs	r3, #4
 800108c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001092:	4619      	mov	r1, r3
 8001094:	4813      	ldr	r0, [pc, #76]	@ (80010e4 <HAL_I2C_MspInit+0xd0>)
 8001096:	f000 fc69 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 80010a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201f      	movs	r0, #31
 80010b8:	f000 fbaf 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010bc:	201f      	movs	r0, #31
 80010be:	f000 fbc6 	bl	800184e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2020      	movs	r0, #32
 80010c8:	f000 fba7 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010cc:	2020      	movs	r0, #32
 80010ce:	f000 fbbe 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3778      	adds	r7, #120	@ 0x78
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40005400 	.word	0x40005400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09e      	sub	sp, #120	@ 0x78
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2254      	movs	r2, #84	@ 0x54
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f005 fe7d 	bl	8006e08 <memset>
  if(huart->Instance==LPUART1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_UART_MspInit+0xa8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d136      	bne.n	8001186 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001118:	2320      	movs	r3, #32
 800111a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fa01 	bl	800452c <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001130:	f7ff ff46 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <HAL_UART_MspInit+0xac>)
 8001136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001138:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <HAL_UART_MspInit+0xac>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_UART_MspInit+0xac>)
 8001142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_UART_MspInit+0xac>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001150:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <HAL_UART_MspInit+0xac>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_UART_MspInit+0xac>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001164:	230c      	movs	r3, #12
 8001166:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001174:	230c      	movs	r3, #12
 8001176:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001182:	f000 fbf3 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3778      	adds	r7, #120	@ 0x78
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40008000 	.word	0x40008000
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <HAL_SPI_MspInit+0x8c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d130      	bne.n	800121c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <HAL_SPI_MspInit+0x90>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	4a1a      	ldr	r2, [pc, #104]	@ (8001228 <HAL_SPI_MspInit+0x90>)
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <HAL_SPI_MspInit+0x90>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_SPI_MspInit+0x90>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <HAL_SPI_MspInit+0x90>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_SPI_MspInit+0x90>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011ea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011fc:	2306      	movs	r3, #6
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4809      	ldr	r0, [pc, #36]	@ (800122c <HAL_SPI_MspInit+0x94>)
 8001208:	f000 fbb0 	bl	800196c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2033      	movs	r0, #51	@ 0x33
 8001212:	f000 fb02 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001216:	2033      	movs	r0, #51	@ 0x33
 8001218:	f000 fb19 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40003c00 	.word	0x40003c00
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <HAL_TIM_Base_MspInit+0x44>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d113      	bne.n	800126a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <HAL_TIM_Base_MspInit+0x48>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	4a0c      	ldr	r2, [pc, #48]	@ (8001278 <HAL_TIM_Base_MspInit+0x48>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6593      	str	r3, [r2, #88]	@ 0x58
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_TIM_Base_MspInit+0x48>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	201d      	movs	r0, #29
 8001260:	f000 fadb 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001264:	201d      	movs	r0, #29
 8001266:	f000 faf2 	bl	800184e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40000400 	.word	0x40000400
 8001278:	40021000 	.word	0x40021000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d2:	f000 f987 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM3_IRQHandler+0x10>)
 80012e2:	f004 f969 	bl	80055b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001d0 	.word	0x200001d0

080012f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <I2C1_EV_IRQHandler+0x10>)
 80012f6:	f000 feaf 	bl	8002058 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000084 	.word	0x20000084

08001304 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <I2C1_ER_IRQHandler+0x10>)
 800130a:	f000 febf 	bl	800208c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000084 	.word	0x20000084

08001318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800131c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001320:	f000 fcd6 	bl	8001cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <SPI3_IRQHandler+0x10>)
 800132e:	f003 fca5 	bl	8004c7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000016c 	.word	0x2000016c

0800133c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_kill>:

int _kill(int pid, int sig)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001356:	f005 fd5f 	bl	8006e18 <__errno>
 800135a:	4603      	mov	r3, r0
 800135c:	2216      	movs	r2, #22
 800135e:	601a      	str	r2, [r3, #0]
  return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_exit>:

void _exit (int status)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001374:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe7 	bl	800134c <_kill>
  while (1) {}    /* Make sure we hang here */
 800137e:	bf00      	nop
 8001380:	e7fd      	b.n	800137e <_exit+0x12>

08001382 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e00a      	b.n	80013aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001394:	f3af 8000 	nop.w
 8001398:	4601      	mov	r1, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	60ba      	str	r2, [r7, #8]
 80013a0:	b2ca      	uxtb	r2, r1
 80013a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbf0      	blt.n	8001394 <_read+0x12>
  }

  return len;
 80013b2:	687b      	ldr	r3, [r7, #4]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e009      	b.n	80013e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	60ba      	str	r2, [r7, #8]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbf1      	blt.n	80013ce <_write+0x12>
  }
  return len;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_close>:

int _close(int file)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141c:	605a      	str	r2, [r3, #4]
  return 0;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_isatty>:

int _isatty(int file)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f005 fcc4 	bl	8006e18 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20020000 	.word	0x20020000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000274 	.word	0x20000274
 80014c4:	200003c8 	.word	0x200003c8

080014c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014ec:	480d      	ldr	r0, [pc, #52]	@ (8001524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f0:	f7ff ffea 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	@ (800152c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <LoopForever+0xe>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	@ (8001538 <LoopForever+0x16>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f005 fc83 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151e:	f7ff f847 	bl	80005b0 <main>

08001522 <LoopForever>:

LoopForever:
    b LoopForever
 8001522:	e7fe      	b.n	8001522 <LoopForever>
  ldr   r0, =_estack
 8001524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001530:	08007d10 	.word	0x08007d10
  ldr r2, =_sbss
 8001534:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001538:	200003c8 	.word	0x200003c8

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>

0800153e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f95b 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f80e 	bl	8001570 <HAL_InitTick>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	e001      	b.n	8001564 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001560:	f7ff fd34 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001564:	79fb      	ldrb	r3, [r7, #7]

}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_InitTick+0x68>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d022      	beq.n	80015ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_InitTick+0x6c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_InitTick+0x68>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001590:	fbb1 f3f3 	udiv	r3, r1, r3
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f966 	bl	800186a <HAL_SYSTICK_Config>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10f      	bne.n	80015c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	d809      	bhi.n	80015be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015aa:	2200      	movs	r2, #0
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015b2:	f000 f932 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b6:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_InitTick+0x70>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	e007      	b.n	80015ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e004      	b.n	80015ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e001      	b.n	80015ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_IncTick+0x1c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_IncTick+0x20>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a03      	ldr	r2, [pc, #12]	@ (8001600 <HAL_IncTick+0x1c>)
 80015f4:	6013      	str	r3, [r2, #0]
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	20000278 	.word	0x20000278
 8001604:	20000008 	.word	0x20000008

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000278 	.word	0x20000278

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001638:	d004      	beq.n	8001644 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_Delay+0x40>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001644:	bf00      	nop
 8001646:	f7ff ffdf 	bl	8001608 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	d8f7      	bhi.n	8001646 <HAL_Delay+0x26>
  {
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001828:	f7ff ff40 	bl	80016ac <__NVIC_GetPriorityGrouping>
 800182c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f7ff ff90 	bl	8001758 <NVIC_EncodePriority>
 8001838:	4602      	mov	r2, r0
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff5f 	bl	8001704 <__NVIC_SetPriority>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff33 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffa4 	bl	80017c0 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d00d      	beq.n	80018b6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e047      	b.n	8001946 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 020e 	bic.w	r2, r2, #14
 80018c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f003 021f 	and.w	r2, r3, #31
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001902:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00c      	beq.n	8001926 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001916:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800191a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001924:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
    }
  }
  return status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800195e:	b2db      	uxtb	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800197a:	e15a      	b.n	8001c32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 814c 	beq.w	8001c2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d005      	beq.n	80019ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d130      	bne.n	8001a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e2:	2201      	movs	r2, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 0201 	and.w	r2, r3, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d017      	beq.n	8001a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d123      	bne.n	8001a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	08da      	lsrs	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	6939      	ldr	r1, [r7, #16]
 8001a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0203 	and.w	r2, r3, #3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80a6 	beq.w	8001c2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <HAL_GPIO_Init+0x2e4>)
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c50 <HAL_GPIO_Init+0x2e4>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aec:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <HAL_GPIO_Init+0x2e4>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af8:	4a56      	ldr	r2, [pc, #344]	@ (8001c54 <HAL_GPIO_Init+0x2e8>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b22:	d01f      	beq.n	8001b64 <HAL_GPIO_Init+0x1f8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a4c      	ldr	r2, [pc, #304]	@ (8001c58 <HAL_GPIO_Init+0x2ec>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d019      	beq.n	8001b60 <HAL_GPIO_Init+0x1f4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c5c <HAL_GPIO_Init+0x2f0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x1f0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a4a      	ldr	r2, [pc, #296]	@ (8001c60 <HAL_GPIO_Init+0x2f4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1ec>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a49      	ldr	r2, [pc, #292]	@ (8001c64 <HAL_GPIO_Init+0x2f8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1e8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a48      	ldr	r2, [pc, #288]	@ (8001c68 <HAL_GPIO_Init+0x2fc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1e4>
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	e00a      	b.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b50:	2306      	movs	r3, #6
 8001b52:	e008      	b.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e004      	b.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e002      	b.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_GPIO_Init+0x1fa>
 8001b64:	2300      	movs	r3, #0
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	f002 0203 	and.w	r2, r2, #3
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b76:	4937      	ldr	r1, [pc, #220]	@ (8001c54 <HAL_GPIO_Init+0x2e8>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b84:	4b39      	ldr	r3, [pc, #228]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ba8:	4a30      	ldr	r2, [pc, #192]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bae:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd2:	4a26      	ldr	r2, [pc, #152]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bd8:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <HAL_GPIO_Init+0x300>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f47f ae9d 	bne.w	800197c <HAL_GPIO_Init+0x10>
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010000 	.word	0x40010000
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	48000c00 	.word	0x48000c00
 8001c64:	48001000 	.word	0x48001000
 8001c68:	48001400 	.word	0x48001400
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe ffac 	bl	8000c4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010400 	.word	0x40010400

08001d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e08d      	b.n	8001e2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff f974 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2224      	movs	r2, #36	@ 0x24
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e006      	b.n	8001d88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d108      	bne.n	8001da2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	e007      	b.n	8001db2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69d9      	ldr	r1, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	817b      	strh	r3, [r7, #10]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	813b      	strh	r3, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d16a      	bne.n	8001f34 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_I2C_Mem_Write_IT+0x32>
 8001e64:	8bbb      	ldrh	r3, [r7, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e05f      	b.n	8001f36 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	e055      	b.n	8001f36 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_I2C_Mem_Write_IT+0x60>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e04e      	b.n	8001f36 <HAL_I2C_Mem_Write_IT+0xfe>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2221      	movs	r2, #33	@ 0x21
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2240      	movs	r2, #64	@ 0x40
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8bba      	ldrh	r2, [r7, #28]
 8001ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_I2C_Mem_Write_IT+0x108>)
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f44 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001ed4:	897a      	ldrh	r2, [r7, #10]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d109      	bne.n	8001ef4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ef2:	e00b      	b.n	8001f0c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ef4:	893b      	ldrh	r3, [r7, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001f02:	893b      	ldrh	r3, [r7, #8]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_I2C_Mem_Write_IT+0x110>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f001 fb78 	bl	8003610 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f28:	2101      	movs	r1, #1
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f001 fba2 	bl	8003674 <I2C_Enable_IRQ>

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	ffff0000 	.word	0xffff0000
 8001f44:	08002215 	.word	0x08002215
 8001f48:	80002000 	.word	0x80002000

08001f4c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	4608      	mov	r0, r1
 8001f56:	4611      	mov	r1, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	817b      	strh	r3, [r7, #10]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	813b      	strh	r3, [r7, #8]
 8001f62:	4613      	mov	r3, r2
 8001f64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d166      	bne.n	8002040 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_I2C_Mem_Read_IT+0x32>
 8001f78:	8bbb      	ldrh	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e05b      	b.n	8002042 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e051      	b.n	8002042 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_I2C_Mem_Read_IT+0x60>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e04a      	b.n	8002042 <HAL_I2C_Mem_Read_IT+0xf6>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2222      	movs	r2, #34	@ 0x22
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2240      	movs	r2, #64	@ 0x40
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8bba      	ldrh	r2, [r7, #28]
 8001fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_I2C_Mem_Read_IT+0x100>)
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <HAL_I2C_Mem_Read_IT+0x104>)
 8001fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001fe2:	897a      	ldrh	r2, [r7, #10]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d109      	bne.n	8002002 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ffe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002000:	e00b      	b.n	800201a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002002:	893b      	ldrh	r3, [r7, #8]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002010:	893b      	ldrh	r3, [r7, #8]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_I2C_Mem_Read_IT+0x108>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2300      	movs	r3, #0
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f001 faf2 	bl	8003610 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002034:	2101      	movs	r1, #1
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f001 fb1c 	bl	8003674 <I2C_Enable_IRQ>

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	ffff0000 	.word	0xffff0000
 8002050:	08002215 	.word	0x08002215
 8002054:	80002000 	.word	0x80002000

08002058 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
  }
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00f      	beq.n	80020ce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00f      	beq.n	80020f8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f043 0208 	orr.w	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00f      	beq.n	8002122 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002120:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 030b 	and.w	r3, r3, #11
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f001 f911 	bl	800335c <I2C_ITError>
  }
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	70fb      	strb	r3, [r7, #3]
 800219e:	4613      	mov	r3, r2
 80021a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002220:	4b8d      	ldr	r3, [pc, #564]	@ (8002458 <I2C_Mem_ISR_IT+0x244>)
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <I2C_Mem_ISR_IT+0x22>
 8002232:	2302      	movs	r3, #2
 8002234:	e10c      	b.n	8002450 <I2C_Mem_ISR_IT+0x23c>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d012      	beq.n	800226e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f043 0204 	orr.w	r2, r3, #4
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f001 f98f 	bl	800358a <I2C_Flush_TXDR>
 800226c:	e0dd      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d022      	beq.n	80022be <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01d      	beq.n	80022be <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022bc:	e0b5      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02c      	beq.n	8002322 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d027      	beq.n	8002322 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022da:	d118      	bne.n	800230e <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800230c:	e08d      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800231e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002320:	e083      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03c      	beq.n	80023a6 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002332:	2b00      	cmp	r3, #0
 8002334:	d037      	beq.n	80023a6 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02c      	beq.n	800239a <I2C_Mem_ISR_IT+0x186>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d128      	bne.n	800239a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2bff      	cmp	r3, #255	@ 0xff
 8002350:	d910      	bls.n	8002374 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	22ff      	movs	r2, #255	@ 0xff
 8002356:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	b299      	uxth	r1, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	b2da      	uxtb	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f001 f94f 	bl	8003610 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	e017      	b.n	80023a4 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	b299      	uxth	r1, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002388:	b2da      	uxtb	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f001 f93c 	bl	8003610 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002398:	e004      	b.n	80023a4 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800239a:	2140      	movs	r1, #64	@ 0x40
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 ffdd 	bl	800335c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a2:	e042      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
 80023a4:	e041      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d03c      	beq.n	800242a <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d037      	beq.n	800242a <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023ba:	2101      	movs	r1, #1
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f001 f9dd 	bl	800377c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023c2:	2102      	movs	r1, #2
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f001 f955 	bl	8003674 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b22      	cmp	r3, #34	@ 0x22
 80023d4:	d101      	bne.n	80023da <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <I2C_Mem_ISR_IT+0x248>)
 80023d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2bff      	cmp	r3, #255	@ 0xff
 80023e2:	d910      	bls.n	8002406 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	b299      	uxth	r1, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f001 f906 	bl	8003610 <I2C_TransferConfig>
 8002404:	e011      	b.n	800242a <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	b299      	uxth	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	b2da      	uxtb	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f001 f8f3 	bl	8003610 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800243e:	6939      	ldr	r1, [r7, #16]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fd0b 	bl	8002e5c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	80002000 	.word	0x80002000
 800245c:	80002400 	.word	0x80002400

08002460 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <I2C_Slave_ISR_IT+0x24>
 8002480:	2302      	movs	r3, #2
 8002482:	e0e2      	b.n	800264a <I2C_Slave_ISR_IT+0x1ea>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80024a0:	6939      	ldr	r1, [r7, #16]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fda2 	bl	8002fec <I2C_ITSlaveCplt>
 80024a8:	e0ca      	b.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d04b      	beq.n	800254c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d046      	beq.n	800254c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d128      	bne.n	800251a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b28      	cmp	r3, #40	@ 0x28
 80024d2:	d108      	bne.n	80024e6 <I2C_Slave_ISR_IT+0x86>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024da:	d104      	bne.n	80024e6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fee8 	bl	80032b4 <I2C_ITListenCplt>
 80024e4:	e031      	b.n	800254a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b29      	cmp	r3, #41	@ 0x29
 80024f0:	d10e      	bne.n	8002510 <I2C_Slave_ISR_IT+0xb0>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024f8:	d00a      	beq.n	8002510 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f001 f841 	bl	800358a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fc4b 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 800250e:	e01c      	b.n	800254a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002518:	e08f      	b.n	800263a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2210      	movs	r2, #16
 8002520:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <I2C_Slave_ISR_IT+0xdc>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800253a:	d17e      	bne.n	800263a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	4619      	mov	r1, r3
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 ff0a 	bl	800335c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002548:	e077      	b.n	800263a <I2C_Slave_ISR_IT+0x1da>
 800254a:	e076      	b.n	800263a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02f      	beq.n	80025b6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02a      	beq.n	80025b6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d14b      	bne.n	800263e <I2C_Slave_ISR_IT+0x1de>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025ac:	d047      	beq.n	800263e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fbf8 	bl	8002da4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80025b4:	e043      	b.n	800263e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025ca:	6939      	ldr	r1, [r7, #16]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fb28 	bl	8002c22 <I2C_ITAddrCplt>
 80025d2:	e035      	b.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d030      	beq.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02b      	beq.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002622:	e00d      	b.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800262a:	d002      	beq.n	8002632 <I2C_Slave_ISR_IT+0x1d2>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fbb6 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 8002638:	e002      	b.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800263e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af02      	add	r7, sp, #8
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <I2C_Master_ISR_DMA+0x1a>
 8002668:	2302      	movs	r3, #2
 800266a:	e0d9      	b.n	8002820 <I2C_Master_ISR_DMA+0x1ce>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002684:	2b00      	cmp	r3, #0
 8002686:	d011      	beq.n	80026ac <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800269c:	2120      	movs	r1, #32
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 ffe8 	bl	8003674 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 ff70 	bl	800358a <I2C_Flush_TXDR>
 80026aa:	e0b4      	b.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d071      	beq.n	800279a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d06c      	beq.n	800279a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d04e      	beq.n	8002778 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	@ 0xff
 80026f0:	d906      	bls.n	8002700 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	@ 0xff
 80026f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80026f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e010      	b.n	8002722 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002712:	d003      	beq.n	800271c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e002      	b.n	8002722 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800271c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002720:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8a79      	ldrh	r1, [r7, #18]
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 ff6d 	bl	8003610 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b22      	cmp	r3, #34	@ 0x22
 8002752:	d108      	bne.n	8002766 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002762:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002764:	e057      	b.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002774:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002776:	e04e      	b.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002786:	d003      	beq.n	8002790 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 face 	bl	8002d2a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800278e:	e042      	b.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002790:	2140      	movs	r1, #64	@ 0x40
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fde2 	bl	800335c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002798:	e03d      	b.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d028      	beq.n	80027f6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d023      	beq.n	80027f6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d119      	bne.n	80027ec <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027c6:	d025      	beq.n	8002814 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027d0:	d108      	bne.n	80027e4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027e0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80027e2:	e017      	b.n	8002814 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 faa0 	bl	8002d2a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80027ea:	e013      	b.n	8002814 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027ec:	2140      	movs	r1, #64	@ 0x40
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fdb4 	bl	800335c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027f4:	e00e      	b.n	8002814 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fb25 	bl	8002e5c <I2C_ITMasterCplt>
 8002812:	e000      	b.n	8002816 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002814:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002834:	4b8d      	ldr	r3, [pc, #564]	@ (8002a6c <I2C_Mem_ISR_DMA+0x244>)
 8002836:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <I2C_Mem_ISR_DMA+0x1e>
 8002842:	2302      	movs	r3, #2
 8002844:	e10e      	b.n	8002a64 <I2C_Mem_ISR_DMA+0x23c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d016      	beq.n	8002886 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800285e:	2b00      	cmp	r3, #0
 8002860:	d011      	beq.n	8002886 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002876:	2120      	movs	r1, #32
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fefb 	bl	8003674 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fe83 	bl	800358a <I2C_Flush_TXDR>
 8002884:	e0e9      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80028ac:	e0d5      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05f      	beq.n	8002978 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d05a      	beq.n	8002978 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028c2:	2101      	movs	r1, #1
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 ff59 	bl	800377c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80028ca:	2110      	movs	r1, #16
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fed1 	bl	8003674 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d048      	beq.n	800296e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2bff      	cmp	r3, #255	@ 0xff
 80028e4:	d910      	bls.n	8002908 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	22ff      	movs	r2, #255	@ 0xff
 80028ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	b299      	uxth	r1, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fe85 	bl	8003610 <I2C_TransferConfig>
 8002906:	e011      	b.n	800292c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	b299      	uxth	r1, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fe72 	bl	8003610 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b22      	cmp	r3, #34	@ 0x22
 8002948:	d108      	bne.n	800295c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002958:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800295a:	e07e      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800296a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800296c:	e075      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800296e:	2140      	movs	r1, #64	@ 0x40
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fcf3 	bl	800335c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002976:	e070      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d05d      	beq.n	8002a3e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002988:	2b00      	cmp	r3, #0
 800298a:	d058      	beq.n	8002a3e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800298c:	2101      	movs	r1, #1
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fef4 	bl	800377c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002994:	2110      	movs	r1, #16
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fe6c 	bl	8003674 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b22      	cmp	r3, #34	@ 0x22
 80029a6:	d101      	bne.n	80029ac <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80029a8:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <I2C_Mem_ISR_DMA+0x248>)
 80029aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d910      	bls.n	80029d8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	@ 0xff
 80029ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	b299      	uxth	r1, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fe1d 	bl	8003610 <I2C_TransferConfig>
 80029d6:	e011      	b.n	80029fc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	b299      	uxth	r1, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fe0a 	bl	8003610 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b22      	cmp	r3, #34	@ 0x22
 8002a18:	d108      	bne.n	8002a2c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a28:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a2a:	e016      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a3c:	e00d      	b.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fa01 	bl	8002e5c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	80002000 	.word	0x80002000
 8002a70:	80002400 	.word	0x80002400

08002a74 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <I2C_Slave_ISR_DMA+0x24>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0c0      	b.n	8002c1a <I2C_Slave_ISR_DMA+0x1a6>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fa98 	bl	8002fec <I2C_ITSlaveCplt>
 8002abc:	e0a8      	b.n	8002c10 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8095 	beq.w	8002bf4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808f 	beq.w	8002bf4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d07d      	beq.n	8002be6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00c      	beq.n	8002b2e <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d128      	bne.n	8002b86 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b28      	cmp	r3, #40	@ 0x28
 8002b3e:	d108      	bne.n	8002b52 <I2C_Slave_ISR_DMA+0xde>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b46:	d104      	bne.n	8002b52 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fbb2 	bl	80032b4 <I2C_ITListenCplt>
 8002b50:	e048      	b.n	8002be4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b29      	cmp	r3, #41	@ 0x29
 8002b5c:	d10e      	bne.n	8002b7c <I2C_Slave_ISR_DMA+0x108>
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b64:	d00a      	beq.n	8002b7c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fd0b 	bl	800358a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f915 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 8002b7a:	e033      	b.n	8002be4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2210      	movs	r2, #16
 8002b82:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002b84:	e034      	b.n	8002bf0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0204 	orr.w	r2, r3, #4
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <I2C_Slave_ISR_DMA+0x13c>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bae:	d11f      	bne.n	8002bf0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b21      	cmp	r3, #33	@ 0x21
 8002bb4:	d002      	beq.n	8002bbc <I2C_Slave_ISR_DMA+0x148>
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b29      	cmp	r3, #41	@ 0x29
 8002bba:	d103      	bne.n	8002bc4 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2221      	movs	r2, #33	@ 0x21
 8002bc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc2:	e008      	b.n	8002bd6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b22      	cmp	r3, #34	@ 0x22
 8002bc8:	d002      	beq.n	8002bd0 <I2C_Slave_ISR_DMA+0x15c>
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bce:	d102      	bne.n	8002bd6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2222      	movs	r2, #34	@ 0x22
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4619      	mov	r1, r3
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fbbd 	bl	800335c <I2C_ITError>
      if (treatdmanack == 1U)
 8002be2:	e005      	b.n	8002bf0 <I2C_Slave_ISR_DMA+0x17c>
 8002be4:	e004      	b.n	8002bf0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2210      	movs	r2, #16
 8002bec:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bee:	e00f      	b.n	8002c10 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002bf0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bf2:	e00d      	b.n	8002c10 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f809 	bl	8002c22 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c38:	2b28      	cmp	r3, #40	@ 0x28
 8002c3a:	d16a      	bne.n	8002d12 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c5a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c68:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c76:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d138      	bne.n	8002cf2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	09db      	lsrs	r3, r3, #7
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	89bb      	ldrh	r3, [r7, #12]
 8002c88:	4053      	eors	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f003 0306 	and.w	r3, r3, #6
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11c      	bne.n	8002cce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d13b      	bne.n	8002d22 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cc0:	89ba      	ldrh	r2, [r7, #12]
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fa63 	bl	8002192 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ccc:	e029      	b.n	8002d22 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002cce:	893b      	ldrh	r3, [r7, #8]
 8002cd0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fd50 	bl	800377c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ce4:	89ba      	ldrh	r2, [r7, #12]
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fa51 	bl	8002192 <HAL_I2C_AddrCallback>
}
 8002cf0:	e017      	b.n	8002d22 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cf2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fd40 	bl	800377c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d04:	89ba      	ldrh	r2, [r7, #12]
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fa41 	bl	8002192 <HAL_I2C_AddrCallback>
}
 8002d10:	e007      	b.n	8002d22 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2208      	movs	r2, #8
 8002d18:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b21      	cmp	r3, #33	@ 0x21
 8002d44:	d115      	bne.n	8002d72 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2211      	movs	r2, #17
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fd0d 	bl	800377c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff f9e9 	bl	8002142 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d70:	e014      	b.n	8002d9c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2212      	movs	r2, #18
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d86:	2102      	movs	r1, #2
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fcf7 	bl	800377c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff f9dd 	bl	8002156 <HAL_I2C_MasterRxCpltCallback>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e00c      	b.n	8002df2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b29      	cmp	r3, #41	@ 0x29
 8002dfc:	d112      	bne.n	8002e24 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2228      	movs	r2, #40	@ 0x28
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2221      	movs	r2, #33	@ 0x21
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fcb4 	bl	800377c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff f9a4 	bl	800216a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e22:	e017      	b.n	8002e54 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e2e:	d111      	bne.n	8002e54 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2228      	movs	r2, #40	@ 0x28
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2222      	movs	r2, #34	@ 0x22
 8002e3c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e3e:	2102      	movs	r1, #2
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fc9b 	bl	800377c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff f995 	bl	800217e <HAL_I2C_SlaveRxCpltCallback>
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b21      	cmp	r3, #33	@ 0x21
 8002e7c:	d107      	bne.n	8002e8e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e7e:	2101      	movs	r1, #1
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fc7b 	bl	800377c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2211      	movs	r2, #17
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e8c:	e00c      	b.n	8002ea8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b22      	cmp	r3, #34	@ 0x22
 8002e98:	d106      	bne.n	8002ea8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fc6d 	bl	800377c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2212      	movs	r2, #18
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe4 <I2C_ITMasterCplt+0x188>)
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a49      	ldr	r2, [pc, #292]	@ (8002fe8 <I2C_ITMasterCplt+0x18c>)
 8002ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f043 0204 	orr.w	r2, r3, #4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b60      	cmp	r3, #96	@ 0x60
 8002eec:	d10a      	bne.n	8002f04 <I2C_ITMasterCplt+0xa8>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f02:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fb40 	bl	800358a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b60      	cmp	r3, #96	@ 0x60
 8002f1a:	d002      	beq.n	8002f22 <I2C_ITMasterCplt+0xc6>
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa17 	bl	800335c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f2e:	e054      	b.n	8002fda <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b21      	cmp	r3, #33	@ 0x21
 8002f3a:	d124      	bne.n	8002f86 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d10b      	bne.n	8002f6e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff f92b 	bl	80021c2 <HAL_I2C_MemTxCpltCallback>
}
 8002f6c:	e035      	b.n	8002fda <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff f8df 	bl	8002142 <HAL_I2C_MasterTxCpltCallback>
}
 8002f84:	e029      	b.n	8002fda <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b22      	cmp	r3, #34	@ 0x22
 8002f90:	d123      	bne.n	8002fda <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d10b      	bne.n	8002fc4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff f90a 	bl	80021d6 <HAL_I2C_MemRxCpltCallback>
}
 8002fc2:	e00a      	b.n	8002fda <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff f8be 	bl	8002156 <HAL_I2C_MasterRxCpltCallback>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	fe00e800 	.word	0xfe00e800
 8002fe8:	ffff0000 	.word	0xffff0000

08002fec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003006:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2220      	movs	r2, #32
 8003016:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	2b21      	cmp	r3, #33	@ 0x21
 800301c:	d002      	beq.n	8003024 <I2C_ITSlaveCplt+0x38>
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	2b29      	cmp	r3, #41	@ 0x29
 8003022:	d108      	bne.n	8003036 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003024:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fba7 	bl	800377c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2221      	movs	r2, #33	@ 0x21
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
 8003034:	e019      	b.n	800306a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003036:	7afb      	ldrb	r3, [r7, #11]
 8003038:	2b22      	cmp	r3, #34	@ 0x22
 800303a:	d002      	beq.n	8003042 <I2C_ITSlaveCplt+0x56>
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003040:	d108      	bne.n	8003054 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003042:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fb98 	bl	800377c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2222      	movs	r2, #34	@ 0x22
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
 8003052:	e00a      	b.n	800306a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003054:	7afb      	ldrb	r3, [r7, #11]
 8003056:	2b28      	cmp	r3, #40	@ 0x28
 8003058:	d107      	bne.n	800306a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800305a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb8c 	bl	800377c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003078:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b89      	ldr	r3, [pc, #548]	@ (80032ac <I2C_ITSlaveCplt+0x2c0>)
 8003086:	400b      	ands	r3, r1
 8003088:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa7d 	bl	800358a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d013      	beq.n	80030c2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030a8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01f      	beq.n	80030f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030c0:	e017      	b.n	80030f2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d049      	beq.n	80031f2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003164:	2b00      	cmp	r3, #0
 8003166:	d044      	beq.n	80031f2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d128      	bne.n	80031c4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b28      	cmp	r3, #40	@ 0x28
 800317c:	d108      	bne.n	8003190 <I2C_ITSlaveCplt+0x1a4>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003184:	d104      	bne.n	8003190 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f893 	bl	80032b4 <I2C_ITListenCplt>
 800318e:	e030      	b.n	80031f2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b29      	cmp	r3, #41	@ 0x29
 800319a:	d10e      	bne.n	80031ba <I2C_ITSlaveCplt+0x1ce>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031a2:	d00a      	beq.n	80031ba <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2210      	movs	r2, #16
 80031aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9ec 	bl	800358a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fdf6 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 80031b8:	e01b      	b.n	80031f2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	61da      	str	r2, [r3, #28]
 80031c2:	e016      	b.n	80031f2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2210      	movs	r2, #16
 80031ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	f043 0204 	orr.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <I2C_ITSlaveCplt+0x1fa>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e4:	d105      	bne.n	80031f2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8b5 	bl	800335c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8a4 	bl	800335c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b28      	cmp	r3, #40	@ 0x28
 800321e:	d141      	bne.n	80032a4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f846 	bl	80032b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003228:	e03c      	b.n	80032a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003232:	d014      	beq.n	800325e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fdb5 	bl	8002da4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <I2C_ITSlaveCplt+0x2c4>)
 800323e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe ffa9 	bl	80021ae <HAL_I2C_ListenCpltCallback>
}
 800325c:	e022      	b.n	80032a4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b22      	cmp	r3, #34	@ 0x22
 8003268:	d10e      	bne.n	8003288 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe ff7c 	bl	800217e <HAL_I2C_SlaveRxCpltCallback>
}
 8003286:	e00d      	b.n	80032a4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe ff63 	bl	800216a <HAL_I2C_SlaveTxCpltCallback>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	fe00e800 	.word	0xfe00e800
 80032b0:	ffff0000 	.word	0xffff0000

080032b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a25      	ldr	r2, [pc, #148]	@ (8003358 <I2C_ITListenCplt+0xa4>)
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d022      	beq.n	8003330 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003330:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa21 	bl	800377c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2210      	movs	r2, #16
 8003340:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe ff2f 	bl	80021ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	ffff0000 	.word	0xffff0000

0800335c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a6d      	ldr	r2, [pc, #436]	@ (8003530 <I2C_ITError+0x1d4>)
 800337a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b28      	cmp	r3, #40	@ 0x28
 8003392:	d005      	beq.n	80033a0 <I2C_ITError+0x44>
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b29      	cmp	r3, #41	@ 0x29
 8003398:	d002      	beq.n	80033a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b2a      	cmp	r3, #42	@ 0x2a
 800339e:	d10b      	bne.n	80033b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033a0:	2103      	movs	r1, #3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f9ea 	bl	800377c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2228      	movs	r2, #40	@ 0x28
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a60      	ldr	r2, [pc, #384]	@ (8003534 <I2C_ITError+0x1d8>)
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033b6:	e030      	b.n	800341a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033b8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f9dd 	bl	800377c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8e1 	bl	800358a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b60      	cmp	r3, #96	@ 0x60
 80033d2:	d01f      	beq.n	8003414 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d114      	bne.n	8003414 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d109      	bne.n	800340c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2210      	movs	r2, #16
 80033fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2220      	movs	r2, #32
 8003412:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d039      	beq.n	800349c <I2C_ITError+0x140>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b11      	cmp	r3, #17
 800342c:	d002      	beq.n	8003434 <I2C_ITError+0xd8>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b21      	cmp	r3, #33	@ 0x21
 8003432:	d133      	bne.n	800349c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800343e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003442:	d107      	bne.n	8003454 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003452:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fa79 	bl	8001950 <HAL_DMA_GetState>
 800345e:	4603      	mov	r3, r0
 8003460:	2b01      	cmp	r3, #1
 8003462:	d017      	beq.n	8003494 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	4a33      	ldr	r2, [pc, #204]	@ (8003538 <I2C_ITError+0x1dc>)
 800346a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fa02 	bl	8001882 <HAL_DMA_Abort_IT>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d04d      	beq.n	8003520 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800348e:	4610      	mov	r0, r2
 8003490:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003492:	e045      	b.n	8003520 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f851 	bl	800353c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800349a:	e041      	b.n	8003520 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d039      	beq.n	8003518 <I2C_ITError+0x1bc>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d002      	beq.n	80034b0 <I2C_ITError+0x154>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b22      	cmp	r3, #34	@ 0x22
 80034ae:	d133      	bne.n	8003518 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034be:	d107      	bne.n	80034d0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fa3b 	bl	8001950 <HAL_DMA_GetState>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d017      	beq.n	8003510 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	4a14      	ldr	r2, [pc, #80]	@ (8003538 <I2C_ITError+0x1dc>)
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe f9c4 	bl	8001882 <HAL_DMA_Abort_IT>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d011      	beq.n	8003524 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800350a:	4610      	mov	r0, r2
 800350c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800350e:	e009      	b.n	8003524 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f813 	bl	800353c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003516:	e005      	b.n	8003524 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f80f 	bl	800353c <I2C_TreatErrorCallback>
  }
}
 800351e:	e002      	b.n	8003526 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003524:	bf00      	nop
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	ffff0000 	.word	0xffff0000
 8003534:	08002461 	.word	0x08002461
 8003538:	080035d3 	.word	0x080035d3

0800353c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b60      	cmp	r3, #96	@ 0x60
 800354e:	d10e      	bne.n	800356e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fe49 	bl	80021fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800356c:	e009      	b.n	8003582 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fe fe34 	bl	80021ea <HAL_I2C_ErrorCallback>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d103      	bne.n	80035a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d007      	beq.n	80035c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	619a      	str	r2, [r3, #24]
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	2200      	movs	r2, #0
 80035ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	2200      	movs	r2, #0
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ff9b 	bl	800353c <I2C_TreatErrorCallback>
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	4613      	mov	r3, r2
 8003620:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003622:	897b      	ldrh	r3, [r7, #10]
 8003624:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003628:	7a7b      	ldrb	r3, [r7, #9]
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003630:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	4313      	orrs	r3, r2
 800363a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800363e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	0d5b      	lsrs	r3, r3, #21
 800364a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800364e:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <I2C_TransferConfig+0x60>)
 8003650:	430b      	orrs	r3, r1
 8003652:	43db      	mvns	r3, r3
 8003654:	ea02 0103 	and.w	r1, r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	03ff63ff 	.word	0x03ff63ff

08003674 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	4a39      	ldr	r2, [pc, #228]	@ (8003770 <I2C_Enable_IRQ+0xfc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d032      	beq.n	80036f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003692:	4a38      	ldr	r2, [pc, #224]	@ (8003774 <I2C_Enable_IRQ+0x100>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d02d      	beq.n	80036f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800369c:	4a36      	ldr	r2, [pc, #216]	@ (8003778 <I2C_Enable_IRQ+0x104>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d028      	beq.n	80036f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da03      	bge.n	80036b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80036b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80036c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80036d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d103      	bne.n	80036e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80036e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d133      	bne.n	8003752 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f043 0320 	orr.w	r3, r3, #32
 80036f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036f2:	e02e      	b.n	8003752 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da03      	bge.n	8003704 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003702:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003714:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003726:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	2b10      	cmp	r3, #16
 800372c:	d103      	bne.n	8003736 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003734:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d103      	bne.n	8003744 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003742:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d103      	bne.n	8003752 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003750:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	08002653 	.word	0x08002653
 8003774:	08002a75 	.word	0x08002a75
 8003778:	08002829 	.word	0x08002829

0800377c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00f      	beq.n	80037b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800379c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037aa:	2b28      	cmp	r3, #40	@ 0x28
 80037ac:	d003      	beq.n	80037b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80037b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00f      	beq.n	80037e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80037c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037d4:	2b28      	cmp	r3, #40	@ 0x28
 80037d6:	d003      	beq.n	80037e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80037de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da03      	bge.n	80037f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d103      	bne.n	80037fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037fe:	887b      	ldrh	r3, [r7, #2]
 8003800:	2b20      	cmp	r3, #32
 8003802:	d103      	bne.n	800380c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f043 0320 	orr.w	r3, r3, #32
 800380a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d103      	bne.n	800381a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003818:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	43da      	mvns	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d138      	bne.n	80038c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003858:	2302      	movs	r3, #2
 800385a:	e032      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	@ 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800388a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d139      	bne.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e033      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	@ 0x24
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d141      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003982:	d131      	bne.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003984:	4b47      	ldr	r3, [pc, #284]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398a:	4a46      	ldr	r2, [pc, #280]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003994:	4b43      	ldr	r3, [pc, #268]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800399c:	4a41      	ldr	r2, [pc, #260]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039a4:	4b40      	ldr	r3, [pc, #256]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2232      	movs	r2, #50	@ 0x32
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	4a3f      	ldr	r2, [pc, #252]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9b      	lsrs	r3, r3, #18
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ba:	e002      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039c2:	4b38      	ldr	r3, [pc, #224]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ce:	d102      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039d6:	4b33      	ldr	r3, [pc, #204]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e2:	d158      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e057      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039e8:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ee:	4a2d      	ldr	r2, [pc, #180]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039f8:	e04d      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a00:	d141      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a02:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0e:	d131      	bne.n	8003a74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a10:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a16:	4a23      	ldr	r2, [pc, #140]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a20:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a28:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2232      	movs	r2, #50	@ 0x32
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	0c9b      	lsrs	r3, r3, #18
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a46:	e002      	b.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d102      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f2      	bne.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6e:	d112      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e011      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a84:	e007      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a8e:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	431bde83 	.word	0x431bde83

08003ab0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003abe:	6093      	str	r3, [r2, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e2fe      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aee:	4b97      	ldr	r3, [pc, #604]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af8:	4b94      	ldr	r3, [pc, #592]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3e>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b8d      	ldr	r3, [pc, #564]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x108>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d157      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e2d9      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x74>
 8003b36:	4b85      	ldr	r3, [pc, #532]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a84      	ldr	r2, [pc, #528]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7e      	ldr	r2, [pc, #504]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b68:	4b78      	ldr	r3, [pc, #480]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a77      	ldr	r2, [pc, #476]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b75      	ldr	r3, [pc, #468]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a74      	ldr	r2, [pc, #464]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fd3e 	bl	8001608 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fd fd3a 	bl	8001608 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	@ 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e29e      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xc0>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fd2a 	bl	8001608 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fd fd26 	bl	8001608 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e28a      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bca:	4b60      	ldr	r3, [pc, #384]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d075      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be6:	4b59      	ldr	r3, [pc, #356]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bf0:	4b56      	ldr	r3, [pc, #344]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_OscConfig+0x136>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d002      	beq.n	8003c0c <HAL_RCC_OscConfig+0x13c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d11f      	bne.n	8003c4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_OscConfig+0x154>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e25d      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b49      	ldr	r3, [pc, #292]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4946      	ldr	r1, [pc, #280]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c38:	4b45      	ldr	r3, [pc, #276]	@ (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd fc97 	bl	8001570 <HAL_InitTick>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d043      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e249      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d023      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b3d      	ldr	r3, [pc, #244]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fcd2 	bl	8001608 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c68:	f7fd fcce 	bl	8001608 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e232      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7a:	4b34      	ldr	r3, [pc, #208]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b31      	ldr	r3, [pc, #196]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	492d      	ldr	r1, [pc, #180]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
 8003c9a:	e01a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fcae 	bl	8001608 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fd fcaa 	bl	8001608 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e20e      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc2:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1e0>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d041      	beq.n	8003d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce6:	4b19      	ldr	r3, [pc, #100]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fd fc87 	bl	8001608 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fd fc83 	bl	8001608 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1e7      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d10:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ef      	beq.n	8003cfe <HAL_RCC_OscConfig+0x22e>
 8003d1e:	e020      	b.n	8003d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d26:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <HAL_RCC_OscConfig+0x27c>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd fc6a 	bl	8001608 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d36:	e00d      	b.n	8003d54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fd fc66 	bl	8001608 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d906      	bls.n	8003d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1ca      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	4b8c      	ldr	r3, [pc, #560]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ea      	bne.n	8003d38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a6 	beq.w	8003ebc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d74:	4b84      	ldr	r3, [pc, #528]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_OscConfig+0x2b4>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x2b6>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d96:	4b7c      	ldr	r3, [pc, #496]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	4b79      	ldr	r3, [pc, #484]	@ (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db2:	4b76      	ldr	r3, [pc, #472]	@ (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a75      	ldr	r2, [pc, #468]	@ (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fd fc23 	bl	8001608 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fd fc1f 	bl	8001608 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e183      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f8c <HAL_RCC_OscConfig+0x4bc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d108      	bne.n	8003dfe <HAL_RCC_OscConfig+0x32e>
 8003dec:	4b66      	ldr	r3, [pc, #408]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a65      	ldr	r2, [pc, #404]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfc:	e024      	b.n	8003e48 <HAL_RCC_OscConfig+0x378>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d110      	bne.n	8003e28 <HAL_RCC_OscConfig+0x358>
 8003e06:	4b60      	ldr	r3, [pc, #384]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f043 0304 	orr.w	r3, r3, #4
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e16:	4b5c      	ldr	r3, [pc, #368]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e26:	e00f      	b.n	8003e48 <HAL_RCC_OscConfig+0x378>
 8003e28:	4b57      	ldr	r3, [pc, #348]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	4a56      	ldr	r2, [pc, #344]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e38:	4b53      	ldr	r3, [pc, #332]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	4a52      	ldr	r2, [pc, #328]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fbda 	bl	8001608 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd fbd6 	bl	8001608 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e138      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	4b46      	ldr	r3, [pc, #280]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ed      	beq.n	8003e58 <HAL_RCC_OscConfig+0x388>
 8003e7c:	e015      	b.n	8003eaa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fbc3 	bl	8001608 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd fbbf 	bl	8001608 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e121      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ed      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b35      	ldr	r3, [pc, #212]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb4:	4a34      	ldr	r2, [pc, #208]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd fb92 	bl	8001608 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee8:	f7fd fb8e 	bl	8001608 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0f2      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efa:	4b23      	ldr	r3, [pc, #140]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ef      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x418>
 8003f08:	e01b      	b.n	8003f42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f10:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fb75 	bl	8001608 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f22:	f7fd fb71 	bl	8001608 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0d5      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f34:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ef      	bne.n	8003f22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80c9 	beq.w	80040de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	f000 8083 	beq.w	8004060 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d15e      	bne.n	8004020 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a08      	ldr	r2, [pc, #32]	@ (8003f88 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6e:	f7fd fb4b 	bl	8001608 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	e00c      	b.n	8003f90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fd fb47 	bl	8001608 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d905      	bls.n	8003f90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0ab      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f90:	4b55      	ldr	r3, [pc, #340]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ec      	bne.n	8003f76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9c:	4b52      	ldr	r3, [pc, #328]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	4b52      	ldr	r3, [pc, #328]	@ (80040ec <HAL_RCC_OscConfig+0x61c>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6a11      	ldr	r1, [r2, #32]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fb6:	0212      	lsls	r2, r2, #8
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fbe:	0852      	lsrs	r2, r2, #1
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0552      	lsls	r2, r2, #21
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fd6:	06d2      	lsls	r2, r2, #27
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	4943      	ldr	r1, [pc, #268]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b41      	ldr	r3, [pc, #260]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a40      	ldr	r2, [pc, #256]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fec:	4b3e      	ldr	r3, [pc, #248]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a3d      	ldr	r2, [pc, #244]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ff6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fb06 	bl	8001608 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd fb02 	bl	8001608 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e066      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	4b35      	ldr	r3, [pc, #212]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x530>
 800401e:	e05e      	b.n	80040de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b31      	ldr	r3, [pc, #196]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a30      	ldr	r2, [pc, #192]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd faec 	bl	8001608 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd fae8 	bl	8001608 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e04c      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004046:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004052:	4b25      	ldr	r3, [pc, #148]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4924      	ldr	r1, [pc, #144]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 8004058:	4b25      	ldr	r3, [pc, #148]	@ (80040f0 <HAL_RCC_OscConfig+0x620>)
 800405a:	4013      	ands	r3, r2
 800405c:	60cb      	str	r3, [r1, #12]
 800405e:	e03e      	b.n	80040de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e039      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800406c:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <HAL_RCC_OscConfig+0x618>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d12c      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	3b01      	subs	r3, #1
 800408c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d123      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d11b      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d113      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	3b01      	subs	r3, #1
 80040c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d109      	bne.n	80040da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	019f800c 	.word	0x019f800c
 80040f0:	feeefffc 	.word	0xfeeefffc

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e11e      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4b91      	ldr	r3, [pc, #580]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d910      	bls.n	800413c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b8e      	ldr	r3, [pc, #568]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 020f 	bic.w	r2, r3, #15
 8004122:	498c      	ldr	r1, [pc, #560]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b8a      	ldr	r3, [pc, #552]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e106      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d073      	beq.n	8004230 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d129      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004150:	4b81      	ldr	r3, [pc, #516]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0f4      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004160:	f000 f99e 	bl	80044a0 <RCC_GetSysClockFreqFromPLLSource>
 8004164:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4a7c      	ldr	r2, [pc, #496]	@ (800435c <HAL_RCC_ClockConfig+0x268>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d93f      	bls.n	80041ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800416e:	4b7a      	ldr	r3, [pc, #488]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	d033      	beq.n	80041ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800418a:	2b00      	cmp	r3, #0
 800418c:	d12f      	bne.n	80041ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800418e:	4b72      	ldr	r3, [pc, #456]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004196:	4a70      	ldr	r2, [pc, #448]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800419c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e024      	b.n	80041ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0c6      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041bc:	4b66      	ldr	r3, [pc, #408]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0be      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041cc:	f000 f8ce 	bl	800436c <HAL_RCC_GetSysClockFreq>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4a61      	ldr	r2, [pc, #388]	@ (800435c <HAL_RCC_ClockConfig+0x268>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d909      	bls.n	80041ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041da:	4b5f      	ldr	r3, [pc, #380]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4957      	ldr	r1, [pc, #348]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fd fa02 	bl	8001608 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fd f9fe 	bl	8001608 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e095      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b4e      	ldr	r3, [pc, #312]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d023      	beq.n	8004284 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a42      	ldr	r2, [pc, #264]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004252:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004260:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004268:	4a3b      	ldr	r2, [pc, #236]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800426a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800426e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4936      	ldr	r1, [pc, #216]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
 8004282:	e008      	b.n	8004296 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b80      	cmp	r3, #128	@ 0x80
 8004288:	d105      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800428a:	4b33      	ldr	r3, [pc, #204]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4a32      	ldr	r2, [pc, #200]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004290:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004294:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004296:	4b2f      	ldr	r3, [pc, #188]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d21d      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 020f 	bic.w	r2, r3, #15
 80042ac:	4929      	ldr	r1, [pc, #164]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042b4:	f7fd f9a8 	bl	8001608 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd f9a4 	bl	8001608 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e03b      	b.n	800434a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <HAL_RCC_ClockConfig+0x260>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1ed      	bne.n	80042bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4917      	ldr	r1, [pc, #92]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490f      	ldr	r1, [pc, #60]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800431e:	f000 f825 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCC_ClockConfig+0x264>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490c      	ldr	r1, [pc, #48]	@ (8004360 <HAL_RCC_ClockConfig+0x26c>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <HAL_RCC_ClockConfig+0x270>)
 800433c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x274>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd f914 	bl	8001570 <HAL_InitTick>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
 800435c:	04c4b400 	.word	0x04c4b400
 8004360:	08007be0 	.word	0x08007be0
 8004364:	20000000 	.word	0x20000000
 8004368:	20000004 	.word	0x20000004

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004372:	4b2c      	ldr	r3, [pc, #176]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d102      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800437e:	4b2a      	ldr	r3, [pc, #168]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	e047      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004384:	4b27      	ldr	r3, [pc, #156]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b08      	cmp	r3, #8
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004390:	4b26      	ldr	r3, [pc, #152]	@ (800442c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e03e      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004396:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d136      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a2:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3301      	adds	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d10c      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c0:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ca:	68d2      	ldr	r2, [r2, #12]
 80043cc:	0a12      	lsrs	r2, r2, #8
 80043ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
      break;
 80043d8:	e00c      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043da:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	4a10      	ldr	r2, [pc, #64]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	0a12      	lsrs	r2, r2, #8
 80043e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]
      break;
 80043f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	0e5b      	lsrs	r3, r3, #25
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	3301      	adds	r3, #1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e001      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004414:	693b      	ldr	r3, [r7, #16]
}
 8004416:	4618      	mov	r0, r3
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	00f42400 	.word	0x00f42400
 800442c:	016e3600 	.word	0x016e3600

08004430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	@ (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4904      	ldr	r1, [pc, #16]	@ (8004470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	08007bf0 	.word	0x08007bf0

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004478:	f7ff ffda 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0adb      	lsrs	r3, r3, #11
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4904      	ldr	r1, [pc, #16]	@ (800449c <HAL_RCC_GetPCLK2Freq+0x28>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	08007bf0 	.word	0x08007bf0

080044a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3301      	adds	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d10c      	bne.n	80044de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	4a14      	ldr	r2, [pc, #80]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ce:	68d2      	ldr	r2, [r2, #12]
 80044d0:	0a12      	lsrs	r2, r2, #8
 80044d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
    break;
 80044dc:	e00c      	b.n	80044f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	0a12      	lsrs	r2, r2, #8
 80044ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    break;
 80044f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0e5b      	lsrs	r3, r3, #25
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004512:	687b      	ldr	r3, [r7, #4]
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	016e3600 	.word	0x016e3600
 8004528:	00f42400 	.word	0x00f42400

0800452c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004534:	2300      	movs	r3, #0
 8004536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004538:	2300      	movs	r3, #0
 800453a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8098 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b43      	ldr	r3, [pc, #268]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	4b40      	ldr	r3, [pc, #256]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455e:	4a3f      	ldr	r2, [pc, #252]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	@ 0x58
 8004566:	4b3d      	ldr	r3, [pc, #244]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004576:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a39      	ldr	r2, [pc, #228]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800457c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004582:	f7fd f841 	bl	8001608 <HAL_GetTick>
 8004586:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004588:	e009      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458a:	f7fd f83d 	bl	8001608 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d902      	bls.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	74fb      	strb	r3, [r7, #19]
        break;
 800459c:	e005      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459e:	4b30      	ldr	r3, [pc, #192]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ef      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d159      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045b0:	4b2a      	ldr	r3, [pc, #168]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01e      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d019      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045cc:	4b23      	ldr	r3, [pc, #140]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045de:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045e8:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	4a1b      	ldr	r2, [pc, #108]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045f8:	4a18      	ldr	r2, [pc, #96]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fc fffd 	bl	8001608 <HAL_GetTick>
 800460e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	e00b      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fc fff9 	bl	8001608 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d902      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	74fb      	strb	r3, [r7, #19]
            break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462a:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ec      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004644:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	4903      	ldr	r1, [pc, #12]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	74bb      	strb	r3, [r7, #18]
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800465c:	40021000 	.word	0x40021000
 8004660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004668:	7c7b      	ldrb	r3, [r7, #17]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4ba7      	ldr	r3, [pc, #668]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004672:	4aa6      	ldr	r2, [pc, #664]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004678:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004686:	4ba1      	ldr	r3, [pc, #644]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f023 0203 	bic.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	499d      	ldr	r1, [pc, #628]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a8:	4b98      	ldr	r3, [pc, #608]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	f023 020c 	bic.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4995      	ldr	r1, [pc, #596]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ca:	4b90      	ldr	r3, [pc, #576]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	498c      	ldr	r1, [pc, #560]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046ec:	4b87      	ldr	r3, [pc, #540]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4984      	ldr	r1, [pc, #528]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800470e:	4b7f      	ldr	r3, [pc, #508]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	497b      	ldr	r1, [pc, #492]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004730:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	4973      	ldr	r1, [pc, #460]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004752:	4b6e      	ldr	r3, [pc, #440]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	496a      	ldr	r1, [pc, #424]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004774:	4b65      	ldr	r3, [pc, #404]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4962      	ldr	r1, [pc, #392]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004796:	4b5d      	ldr	r3, [pc, #372]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	4959      	ldr	r1, [pc, #356]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047b8:	4b54      	ldr	r3, [pc, #336]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	4951      	ldr	r1, [pc, #324]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047da:	4b4c      	ldr	r3, [pc, #304]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	4948      	ldr	r1, [pc, #288]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047fc:	4b43      	ldr	r3, [pc, #268]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4940      	ldr	r1, [pc, #256]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481a:	d105      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481c:	4b3b      	ldr	r3, [pc, #236]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a3a      	ldr	r2, [pc, #232]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004826:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004834:	4b35      	ldr	r3, [pc, #212]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	4932      	ldr	r1, [pc, #200]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004854:	4b2d      	ldr	r3, [pc, #180]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800486c:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004872:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	4924      	ldr	r1, [pc, #144]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a1e      	ldr	r2, [pc, #120]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a4:	4b19      	ldr	r3, [pc, #100]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b2:	4916      	ldr	r1, [pc, #88]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048c2:	d105      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4a10      	ldr	r2, [pc, #64]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d019      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	4908      	ldr	r1, [pc, #32]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fa:	d109      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a02      	ldr	r2, [pc, #8]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e002      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800491c:	4b29      	ldr	r3, [pc, #164]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004922:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	4926      	ldr	r1, [pc, #152]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800493a:	d105      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800493c:	4b21      	ldr	r3, [pc, #132]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4a20      	ldr	r2, [pc, #128]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004946:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004954:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004962:	4918      	ldr	r1, [pc, #96]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004972:	d105      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d015      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800498c:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004992:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	490a      	ldr	r1, [pc, #40]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ac:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a04      	ldr	r2, [pc, #16]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e09d      	b.n	8004b16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ea:	d009      	beq.n	8004a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
 80049f2:	e005      	b.n	8004a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fbbc 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a40:	d902      	bls.n	8004a48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e002      	b.n	8004a4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a56:	d007      	beq.n	8004a68 <HAL_SPI_Init+0xa0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aaa:	ea42 0103 	orr.w	r1, r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	f003 0204 	and.w	r2, r3, #4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b38:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b40:	7dbb      	ldrb	r3, [r7, #22]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d00d      	beq.n	8004b62 <HAL_SPI_TransmitReceive_IT+0x42>
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b4c:	d106      	bne.n	8004b5c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_TransmitReceive_IT+0x3c>
 8004b56:	7dbb      	ldrb	r3, [r7, #22]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b60:	e07d      	b.n	8004c5e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_SPI_TransmitReceive_IT+0x54>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_TransmitReceive_IT+0x54>
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b78:	e071      	b.n	8004c5e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_SPI_TransmitReceive_IT+0x68>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e06b      	b.n	8004c60 <HAL_SPI_TransmitReceive_IT+0x140>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d003      	beq.n	8004ba4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	887a      	ldrh	r2, [r7, #2]
 8004bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	887a      	ldrh	r2, [r7, #2]
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	887a      	ldrh	r2, [r7, #2]
 8004bce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bda:	d906      	bls.n	8004bea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004be0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004be6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004be8:	e005      	b.n	8004bf6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a21      	ldr	r2, [pc, #132]	@ (8004c74 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004bee:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a21      	ldr	r2, [pc, #132]	@ (8004c78 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004bf4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bfe:	d802      	bhi.n	8004c06 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004c00:	887b      	ldrh	r3, [r7, #2]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d908      	bls.n	8004c18 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	e007      	b.n	8004c28 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c26:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c32:	2b40      	cmp	r3, #64	@ 0x40
 8004c34:	d007      	beq.n	8004c46 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004c5c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	08005007 	.word	0x08005007
 8004c70:	0800506d 	.word	0x0800506d
 8004c74:	08004eb7 	.word	0x08004eb7
 8004c78:	08004f75 	.word	0x08004f75

08004c7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10e      	bne.n	8004cbc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
    return;
 8004cba:	e0ce      	b.n	8004e5a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_SPI_IRQHandler+0x5e>
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
    return;
 8004cd8:	e0bf      	b.n	8004e5a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <HAL_SPI_IRQHandler+0x7e>
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80b0 	beq.w	8004e5a <HAL_SPI_IRQHandler+0x1de>
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80aa 	beq.w	8004e5a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d023      	beq.n	8004d58 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d011      	beq.n	8004d40 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d20:	f043 0204 	orr.w	r2, r3, #4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	e00b      	b.n	8004d58 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]
        return;
 8004d56:	e080      	b.n	8004e5a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d014      	beq.n	8004d8c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9a:	f043 0208 	orr.w	r2, r3, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d04f      	beq.n	8004e58 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dc6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <HAL_SPI_IRQHandler+0x168>
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d034      	beq.n	8004e4e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0203 	bic.w	r2, r2, #3
 8004df2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <HAL_SPI_IRQHandler+0x1e4>)
 8004e02:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fc fd3a 	bl	8001882 <HAL_DMA_Abort_IT>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e60 <HAL_SPI_IRQHandler+0x1e4>)
 8004e2e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fc fd24 	bl	8001882 <HAL_DMA_Abort_IT>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004e4c:	e003      	b.n	8004e56 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f812 	bl	8004e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e54:	e000      	b.n	8004e58 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004e56:	bf00      	nop
    return;
 8004e58:	bf00      	nop
  }
}
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	08004e8d 	.word	0x08004e8d

08004e64 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff ffe5 	bl	8004e78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d923      	bls.n	8004f12 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	b292      	uxth	r2, r2
 8004ed6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b02      	subs	r3, #2
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d11f      	bne.n	8004f40 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	e016      	b.n	8004f40 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f103 020c 	add.w	r2, r3, #12
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10f      	bne.n	8004f6c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f5a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fa14 	bl	8005394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d912      	bls.n	8004fac <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	881a      	ldrh	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b02      	subs	r3, #2
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004faa:	e012      	b.n	8004fd2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	7812      	ldrb	r2, [r2, #0]
 8004fb8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d110      	bne.n	8004ffe <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fea:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9cb 	bl	8005394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	b292      	uxth	r2, r2
 800501a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10f      	bne.n	8005064 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005052:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f998 	bl	8005394 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d110      	bne.n	80050c4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050b0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f968 	bl	8005394 <SPI_CloseRxTx_ISR>
    }
  }
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050dc:	f7fc fa94 	bl	8001608 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050ec:	f7fc fa8c 	bl	8001608 <HAL_GetTick>
 80050f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050f2:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	015b      	lsls	r3, r3, #5
 80050f8:	0d1b      	lsrs	r3, r3, #20
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005102:	e054      	b.n	80051ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800510a:	d050      	beq.n	80051ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800510c:	f7fc fa7c 	bl	8001608 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	429a      	cmp	r2, r3
 800511a:	d902      	bls.n	8005122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d13d      	bne.n	800519e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800513a:	d111      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005144:	d004      	beq.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514e:	d107      	bne.n	8005160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005168:	d10f      	bne.n	800518a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e017      	b.n	80051ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d19b      	bne.n	8005104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000000 	.word	0x20000000

080051dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	@ 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051ee:	f7fc fa0b 	bl	8001608 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	4413      	add	r3, r2
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80051fe:	f7fc fa03 	bl	8001608 <HAL_GetTick>
 8005202:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800520c:	4b3d      	ldr	r3, [pc, #244]	@ (8005304 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	00da      	lsls	r2, r3, #3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	0d1b      	lsrs	r3, r3, #20
 800521c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005224:	e060      	b.n	80052e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800522c:	d107      	bne.n	800523e <SPI_WaitFifoStateUntilTimeout+0x62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800523c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005244:	d050      	beq.n	80052e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005246:	f7fc f9df 	bl	8001608 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005252:	429a      	cmp	r2, r3
 8005254:	d902      	bls.n	800525c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d13d      	bne.n	80052d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800526a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005274:	d111      	bne.n	800529a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527e:	d004      	beq.n	800528a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005288:	d107      	bne.n	800529a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005298:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a2:	d10f      	bne.n	80052c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e010      	b.n	80052fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d196      	bne.n	8005226 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3728      	adds	r7, #40	@ 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000000 	.word	0x20000000

08005308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff5b 	bl	80051dc <SPI_WaitFifoStateUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e027      	b.n	800538c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	2180      	movs	r1, #128	@ 0x80
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff fec0 	bl	80050cc <SPI_WaitFlagStateUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e014      	b.n	800538c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff ff34 	bl	80051dc <SPI_WaitFifoStateUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d007      	beq.n	800538a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e000      	b.n	800538c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800539c:	f7fc f934 	bl	8001608 <HAL_GetTick>
 80053a0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0220 	bic.w	r2, r2, #32
 80053b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	2164      	movs	r1, #100	@ 0x64
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ffa6 	bl	8005308 <SPI_EndRxTxTransaction>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d115      	bne.n	8005402 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d107      	bne.n	80053f2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fd3a 	bl	8004e64 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80053f0:	e00e      	b.n	8005410 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fb fc06 	bl	8000c0c <HAL_SPI_TxRxCpltCallback>
}
 8005400:	e006      	b.n	8005410 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fd34 	bl	8004e78 <HAL_SPI_ErrorCallback>
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e049      	b.n	80054be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fef6 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f000 fb3c 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e054      	b.n	800558a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <HAL_TIM_Base_Start_IT+0xd0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d022      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d01d      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	@ (800559c <HAL_TIM_Base_Start_IT+0xd4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	@ (80055a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <HAL_TIM_Base_Start_IT+0xe4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	@ (80055b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d115      	bne.n	8005574 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	4b19      	ldr	r3, [pc, #100]	@ (80055b4 <HAL_TIM_Base_Start_IT+0xec>)
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b06      	cmp	r3, #6
 8005558:	d015      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0xbe>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005560:	d011      	beq.n	8005586 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005572:	e008      	b.n	8005586 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e000      	b.n	8005588 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40013400 	.word	0x40013400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40015000 	.word	0x40015000
 80055b4:	00010007 	.word	0x00010007

080055b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d020      	beq.n	800561c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0202 	mvn.w	r2, #2
 80055ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa48 	bl	8005a98 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa3a 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa4b 	bl	8005aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d020      	beq.n	8005668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01b      	beq.n	8005668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0204 	mvn.w	r2, #4
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa22 	bl	8005a98 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa14 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fa25 	bl	8005aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d020      	beq.n	80056b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01b      	beq.n	80056b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0208 	mvn.w	r2, #8
 8005684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2204      	movs	r2, #4
 800568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9fc 	bl	8005a98 <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f9ee 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f9ff 	bl	8005aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d020      	beq.n	8005700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01b      	beq.n	8005700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0210 	mvn.w	r2, #16
 80056d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2208      	movs	r2, #8
 80056d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9d6 	bl	8005a98 <HAL_TIM_IC_CaptureCallback>
 80056ec:	e005      	b.n	80056fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9c8 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9d9 	bl	8005aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0201 	mvn.w	r2, #1
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fb fba0 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fbb1 	bl	8005eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00c      	beq.n	8005776 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800576e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fba9 	bl	8005ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f993 	bl	8005ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0220 	mvn.w	r2, #32
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fb71 	bl	8005ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fb7d 	bl	8005edc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fb75 	bl	8005ef0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00c      	beq.n	800582a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fb6d 	bl	8005f04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00c      	beq.n	800584e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb65 	bl	8005f18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIM_ConfigClockSource+0x1c>
 8005870:	2302      	movs	r3, #2
 8005872:	e0f6      	b.n	8005a62 <HAL_TIM_ConfigClockSource+0x20a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800589e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6f      	ldr	r2, [pc, #444]	@ (8005a6c <HAL_TIM_ConfigClockSource+0x214>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f000 80c1 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 80058b4:	4a6d      	ldr	r2, [pc, #436]	@ (8005a6c <HAL_TIM_ConfigClockSource+0x214>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	f200 80c6 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80058bc:	4a6c      	ldr	r2, [pc, #432]	@ (8005a70 <HAL_TIM_ConfigClockSource+0x218>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	f000 80b9 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 80058c4:	4a6a      	ldr	r2, [pc, #424]	@ (8005a70 <HAL_TIM_ConfigClockSource+0x218>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f200 80be 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80058cc:	4a69      	ldr	r2, [pc, #420]	@ (8005a74 <HAL_TIM_ConfigClockSource+0x21c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	f000 80b1 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 80058d4:	4a67      	ldr	r2, [pc, #412]	@ (8005a74 <HAL_TIM_ConfigClockSource+0x21c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f200 80b6 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80058dc:	4a66      	ldr	r2, [pc, #408]	@ (8005a78 <HAL_TIM_ConfigClockSource+0x220>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f000 80a9 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 80058e4:	4a64      	ldr	r2, [pc, #400]	@ (8005a78 <HAL_TIM_ConfigClockSource+0x220>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f200 80ae 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80058ec:	4a63      	ldr	r2, [pc, #396]	@ (8005a7c <HAL_TIM_ConfigClockSource+0x224>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f000 80a1 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 80058f4:	4a61      	ldr	r2, [pc, #388]	@ (8005a7c <HAL_TIM_ConfigClockSource+0x224>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	f200 80a6 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80058fc:	4a60      	ldr	r2, [pc, #384]	@ (8005a80 <HAL_TIM_ConfigClockSource+0x228>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f000 8099 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 8005904:	4a5e      	ldr	r2, [pc, #376]	@ (8005a80 <HAL_TIM_ConfigClockSource+0x228>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f200 809e 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800590c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005910:	f000 8091 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 8005914:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005918:	f200 8096 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800591c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005920:	f000 8089 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 8005924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005928:	f200 808e 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800592c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005930:	d03e      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0x158>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005936:	f200 8087 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593e:	f000 8086 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1f6>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005946:	d87f      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005948:	2b70      	cmp	r3, #112	@ 0x70
 800594a:	d01a      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x12a>
 800594c:	2b70      	cmp	r3, #112	@ 0x70
 800594e:	d87b      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005950:	2b60      	cmp	r3, #96	@ 0x60
 8005952:	d050      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x19e>
 8005954:	2b60      	cmp	r3, #96	@ 0x60
 8005956:	d877      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005958:	2b50      	cmp	r3, #80	@ 0x50
 800595a:	d03c      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0x17e>
 800595c:	2b50      	cmp	r3, #80	@ 0x50
 800595e:	d873      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d058      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x1be>
 8005964:	2b40      	cmp	r3, #64	@ 0x40
 8005966:	d86f      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005968:	2b30      	cmp	r3, #48	@ 0x30
 800596a:	d064      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 800596c:	2b30      	cmp	r3, #48	@ 0x30
 800596e:	d86b      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005970:	2b20      	cmp	r3, #32
 8005972:	d060      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 8005974:	2b20      	cmp	r3, #32
 8005976:	d867      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 800597c:	2b10      	cmp	r3, #16
 800597e:	d05a      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1de>
 8005980:	e062      	b.n	8005a48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005992:	f000 f9cf 	bl	8005d34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	609a      	str	r2, [r3, #8]
      break;
 80059ae:	e04f      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059c0:	f000 f9b8 	bl	8005d34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059d2:	609a      	str	r2, [r3, #8]
      break;
 80059d4:	e03c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	461a      	mov	r2, r3
 80059e4:	f000 f92a 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2150      	movs	r1, #80	@ 0x50
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 f983 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 80059f4:	e02c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 f949 	bl	8005c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2160      	movs	r1, #96	@ 0x60
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f973 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a14:	e01c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 f90a 	bl	8005c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2140      	movs	r1, #64	@ 0x40
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f963 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a34:	e00c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 f95a 	bl	8005cfa <TIM_ITRx_SetConfig>
      break;
 8005a46:	e003      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	00100070 	.word	0x00100070
 8005a70:	00100060 	.word	0x00100060
 8005a74:	00100050 	.word	0x00100050
 8005a78:	00100040 	.word	0x00100040
 8005a7c:	00100030 	.word	0x00100030
 8005a80:	00100020 	.word	0x00100020

08005a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d017      	beq.n	8005b1c <TIM_Base_SetConfig+0x48>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af2:	d013      	beq.n	8005b1c <TIM_Base_SetConfig+0x48>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a49      	ldr	r2, [pc, #292]	@ (8005c1c <TIM_Base_SetConfig+0x148>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0x48>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a48      	ldr	r2, [pc, #288]	@ (8005c20 <TIM_Base_SetConfig+0x14c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0x48>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a47      	ldr	r2, [pc, #284]	@ (8005c24 <TIM_Base_SetConfig+0x150>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0x48>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a46      	ldr	r2, [pc, #280]	@ (8005c28 <TIM_Base_SetConfig+0x154>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x48>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a45      	ldr	r2, [pc, #276]	@ (8005c2c <TIM_Base_SetConfig+0x158>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a39      	ldr	r2, [pc, #228]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d023      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3c:	d01f      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a36      	ldr	r2, [pc, #216]	@ (8005c1c <TIM_Base_SetConfig+0x148>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01b      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a35      	ldr	r2, [pc, #212]	@ (8005c20 <TIM_Base_SetConfig+0x14c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d017      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a34      	ldr	r2, [pc, #208]	@ (8005c24 <TIM_Base_SetConfig+0x150>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a33      	ldr	r2, [pc, #204]	@ (8005c28 <TIM_Base_SetConfig+0x154>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00f      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a33      	ldr	r2, [pc, #204]	@ (8005c30 <TIM_Base_SetConfig+0x15c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a32      	ldr	r2, [pc, #200]	@ (8005c34 <TIM_Base_SetConfig+0x160>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a31      	ldr	r2, [pc, #196]	@ (8005c38 <TIM_Base_SetConfig+0x164>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_Base_SetConfig+0xaa>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	@ (8005c2c <TIM_Base_SetConfig+0x158>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d013      	beq.n	8005be4 <TIM_Base_SetConfig+0x110>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8005c28 <TIM_Base_SetConfig+0x154>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00f      	beq.n	8005be4 <TIM_Base_SetConfig+0x110>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c30 <TIM_Base_SetConfig+0x15c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00b      	beq.n	8005be4 <TIM_Base_SetConfig+0x110>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <TIM_Base_SetConfig+0x160>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d007      	beq.n	8005be4 <TIM_Base_SetConfig+0x110>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a18      	ldr	r2, [pc, #96]	@ (8005c38 <TIM_Base_SetConfig+0x164>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_Base_SetConfig+0x110>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <TIM_Base_SetConfig+0x158>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f023 0201 	bic.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	611a      	str	r2, [r3, #16]
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40015000 	.word	0x40015000
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 030a 	bic.w	r3, r3, #10
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f023 0210 	bic.w	r2, r3, #16
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f043 0307 	orr.w	r3, r3, #7
 8005d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	021a      	lsls	r2, r3, #8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	609a      	str	r2, [r3, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e074      	b.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a34      	ldr	r2, [pc, #208]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a33      	ldr	r2, [pc, #204]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a31      	ldr	r2, [pc, #196]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005dd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a21      	ldr	r2, [pc, #132]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0c:	d01d      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a11      	ldr	r2, [pc, #68]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10c      	bne.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40015000 	.word	0x40015000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40014000 	.word	0x40014000

08005ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e042      	b.n	8005fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fb f8c9 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	@ 0x24
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fb24 	bl	80065c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f825 	bl	8005fcc <UART_SetConfig>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e01b      	b.n	8005fc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fba3 	bl	8006708 <UART_CheckIdleState>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd0:	b08c      	sub	sp, #48	@ 0x30
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4baa      	ldr	r3, [pc, #680]	@ (80062a4 <UART_SetConfig+0x2d8>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006004:	430b      	orrs	r3, r1
 8006006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a9f      	ldr	r2, [pc, #636]	@ (80062a8 <UART_SetConfig+0x2dc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006034:	4313      	orrs	r3, r2
 8006036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006042:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800604c:	430b      	orrs	r3, r1
 800604e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	f023 010f 	bic.w	r1, r3, #15
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a90      	ldr	r2, [pc, #576]	@ (80062ac <UART_SetConfig+0x2e0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d125      	bne.n	80060bc <UART_SetConfig+0xf0>
 8006070:	4b8f      	ldr	r3, [pc, #572]	@ (80062b0 <UART_SetConfig+0x2e4>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b03      	cmp	r3, #3
 800607c:	d81a      	bhi.n	80060b4 <UART_SetConfig+0xe8>
 800607e:	a201      	add	r2, pc, #4	@ (adr r2, 8006084 <UART_SetConfig+0xb8>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	08006095 	.word	0x08006095
 8006088:	080060a5 	.word	0x080060a5
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060ad 	.word	0x080060ad
 8006094:	2301      	movs	r3, #1
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609a:	e116      	b.n	80062ca <UART_SetConfig+0x2fe>
 800609c:	2302      	movs	r3, #2
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a2:	e112      	b.n	80062ca <UART_SetConfig+0x2fe>
 80060a4:	2304      	movs	r3, #4
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060aa:	e10e      	b.n	80062ca <UART_SetConfig+0x2fe>
 80060ac:	2308      	movs	r3, #8
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b2:	e10a      	b.n	80062ca <UART_SetConfig+0x2fe>
 80060b4:	2310      	movs	r3, #16
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e106      	b.n	80062ca <UART_SetConfig+0x2fe>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a7c      	ldr	r2, [pc, #496]	@ (80062b4 <UART_SetConfig+0x2e8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d138      	bne.n	8006138 <UART_SetConfig+0x16c>
 80060c6:	4b7a      	ldr	r3, [pc, #488]	@ (80062b0 <UART_SetConfig+0x2e4>)
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060cc:	f003 030c 	and.w	r3, r3, #12
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	d82d      	bhi.n	8006130 <UART_SetConfig+0x164>
 80060d4:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <UART_SetConfig+0x110>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006131 	.word	0x08006131
 80060e4:	08006131 	.word	0x08006131
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006131 	.word	0x08006131
 80060f4:	08006131 	.word	0x08006131
 80060f8:	08006131 	.word	0x08006131
 80060fc:	08006119 	.word	0x08006119
 8006100:	08006131 	.word	0x08006131
 8006104:	08006131 	.word	0x08006131
 8006108:	08006131 	.word	0x08006131
 800610c:	08006129 	.word	0x08006129
 8006110:	2300      	movs	r3, #0
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006116:	e0d8      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006118:	2302      	movs	r3, #2
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611e:	e0d4      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006126:	e0d0      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612e:	e0cc      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e0c8      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5e      	ldr	r2, [pc, #376]	@ (80062b8 <UART_SetConfig+0x2ec>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d125      	bne.n	800618e <UART_SetConfig+0x1c2>
 8006142:	4b5b      	ldr	r3, [pc, #364]	@ (80062b0 <UART_SetConfig+0x2e4>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006148:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800614c:	2b30      	cmp	r3, #48	@ 0x30
 800614e:	d016      	beq.n	800617e <UART_SetConfig+0x1b2>
 8006150:	2b30      	cmp	r3, #48	@ 0x30
 8006152:	d818      	bhi.n	8006186 <UART_SetConfig+0x1ba>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d00a      	beq.n	800616e <UART_SetConfig+0x1a2>
 8006158:	2b20      	cmp	r3, #32
 800615a:	d814      	bhi.n	8006186 <UART_SetConfig+0x1ba>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <UART_SetConfig+0x19a>
 8006160:	2b10      	cmp	r3, #16
 8006162:	d008      	beq.n	8006176 <UART_SetConfig+0x1aa>
 8006164:	e00f      	b.n	8006186 <UART_SetConfig+0x1ba>
 8006166:	2300      	movs	r3, #0
 8006168:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800616c:	e0ad      	b.n	80062ca <UART_SetConfig+0x2fe>
 800616e:	2302      	movs	r3, #2
 8006170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006174:	e0a9      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006176:	2304      	movs	r3, #4
 8006178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617c:	e0a5      	b.n	80062ca <UART_SetConfig+0x2fe>
 800617e:	2308      	movs	r3, #8
 8006180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006184:	e0a1      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006186:	2310      	movs	r3, #16
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618c:	e09d      	b.n	80062ca <UART_SetConfig+0x2fe>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a4a      	ldr	r2, [pc, #296]	@ (80062bc <UART_SetConfig+0x2f0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d125      	bne.n	80061e4 <UART_SetConfig+0x218>
 8006198:	4b45      	ldr	r3, [pc, #276]	@ (80062b0 <UART_SetConfig+0x2e4>)
 800619a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a4:	d016      	beq.n	80061d4 <UART_SetConfig+0x208>
 80061a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a8:	d818      	bhi.n	80061dc <UART_SetConfig+0x210>
 80061aa:	2b80      	cmp	r3, #128	@ 0x80
 80061ac:	d00a      	beq.n	80061c4 <UART_SetConfig+0x1f8>
 80061ae:	2b80      	cmp	r3, #128	@ 0x80
 80061b0:	d814      	bhi.n	80061dc <UART_SetConfig+0x210>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <UART_SetConfig+0x1f0>
 80061b6:	2b40      	cmp	r3, #64	@ 0x40
 80061b8:	d008      	beq.n	80061cc <UART_SetConfig+0x200>
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x210>
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e082      	b.n	80062ca <UART_SetConfig+0x2fe>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ca:	e07e      	b.n	80062ca <UART_SetConfig+0x2fe>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e07a      	b.n	80062ca <UART_SetConfig+0x2fe>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e076      	b.n	80062ca <UART_SetConfig+0x2fe>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e072      	b.n	80062ca <UART_SetConfig+0x2fe>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a35      	ldr	r2, [pc, #212]	@ (80062c0 <UART_SetConfig+0x2f4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d12a      	bne.n	8006244 <UART_SetConfig+0x278>
 80061ee:	4b30      	ldr	r3, [pc, #192]	@ (80062b0 <UART_SetConfig+0x2e4>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061fc:	d01a      	beq.n	8006234 <UART_SetConfig+0x268>
 80061fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006202:	d81b      	bhi.n	800623c <UART_SetConfig+0x270>
 8006204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006208:	d00c      	beq.n	8006224 <UART_SetConfig+0x258>
 800620a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620e:	d815      	bhi.n	800623c <UART_SetConfig+0x270>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <UART_SetConfig+0x250>
 8006214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006218:	d008      	beq.n	800622c <UART_SetConfig+0x260>
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x270>
 800621c:	2300      	movs	r3, #0
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e052      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006224:	2302      	movs	r3, #2
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e04e      	b.n	80062ca <UART_SetConfig+0x2fe>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e04a      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623a:	e046      	b.n	80062ca <UART_SetConfig+0x2fe>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e042      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a17      	ldr	r2, [pc, #92]	@ (80062a8 <UART_SetConfig+0x2dc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d13a      	bne.n	80062c4 <UART_SetConfig+0x2f8>
 800624e:	4b18      	ldr	r3, [pc, #96]	@ (80062b0 <UART_SetConfig+0x2e4>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800625c:	d01a      	beq.n	8006294 <UART_SetConfig+0x2c8>
 800625e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006262:	d81b      	bhi.n	800629c <UART_SetConfig+0x2d0>
 8006264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006268:	d00c      	beq.n	8006284 <UART_SetConfig+0x2b8>
 800626a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800626e:	d815      	bhi.n	800629c <UART_SetConfig+0x2d0>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <UART_SetConfig+0x2b0>
 8006274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006278:	d008      	beq.n	800628c <UART_SetConfig+0x2c0>
 800627a:	e00f      	b.n	800629c <UART_SetConfig+0x2d0>
 800627c:	2300      	movs	r3, #0
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006282:	e022      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006284:	2302      	movs	r3, #2
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628a:	e01e      	b.n	80062ca <UART_SetConfig+0x2fe>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006292:	e01a      	b.n	80062ca <UART_SetConfig+0x2fe>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629a:	e016      	b.n	80062ca <UART_SetConfig+0x2fe>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a2:	e012      	b.n	80062ca <UART_SetConfig+0x2fe>
 80062a4:	cfff69f3 	.word	0xcfff69f3
 80062a8:	40008000 	.word	0x40008000
 80062ac:	40013800 	.word	0x40013800
 80062b0:	40021000 	.word	0x40021000
 80062b4:	40004400 	.word	0x40004400
 80062b8:	40004800 	.word	0x40004800
 80062bc:	40004c00 	.word	0x40004c00
 80062c0:	40005000 	.word	0x40005000
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4aae      	ldr	r2, [pc, #696]	@ (8006588 <UART_SetConfig+0x5bc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	f040 8097 	bne.w	8006404 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d823      	bhi.n	8006326 <UART_SetConfig+0x35a>
 80062de:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <UART_SetConfig+0x318>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006327 	.word	0x08006327
 80062ec:	08006311 	.word	0x08006311
 80062f0:	08006327 	.word	0x08006327
 80062f4:	08006317 	.word	0x08006317
 80062f8:	08006327 	.word	0x08006327
 80062fc:	08006327 	.word	0x08006327
 8006300:	08006327 	.word	0x08006327
 8006304:	0800631f 	.word	0x0800631f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006308:	f7fe f89e 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 800630c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800630e:	e010      	b.n	8006332 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006310:	4b9e      	ldr	r3, [pc, #632]	@ (800658c <UART_SetConfig+0x5c0>)
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006314:	e00d      	b.n	8006332 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006316:	f7fe f829 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800631a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800631c:	e009      	b.n	8006332 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006324:	e005      	b.n	8006332 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8130 	beq.w	800659a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	4a94      	ldr	r2, [pc, #592]	@ (8006590 <UART_SetConfig+0x5c4>)
 8006340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006344:	461a      	mov	r2, r3
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	fbb3 f3f2 	udiv	r3, r3, r2
 800634c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	429a      	cmp	r2, r3
 800635c:	d305      	bcc.n	800636a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	429a      	cmp	r2, r3
 8006368:	d903      	bls.n	8006372 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006370:	e113      	b.n	800659a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	2200      	movs	r2, #0
 8006376:	60bb      	str	r3, [r7, #8]
 8006378:	60fa      	str	r2, [r7, #12]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637e:	4a84      	ldr	r2, [pc, #528]	@ (8006590 <UART_SetConfig+0x5c4>)
 8006380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006384:	b29b      	uxth	r3, r3
 8006386:	2200      	movs	r2, #0
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006390:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006394:	f7f9 ff94 	bl	80002c0 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	020b      	lsls	r3, r1, #8
 80063aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063ae:	0202      	lsls	r2, r0, #8
 80063b0:	6979      	ldr	r1, [r7, #20]
 80063b2:	6849      	ldr	r1, [r1, #4]
 80063b4:	0849      	lsrs	r1, r1, #1
 80063b6:	2000      	movs	r0, #0
 80063b8:	460c      	mov	r4, r1
 80063ba:	4605      	mov	r5, r0
 80063bc:	eb12 0804 	adds.w	r8, r2, r4
 80063c0:	eb43 0905 	adc.w	r9, r3, r5
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	469a      	mov	sl, r3
 80063cc:	4693      	mov	fp, r2
 80063ce:	4652      	mov	r2, sl
 80063d0:	465b      	mov	r3, fp
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7f9 ff73 	bl	80002c0 <__aeabi_uldivmod>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4613      	mov	r3, r2
 80063e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e8:	d308      	bcc.n	80063fc <UART_SetConfig+0x430>
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f0:	d204      	bcs.n	80063fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e0ce      	b.n	800659a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006402:	e0ca      	b.n	800659a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640c:	d166      	bne.n	80064dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800640e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006412:	2b08      	cmp	r3, #8
 8006414:	d827      	bhi.n	8006466 <UART_SetConfig+0x49a>
 8006416:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <UART_SetConfig+0x450>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006441 	.word	0x08006441
 8006420:	08006449 	.word	0x08006449
 8006424:	08006451 	.word	0x08006451
 8006428:	08006467 	.word	0x08006467
 800642c:	08006457 	.word	0x08006457
 8006430:	08006467 	.word	0x08006467
 8006434:	08006467 	.word	0x08006467
 8006438:	08006467 	.word	0x08006467
 800643c:	0800645f 	.word	0x0800645f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fe f802 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006446:	e014      	b.n	8006472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006448:	f7fe f814 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 800644c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800644e:	e010      	b.n	8006472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006450:	4b4e      	ldr	r3, [pc, #312]	@ (800658c <UART_SetConfig+0x5c0>)
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006454:	e00d      	b.n	8006472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006456:	f7fd ff89 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800645a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800645c:	e009      	b.n	8006472 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006464:	e005      	b.n	8006472 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8090 	beq.w	800659a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	4a44      	ldr	r2, [pc, #272]	@ (8006590 <UART_SetConfig+0x5c4>)
 8006480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006484:	461a      	mov	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	fbb3 f3f2 	udiv	r3, r3, r2
 800648c:	005a      	lsls	r2, r3, #1
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	441a      	add	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	2b0f      	cmp	r3, #15
 80064a4:	d916      	bls.n	80064d4 <UART_SetConfig+0x508>
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ac:	d212      	bcs.n	80064d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f023 030f 	bic.w	r3, r3, #15
 80064b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	8bfb      	ldrh	r3, [r7, #30]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	8bfa      	ldrh	r2, [r7, #30]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	e062      	b.n	800659a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064da:	e05e      	b.n	800659a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d828      	bhi.n	8006536 <UART_SetConfig+0x56a>
 80064e4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ec <UART_SetConfig+0x520>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006511 	.word	0x08006511
 80064f0:	08006519 	.word	0x08006519
 80064f4:	08006521 	.word	0x08006521
 80064f8:	08006537 	.word	0x08006537
 80064fc:	08006527 	.word	0x08006527
 8006500:	08006537 	.word	0x08006537
 8006504:	08006537 	.word	0x08006537
 8006508:	08006537 	.word	0x08006537
 800650c:	0800652f 	.word	0x0800652f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006510:	f7fd ff9a 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8006514:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006516:	e014      	b.n	8006542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006518:	f7fd ffac 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 800651c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800651e:	e010      	b.n	8006542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006520:	4b1a      	ldr	r3, [pc, #104]	@ (800658c <UART_SetConfig+0x5c0>)
 8006522:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006524:	e00d      	b.n	8006542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006526:	f7fd ff21 	bl	800436c <HAL_RCC_GetSysClockFreq>
 800652a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800652c:	e009      	b.n	8006542 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006534:	e005      	b.n	8006542 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006540:	bf00      	nop
    }

    if (pclk != 0U)
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d028      	beq.n	800659a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	4a10      	ldr	r2, [pc, #64]	@ (8006590 <UART_SetConfig+0x5c4>)
 800654e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006552:	461a      	mov	r2, r3
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	fbb3 f2f2 	udiv	r2, r3, r2
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	441a      	add	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	fbb2 f3f3 	udiv	r3, r2, r3
 800656a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	2b0f      	cmp	r3, #15
 8006570:	d910      	bls.n	8006594 <UART_SetConfig+0x5c8>
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006578:	d20c      	bcs.n	8006594 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	b29a      	uxth	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60da      	str	r2, [r3, #12]
 8006584:	e009      	b.n	800659a <UART_SetConfig+0x5ce>
 8006586:	bf00      	nop
 8006588:	40008000 	.word	0x40008000
 800658c:	00f42400 	.word	0x00f42400
 8006590:	08007bf8 	.word	0x08007bf8
      }
      else
      {
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2201      	movs	r2, #1
 800659e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3730      	adds	r7, #48	@ 0x30
 80065be:	46bd      	mov	sp, r7
 80065c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01a      	beq.n	80066da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c2:	d10a      	bne.n	80066da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b098      	sub	sp, #96	@ 0x60
 800670c:	af02      	add	r7, sp, #8
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006718:	f7fa ff76 	bl	8001608 <HAL_GetTick>
 800671c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b08      	cmp	r3, #8
 800672a:	d12f      	bne.n	800678c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800672c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006734:	2200      	movs	r2, #0
 8006736:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f88e 	bl	800685c <UART_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d022      	beq.n	800678c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675a:	653b      	str	r3, [r7, #80]	@ 0x50
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006764:	647b      	str	r3, [r7, #68]	@ 0x44
 8006766:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800676a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e6      	bne.n	8006746 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e063      	b.n	8006854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d149      	bne.n	800682e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800679a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a2:	2200      	movs	r2, #0
 80067a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f857 	bl	800685c <UART_WaitOnFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d03c      	beq.n	800682e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	623b      	str	r3, [r7, #32]
   return(result);
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e6      	bne.n	80067b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006806:	61fa      	str	r2, [r7, #28]
 8006808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	69b9      	ldr	r1, [r7, #24]
 800680c:	69fa      	ldr	r2, [r7, #28]
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	617b      	str	r3, [r7, #20]
   return(result);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e012      	b.n	8006854 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3758      	adds	r7, #88	@ 0x58
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686c:	e04f      	b.n	800690e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006874:	d04b      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006876:	f7fa fec7 	bl	8001608 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <UART_WaitOnFlagUntilTimeout+0x30>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e04e      	b.n	800692e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d037      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0xb2>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b80      	cmp	r3, #128	@ 0x80
 80068a2:	d034      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b40      	cmp	r3, #64	@ 0x40
 80068a8:	d031      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d110      	bne.n	80068da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2208      	movs	r2, #8
 80068be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f838 	bl	8006936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2208      	movs	r2, #8
 80068ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e029      	b.n	800692e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e8:	d111      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f81e 	bl	8006936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e00f      	b.n	800692e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4013      	ands	r3, r2
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	bf0c      	ite	eq
 800691e:	2301      	moveq	r3, #1
 8006920:	2300      	movne	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	429a      	cmp	r2, r3
 800692a:	d0a0      	beq.n	800686e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006936:	b480      	push	{r7}
 8006938:	b095      	sub	sp, #84	@ 0x54
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695c:	643b      	str	r3, [r7, #64]	@ 0x40
 800695e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e6      	bne.n	800693e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006994:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800699a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e3      	bne.n	8006970 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d118      	bne.n	80069e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f023 0310 	bic.w	r3, r3, #16
 80069c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6979      	ldr	r1, [r7, #20]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	613b      	str	r3, [r7, #16]
   return(result);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e6      	bne.n	80069b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069f6:	bf00      	nop
 80069f8:	3754      	adds	r7, #84	@ 0x54
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e027      	b.n	8006a68 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	@ 0x24
 8006a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e02d      	b.n	8006ae8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	@ 0x24
 8006a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f84f 	bl	8006b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e02d      	b.n	8006b64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2224      	movs	r2, #36	@ 0x24
 8006b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f811 	bl	8006b6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d108      	bne.n	8006b8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b8c:	e031      	b.n	8006bf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b8e:	2308      	movs	r3, #8
 8006b90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b92:	2308      	movs	r3, #8
 8006b94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	0e5b      	lsrs	r3, r3, #25
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	0f5b      	lsrs	r3, r3, #29
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	7b3a      	ldrb	r2, [r7, #12]
 8006bba:	4911      	ldr	r1, [pc, #68]	@ (8006c00 <UARTEx_SetNbDataToProcess+0x94>)
 8006bbc:	5c8a      	ldrb	r2, [r1, r2]
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bc2:	7b3a      	ldrb	r2, [r7, #12]
 8006bc4:	490f      	ldr	r1, [pc, #60]	@ (8006c04 <UARTEx_SetNbDataToProcess+0x98>)
 8006bc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	7b7a      	ldrb	r2, [r7, #13]
 8006bd8:	4909      	ldr	r1, [pc, #36]	@ (8006c00 <UARTEx_SetNbDataToProcess+0x94>)
 8006bda:	5c8a      	ldrb	r2, [r1, r2]
 8006bdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006be0:	7b7a      	ldrb	r2, [r7, #13]
 8006be2:	4908      	ldr	r1, [pc, #32]	@ (8006c04 <UARTEx_SetNbDataToProcess+0x98>)
 8006be4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	08007c10 	.word	0x08007c10
 8006c04:	08007c18 	.word	0x08007c18

08006c08 <rand>:
 8006c08:	4b16      	ldr	r3, [pc, #88]	@ (8006c64 <rand+0x5c>)
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	681c      	ldr	r4, [r3, #0]
 8006c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c10:	b9b3      	cbnz	r3, 8006c40 <rand+0x38>
 8006c12:	2018      	movs	r0, #24
 8006c14:	f000 f94c 	bl	8006eb0 <malloc>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6320      	str	r0, [r4, #48]	@ 0x30
 8006c1c:	b920      	cbnz	r0, 8006c28 <rand+0x20>
 8006c1e:	4b12      	ldr	r3, [pc, #72]	@ (8006c68 <rand+0x60>)
 8006c20:	4812      	ldr	r0, [pc, #72]	@ (8006c6c <rand+0x64>)
 8006c22:	2152      	movs	r1, #82	@ 0x52
 8006c24:	f000 f926 	bl	8006e74 <__assert_func>
 8006c28:	4911      	ldr	r1, [pc, #68]	@ (8006c70 <rand+0x68>)
 8006c2a:	4b12      	ldr	r3, [pc, #72]	@ (8006c74 <rand+0x6c>)
 8006c2c:	e9c0 1300 	strd	r1, r3, [r0]
 8006c30:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <rand+0x70>)
 8006c32:	6083      	str	r3, [r0, #8]
 8006c34:	230b      	movs	r3, #11
 8006c36:	8183      	strh	r3, [r0, #12]
 8006c38:	2100      	movs	r1, #0
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006c40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c42:	480e      	ldr	r0, [pc, #56]	@ (8006c7c <rand+0x74>)
 8006c44:	690b      	ldr	r3, [r1, #16]
 8006c46:	694c      	ldr	r4, [r1, #20]
 8006c48:	4a0d      	ldr	r2, [pc, #52]	@ (8006c80 <rand+0x78>)
 8006c4a:	4358      	muls	r0, r3
 8006c4c:	fb02 0004 	mla	r0, r2, r4, r0
 8006c50:	fba3 3202 	umull	r3, r2, r3, r2
 8006c54:	3301      	adds	r3, #1
 8006c56:	eb40 0002 	adc.w	r0, r0, r2
 8006c5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006c5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	20000018 	.word	0x20000018
 8006c68:	08007c20 	.word	0x08007c20
 8006c6c:	08007c37 	.word	0x08007c37
 8006c70:	abcd330e 	.word	0xabcd330e
 8006c74:	e66d1234 	.word	0xe66d1234
 8006c78:	0005deec 	.word	0x0005deec
 8006c7c:	5851f42d 	.word	0x5851f42d
 8006c80:	4c957f2d 	.word	0x4c957f2d

08006c84 <std>:
 8006c84:	2300      	movs	r3, #0
 8006c86:	b510      	push	{r4, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c92:	6083      	str	r3, [r0, #8]
 8006c94:	8181      	strh	r1, [r0, #12]
 8006c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c98:	81c2      	strh	r2, [r0, #14]
 8006c9a:	6183      	str	r3, [r0, #24]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	305c      	adds	r0, #92	@ 0x5c
 8006ca2:	f000 f8b1 	bl	8006e08 <memset>
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <std+0x58>)
 8006ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006caa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <std+0x5c>)
 8006cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce4 <std+0x60>)
 8006cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce8 <std+0x64>)
 8006cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cec <std+0x68>)
 8006cb8:	6224      	str	r4, [r4, #32]
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d006      	beq.n	8006ccc <std+0x48>
 8006cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cc2:	4294      	cmp	r4, r2
 8006cc4:	d002      	beq.n	8006ccc <std+0x48>
 8006cc6:	33d0      	adds	r3, #208	@ 0xd0
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	d105      	bne.n	8006cd8 <std+0x54>
 8006ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f000 b8ca 	b.w	8006e6c <__retarget_lock_init_recursive>
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	08007175 	.word	0x08007175
 8006ce0:	08007197 	.word	0x08007197
 8006ce4:	080071cf 	.word	0x080071cf
 8006ce8:	080071f3 	.word	0x080071f3
 8006cec:	2000027c 	.word	0x2000027c

08006cf0 <stdio_exit_handler>:
 8006cf0:	4a02      	ldr	r2, [pc, #8]	@ (8006cfc <stdio_exit_handler+0xc>)
 8006cf2:	4903      	ldr	r1, [pc, #12]	@ (8006d00 <stdio_exit_handler+0x10>)
 8006cf4:	4803      	ldr	r0, [pc, #12]	@ (8006d04 <stdio_exit_handler+0x14>)
 8006cf6:	f000 b869 	b.w	8006dcc <_fwalk_sglue>
 8006cfa:	bf00      	nop
 8006cfc:	2000000c 	.word	0x2000000c
 8006d00:	0800710d 	.word	0x0800710d
 8006d04:	2000001c 	.word	0x2000001c

08006d08 <cleanup_stdio>:
 8006d08:	6841      	ldr	r1, [r0, #4]
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <cleanup_stdio+0x34>)
 8006d0c:	4299      	cmp	r1, r3
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	d001      	beq.n	8006d18 <cleanup_stdio+0x10>
 8006d14:	f000 f9fa 	bl	800710c <_fflush_r>
 8006d18:	68a1      	ldr	r1, [r4, #8]
 8006d1a:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <cleanup_stdio+0x38>)
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	d002      	beq.n	8006d26 <cleanup_stdio+0x1e>
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 f9f3 	bl	800710c <_fflush_r>
 8006d26:	68e1      	ldr	r1, [r4, #12]
 8006d28:	4b06      	ldr	r3, [pc, #24]	@ (8006d44 <cleanup_stdio+0x3c>)
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d004      	beq.n	8006d38 <cleanup_stdio+0x30>
 8006d2e:	4620      	mov	r0, r4
 8006d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d34:	f000 b9ea 	b.w	800710c <_fflush_r>
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	2000027c 	.word	0x2000027c
 8006d40:	200002e4 	.word	0x200002e4
 8006d44:	2000034c 	.word	0x2000034c

08006d48 <global_stdio_init.part.0>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <global_stdio_init.part.0+0x30>)
 8006d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8006d7c <global_stdio_init.part.0+0x34>)
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d80 <global_stdio_init.part.0+0x38>)
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	4620      	mov	r0, r4
 8006d54:	2200      	movs	r2, #0
 8006d56:	2104      	movs	r1, #4
 8006d58:	f7ff ff94 	bl	8006c84 <std>
 8006d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d60:	2201      	movs	r2, #1
 8006d62:	2109      	movs	r1, #9
 8006d64:	f7ff ff8e 	bl	8006c84 <std>
 8006d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d72:	2112      	movs	r1, #18
 8006d74:	f7ff bf86 	b.w	8006c84 <std>
 8006d78:	200003b4 	.word	0x200003b4
 8006d7c:	2000027c 	.word	0x2000027c
 8006d80:	08006cf1 	.word	0x08006cf1

08006d84 <__sfp_lock_acquire>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__sfp_lock_acquire+0x8>)
 8006d86:	f000 b872 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	200003b9 	.word	0x200003b9

08006d90 <__sfp_lock_release>:
 8006d90:	4801      	ldr	r0, [pc, #4]	@ (8006d98 <__sfp_lock_release+0x8>)
 8006d92:	f000 b86d 	b.w	8006e70 <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	200003b9 	.word	0x200003b9

08006d9c <__sinit>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f7ff fff0 	bl	8006d84 <__sfp_lock_acquire>
 8006da4:	6a23      	ldr	r3, [r4, #32]
 8006da6:	b11b      	cbz	r3, 8006db0 <__sinit+0x14>
 8006da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dac:	f7ff bff0 	b.w	8006d90 <__sfp_lock_release>
 8006db0:	4b04      	ldr	r3, [pc, #16]	@ (8006dc4 <__sinit+0x28>)
 8006db2:	6223      	str	r3, [r4, #32]
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <__sinit+0x2c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f5      	bne.n	8006da8 <__sinit+0xc>
 8006dbc:	f7ff ffc4 	bl	8006d48 <global_stdio_init.part.0>
 8006dc0:	e7f2      	b.n	8006da8 <__sinit+0xc>
 8006dc2:	bf00      	nop
 8006dc4:	08006d09 	.word	0x08006d09
 8006dc8:	200003b4 	.word	0x200003b4

08006dcc <_fwalk_sglue>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	4688      	mov	r8, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8006de0:	d505      	bpl.n	8006dee <_fwalk_sglue+0x22>
 8006de2:	6824      	ldr	r4, [r4, #0]
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	d1f7      	bne.n	8006dd8 <_fwalk_sglue+0xc>
 8006de8:	4630      	mov	r0, r6
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d907      	bls.n	8006e04 <_fwalk_sglue+0x38>
 8006df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	d003      	beq.n	8006e04 <_fwalk_sglue+0x38>
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	4306      	orrs	r6, r0
 8006e04:	3568      	adds	r5, #104	@ 0x68
 8006e06:	e7e9      	b.n	8006ddc <_fwalk_sglue+0x10>

08006e08 <memset>:
 8006e08:	4402      	add	r2, r0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d100      	bne.n	8006e12 <memset+0xa>
 8006e10:	4770      	bx	lr
 8006e12:	f803 1b01 	strb.w	r1, [r3], #1
 8006e16:	e7f9      	b.n	8006e0c <memset+0x4>

08006e18 <__errno>:
 8006e18:	4b01      	ldr	r3, [pc, #4]	@ (8006e20 <__errno+0x8>)
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000018 	.word	0x20000018

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4d0d      	ldr	r5, [pc, #52]	@ (8006e5c <__libc_init_array+0x38>)
 8006e28:	4c0d      	ldr	r4, [pc, #52]	@ (8006e60 <__libc_init_array+0x3c>)
 8006e2a:	1b64      	subs	r4, r4, r5
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	2600      	movs	r6, #0
 8006e30:	42a6      	cmp	r6, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	4d0b      	ldr	r5, [pc, #44]	@ (8006e64 <__libc_init_array+0x40>)
 8006e36:	4c0c      	ldr	r4, [pc, #48]	@ (8006e68 <__libc_init_array+0x44>)
 8006e38:	f000 fec6 	bl	8007bc8 <_init>
 8006e3c:	1b64      	subs	r4, r4, r5
 8006e3e:	10a4      	asrs	r4, r4, #2
 8006e40:	2600      	movs	r6, #0
 8006e42:	42a6      	cmp	r6, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4c:	4798      	blx	r3
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e56:	4798      	blx	r3
 8006e58:	3601      	adds	r6, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	08007d08 	.word	0x08007d08
 8006e60:	08007d08 	.word	0x08007d08
 8006e64:	08007d08 	.word	0x08007d08
 8006e68:	08007d0c 	.word	0x08007d0c

08006e6c <__retarget_lock_init_recursive>:
 8006e6c:	4770      	bx	lr

08006e6e <__retarget_lock_acquire_recursive>:
 8006e6e:	4770      	bx	lr

08006e70 <__retarget_lock_release_recursive>:
 8006e70:	4770      	bx	lr
	...

08006e74 <__assert_func>:
 8006e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e76:	4614      	mov	r4, r2
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <__assert_func+0x2c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4605      	mov	r5, r0
 8006e80:	68d8      	ldr	r0, [r3, #12]
 8006e82:	b954      	cbnz	r4, 8006e9a <__assert_func+0x26>
 8006e84:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <__assert_func+0x30>)
 8006e86:	461c      	mov	r4, r3
 8006e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e8c:	9100      	str	r1, [sp, #0]
 8006e8e:	462b      	mov	r3, r5
 8006e90:	4905      	ldr	r1, [pc, #20]	@ (8006ea8 <__assert_func+0x34>)
 8006e92:	f000 f9b3 	bl	80071fc <fiprintf>
 8006e96:	f000 fa19 	bl	80072cc <abort>
 8006e9a:	4b04      	ldr	r3, [pc, #16]	@ (8006eac <__assert_func+0x38>)
 8006e9c:	e7f4      	b.n	8006e88 <__assert_func+0x14>
 8006e9e:	bf00      	nop
 8006ea0:	20000018 	.word	0x20000018
 8006ea4:	08007cca 	.word	0x08007cca
 8006ea8:	08007c9c 	.word	0x08007c9c
 8006eac:	08007c8f 	.word	0x08007c8f

08006eb0 <malloc>:
 8006eb0:	4b02      	ldr	r3, [pc, #8]	@ (8006ebc <malloc+0xc>)
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	f000 b825 	b.w	8006f04 <_malloc_r>
 8006eba:	bf00      	nop
 8006ebc:	20000018 	.word	0x20000018

08006ec0 <sbrk_aligned>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8006f00 <sbrk_aligned+0x40>)
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	6831      	ldr	r1, [r6, #0]
 8006ec8:	4605      	mov	r5, r0
 8006eca:	b911      	cbnz	r1, 8006ed2 <sbrk_aligned+0x12>
 8006ecc:	f000 f9dc 	bl	8007288 <_sbrk_r>
 8006ed0:	6030      	str	r0, [r6, #0]
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f000 f9d7 	bl	8007288 <_sbrk_r>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	d103      	bne.n	8006ee6 <sbrk_aligned+0x26>
 8006ede:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	bd70      	pop	{r4, r5, r6, pc}
 8006ee6:	1cc4      	adds	r4, r0, #3
 8006ee8:	f024 0403 	bic.w	r4, r4, #3
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d0f8      	beq.n	8006ee2 <sbrk_aligned+0x22>
 8006ef0:	1a21      	subs	r1, r4, r0
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f9c8 	bl	8007288 <_sbrk_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d1f2      	bne.n	8006ee2 <sbrk_aligned+0x22>
 8006efc:	e7ef      	b.n	8006ede <sbrk_aligned+0x1e>
 8006efe:	bf00      	nop
 8006f00:	200003bc 	.word	0x200003bc

08006f04 <_malloc_r>:
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	1ccd      	adds	r5, r1, #3
 8006f0a:	f025 0503 	bic.w	r5, r5, #3
 8006f0e:	3508      	adds	r5, #8
 8006f10:	2d0c      	cmp	r5, #12
 8006f12:	bf38      	it	cc
 8006f14:	250c      	movcc	r5, #12
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	4606      	mov	r6, r0
 8006f1a:	db01      	blt.n	8006f20 <_malloc_r+0x1c>
 8006f1c:	42a9      	cmp	r1, r5
 8006f1e:	d904      	bls.n	8006f2a <_malloc_r+0x26>
 8006f20:	230c      	movs	r3, #12
 8006f22:	6033      	str	r3, [r6, #0]
 8006f24:	2000      	movs	r0, #0
 8006f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007000 <_malloc_r+0xfc>
 8006f2e:	f000 f915 	bl	800715c <__malloc_lock>
 8006f32:	f8d8 3000 	ldr.w	r3, [r8]
 8006f36:	461c      	mov	r4, r3
 8006f38:	bb44      	cbnz	r4, 8006f8c <_malloc_r+0x88>
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff ffbf 	bl	8006ec0 <sbrk_aligned>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	4604      	mov	r4, r0
 8006f46:	d158      	bne.n	8006ffa <_malloc_r+0xf6>
 8006f48:	f8d8 4000 	ldr.w	r4, [r8]
 8006f4c:	4627      	mov	r7, r4
 8006f4e:	2f00      	cmp	r7, #0
 8006f50:	d143      	bne.n	8006fda <_malloc_r+0xd6>
 8006f52:	2c00      	cmp	r4, #0
 8006f54:	d04b      	beq.n	8006fee <_malloc_r+0xea>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	4639      	mov	r1, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	eb04 0903 	add.w	r9, r4, r3
 8006f60:	f000 f992 	bl	8007288 <_sbrk_r>
 8006f64:	4581      	cmp	r9, r0
 8006f66:	d142      	bne.n	8006fee <_malloc_r+0xea>
 8006f68:	6821      	ldr	r1, [r4, #0]
 8006f6a:	1a6d      	subs	r5, r5, r1
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ffa6 	bl	8006ec0 <sbrk_aligned>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d03a      	beq.n	8006fee <_malloc_r+0xea>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	442b      	add	r3, r5
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	bb62      	cbnz	r2, 8006fe0 <_malloc_r+0xdc>
 8006f86:	f8c8 7000 	str.w	r7, [r8]
 8006f8a:	e00f      	b.n	8006fac <_malloc_r+0xa8>
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	1b52      	subs	r2, r2, r5
 8006f90:	d420      	bmi.n	8006fd4 <_malloc_r+0xd0>
 8006f92:	2a0b      	cmp	r2, #11
 8006f94:	d917      	bls.n	8006fc6 <_malloc_r+0xc2>
 8006f96:	1961      	adds	r1, r4, r5
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	6025      	str	r5, [r4, #0]
 8006f9c:	bf18      	it	ne
 8006f9e:	6059      	strne	r1, [r3, #4]
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	bf08      	it	eq
 8006fa4:	f8c8 1000 	streq.w	r1, [r8]
 8006fa8:	5162      	str	r2, [r4, r5]
 8006faa:	604b      	str	r3, [r1, #4]
 8006fac:	4630      	mov	r0, r6
 8006fae:	f000 f8db 	bl	8007168 <__malloc_unlock>
 8006fb2:	f104 000b 	add.w	r0, r4, #11
 8006fb6:	1d23      	adds	r3, r4, #4
 8006fb8:	f020 0007 	bic.w	r0, r0, #7
 8006fbc:	1ac2      	subs	r2, r0, r3
 8006fbe:	bf1c      	itt	ne
 8006fc0:	1a1b      	subne	r3, r3, r0
 8006fc2:	50a3      	strne	r3, [r4, r2]
 8006fc4:	e7af      	b.n	8006f26 <_malloc_r+0x22>
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	bf0c      	ite	eq
 8006fcc:	f8c8 2000 	streq.w	r2, [r8]
 8006fd0:	605a      	strne	r2, [r3, #4]
 8006fd2:	e7eb      	b.n	8006fac <_malloc_r+0xa8>
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	6864      	ldr	r4, [r4, #4]
 8006fd8:	e7ae      	b.n	8006f38 <_malloc_r+0x34>
 8006fda:	463c      	mov	r4, r7
 8006fdc:	687f      	ldr	r7, [r7, #4]
 8006fde:	e7b6      	b.n	8006f4e <_malloc_r+0x4a>
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d1fb      	bne.n	8006fe0 <_malloc_r+0xdc>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6053      	str	r3, [r2, #4]
 8006fec:	e7de      	b.n	8006fac <_malloc_r+0xa8>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f000 f8b8 	bl	8007168 <__malloc_unlock>
 8006ff8:	e794      	b.n	8006f24 <_malloc_r+0x20>
 8006ffa:	6005      	str	r5, [r0, #0]
 8006ffc:	e7d6      	b.n	8006fac <_malloc_r+0xa8>
 8006ffe:	bf00      	nop
 8007000:	200003c0 	.word	0x200003c0

08007004 <__sflush_r>:
 8007004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	0716      	lsls	r6, r2, #28
 800700e:	4605      	mov	r5, r0
 8007010:	460c      	mov	r4, r1
 8007012:	d454      	bmi.n	80070be <__sflush_r+0xba>
 8007014:	684b      	ldr	r3, [r1, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	dc02      	bgt.n	8007020 <__sflush_r+0x1c>
 800701a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	dd48      	ble.n	80070b2 <__sflush_r+0xae>
 8007020:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007022:	2e00      	cmp	r6, #0
 8007024:	d045      	beq.n	80070b2 <__sflush_r+0xae>
 8007026:	2300      	movs	r3, #0
 8007028:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800702c:	682f      	ldr	r7, [r5, #0]
 800702e:	6a21      	ldr	r1, [r4, #32]
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	d030      	beq.n	8007096 <__sflush_r+0x92>
 8007034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	0759      	lsls	r1, r3, #29
 800703a:	d505      	bpl.n	8007048 <__sflush_r+0x44>
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007042:	b10b      	cbz	r3, 8007048 <__sflush_r+0x44>
 8007044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800704c:	6a21      	ldr	r1, [r4, #32]
 800704e:	4628      	mov	r0, r5
 8007050:	47b0      	blx	r6
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	d106      	bne.n	8007066 <__sflush_r+0x62>
 8007058:	6829      	ldr	r1, [r5, #0]
 800705a:	291d      	cmp	r1, #29
 800705c:	d82b      	bhi.n	80070b6 <__sflush_r+0xb2>
 800705e:	4a2a      	ldr	r2, [pc, #168]	@ (8007108 <__sflush_r+0x104>)
 8007060:	410a      	asrs	r2, r1
 8007062:	07d6      	lsls	r6, r2, #31
 8007064:	d427      	bmi.n	80070b6 <__sflush_r+0xb2>
 8007066:	2200      	movs	r2, #0
 8007068:	6062      	str	r2, [r4, #4]
 800706a:	04d9      	lsls	r1, r3, #19
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	6022      	str	r2, [r4, #0]
 8007070:	d504      	bpl.n	800707c <__sflush_r+0x78>
 8007072:	1c42      	adds	r2, r0, #1
 8007074:	d101      	bne.n	800707a <__sflush_r+0x76>
 8007076:	682b      	ldr	r3, [r5, #0]
 8007078:	b903      	cbnz	r3, 800707c <__sflush_r+0x78>
 800707a:	6560      	str	r0, [r4, #84]	@ 0x54
 800707c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800707e:	602f      	str	r7, [r5, #0]
 8007080:	b1b9      	cbz	r1, 80070b2 <__sflush_r+0xae>
 8007082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007086:	4299      	cmp	r1, r3
 8007088:	d002      	beq.n	8007090 <__sflush_r+0x8c>
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f926 	bl	80072dc <_free_r>
 8007090:	2300      	movs	r3, #0
 8007092:	6363      	str	r3, [r4, #52]	@ 0x34
 8007094:	e00d      	b.n	80070b2 <__sflush_r+0xae>
 8007096:	2301      	movs	r3, #1
 8007098:	4628      	mov	r0, r5
 800709a:	47b0      	blx	r6
 800709c:	4602      	mov	r2, r0
 800709e:	1c50      	adds	r0, r2, #1
 80070a0:	d1c9      	bne.n	8007036 <__sflush_r+0x32>
 80070a2:	682b      	ldr	r3, [r5, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0c6      	beq.n	8007036 <__sflush_r+0x32>
 80070a8:	2b1d      	cmp	r3, #29
 80070aa:	d001      	beq.n	80070b0 <__sflush_r+0xac>
 80070ac:	2b16      	cmp	r3, #22
 80070ae:	d11e      	bne.n	80070ee <__sflush_r+0xea>
 80070b0:	602f      	str	r7, [r5, #0]
 80070b2:	2000      	movs	r0, #0
 80070b4:	e022      	b.n	80070fc <__sflush_r+0xf8>
 80070b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	e01b      	b.n	80070f6 <__sflush_r+0xf2>
 80070be:	690f      	ldr	r7, [r1, #16]
 80070c0:	2f00      	cmp	r7, #0
 80070c2:	d0f6      	beq.n	80070b2 <__sflush_r+0xae>
 80070c4:	0793      	lsls	r3, r2, #30
 80070c6:	680e      	ldr	r6, [r1, #0]
 80070c8:	bf08      	it	eq
 80070ca:	694b      	ldreq	r3, [r1, #20]
 80070cc:	600f      	str	r7, [r1, #0]
 80070ce:	bf18      	it	ne
 80070d0:	2300      	movne	r3, #0
 80070d2:	eba6 0807 	sub.w	r8, r6, r7
 80070d6:	608b      	str	r3, [r1, #8]
 80070d8:	f1b8 0f00 	cmp.w	r8, #0
 80070dc:	dde9      	ble.n	80070b2 <__sflush_r+0xae>
 80070de:	6a21      	ldr	r1, [r4, #32]
 80070e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070e2:	4643      	mov	r3, r8
 80070e4:	463a      	mov	r2, r7
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b0      	blx	r6
 80070ea:	2800      	cmp	r0, #0
 80070ec:	dc08      	bgt.n	8007100 <__sflush_r+0xfc>
 80070ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	4407      	add	r7, r0
 8007102:	eba8 0800 	sub.w	r8, r8, r0
 8007106:	e7e7      	b.n	80070d8 <__sflush_r+0xd4>
 8007108:	dfbffffe 	.word	0xdfbffffe

0800710c <_fflush_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	4605      	mov	r5, r0
 8007112:	460c      	mov	r4, r1
 8007114:	b913      	cbnz	r3, 800711c <_fflush_r+0x10>
 8007116:	2500      	movs	r5, #0
 8007118:	4628      	mov	r0, r5
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	b118      	cbz	r0, 8007126 <_fflush_r+0x1a>
 800711e:	6a03      	ldr	r3, [r0, #32]
 8007120:	b90b      	cbnz	r3, 8007126 <_fflush_r+0x1a>
 8007122:	f7ff fe3b 	bl	8006d9c <__sinit>
 8007126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f3      	beq.n	8007116 <_fflush_r+0xa>
 800712e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007130:	07d0      	lsls	r0, r2, #31
 8007132:	d404      	bmi.n	800713e <_fflush_r+0x32>
 8007134:	0599      	lsls	r1, r3, #22
 8007136:	d402      	bmi.n	800713e <_fflush_r+0x32>
 8007138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800713a:	f7ff fe98 	bl	8006e6e <__retarget_lock_acquire_recursive>
 800713e:	4628      	mov	r0, r5
 8007140:	4621      	mov	r1, r4
 8007142:	f7ff ff5f 	bl	8007004 <__sflush_r>
 8007146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007148:	07da      	lsls	r2, r3, #31
 800714a:	4605      	mov	r5, r0
 800714c:	d4e4      	bmi.n	8007118 <_fflush_r+0xc>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	059b      	lsls	r3, r3, #22
 8007152:	d4e1      	bmi.n	8007118 <_fflush_r+0xc>
 8007154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007156:	f7ff fe8b 	bl	8006e70 <__retarget_lock_release_recursive>
 800715a:	e7dd      	b.n	8007118 <_fflush_r+0xc>

0800715c <__malloc_lock>:
 800715c:	4801      	ldr	r0, [pc, #4]	@ (8007164 <__malloc_lock+0x8>)
 800715e:	f7ff be86 	b.w	8006e6e <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	200003b8 	.word	0x200003b8

08007168 <__malloc_unlock>:
 8007168:	4801      	ldr	r0, [pc, #4]	@ (8007170 <__malloc_unlock+0x8>)
 800716a:	f7ff be81 	b.w	8006e70 <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	200003b8 	.word	0x200003b8

08007174 <__sread>:
 8007174:	b510      	push	{r4, lr}
 8007176:	460c      	mov	r4, r1
 8007178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717c:	f000 f872 	bl	8007264 <_read_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	bfab      	itete	ge
 8007184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007186:	89a3      	ldrhlt	r3, [r4, #12]
 8007188:	181b      	addge	r3, r3, r0
 800718a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800718e:	bfac      	ite	ge
 8007190:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007192:	81a3      	strhlt	r3, [r4, #12]
 8007194:	bd10      	pop	{r4, pc}

08007196 <__swrite>:
 8007196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719a:	461f      	mov	r7, r3
 800719c:	898b      	ldrh	r3, [r1, #12]
 800719e:	05db      	lsls	r3, r3, #23
 80071a0:	4605      	mov	r5, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	4616      	mov	r6, r2
 80071a6:	d505      	bpl.n	80071b4 <__swrite+0x1e>
 80071a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ac:	2302      	movs	r3, #2
 80071ae:	2200      	movs	r2, #0
 80071b0:	f000 f846 	bl	8007240 <_lseek_r>
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	4632      	mov	r2, r6
 80071c2:	463b      	mov	r3, r7
 80071c4:	4628      	mov	r0, r5
 80071c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ca:	f000 b86d 	b.w	80072a8 <_write_r>

080071ce <__sseek>:
 80071ce:	b510      	push	{r4, lr}
 80071d0:	460c      	mov	r4, r1
 80071d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d6:	f000 f833 	bl	8007240 <_lseek_r>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	bf15      	itete	ne
 80071e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071ea:	81a3      	strheq	r3, [r4, #12]
 80071ec:	bf18      	it	ne
 80071ee:	81a3      	strhne	r3, [r4, #12]
 80071f0:	bd10      	pop	{r4, pc}

080071f2 <__sclose>:
 80071f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f6:	f000 b813 	b.w	8007220 <_close_r>
	...

080071fc <fiprintf>:
 80071fc:	b40e      	push	{r1, r2, r3}
 80071fe:	b503      	push	{r0, r1, lr}
 8007200:	4601      	mov	r1, r0
 8007202:	ab03      	add	r3, sp, #12
 8007204:	4805      	ldr	r0, [pc, #20]	@ (800721c <fiprintf+0x20>)
 8007206:	f853 2b04 	ldr.w	r2, [r3], #4
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	f000 f8d9 	bl	80073c4 <_vfiprintf_r>
 8007212:	b002      	add	sp, #8
 8007214:	f85d eb04 	ldr.w	lr, [sp], #4
 8007218:	b003      	add	sp, #12
 800721a:	4770      	bx	lr
 800721c:	20000018 	.word	0x20000018

08007220 <_close_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d06      	ldr	r5, [pc, #24]	@ (800723c <_close_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7fa f8e2 	bl	80013f4 <_close>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_close_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_close_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	200003c4 	.word	0x200003c4

08007240 <_lseek_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	@ (8007260 <_lseek_r+0x20>)
 8007244:	4604      	mov	r4, r0
 8007246:	4608      	mov	r0, r1
 8007248:	4611      	mov	r1, r2
 800724a:	2200      	movs	r2, #0
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7fa f8f7 	bl	8001442 <_lseek>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_lseek_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_lseek_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	200003c4 	.word	0x200003c4

08007264 <_read_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	@ (8007284 <_read_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fa f885 	bl	8001382 <_read>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_read_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_read_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200003c4 	.word	0x200003c4

08007288 <_sbrk_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d06      	ldr	r5, [pc, #24]	@ (80072a4 <_sbrk_r+0x1c>)
 800728c:	2300      	movs	r3, #0
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	f7fa f8e2 	bl	800145c <_sbrk>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_sbrk_r+0x1a>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_sbrk_r+0x1a>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	200003c4 	.word	0x200003c4

080072a8 <_write_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	@ (80072c8 <_write_r+0x20>)
 80072ac:	4604      	mov	r4, r0
 80072ae:	4608      	mov	r0, r1
 80072b0:	4611      	mov	r1, r2
 80072b2:	2200      	movs	r2, #0
 80072b4:	602a      	str	r2, [r5, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f7fa f880 	bl	80013bc <_write>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_write_r+0x1e>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_write_r+0x1e>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	200003c4 	.word	0x200003c4

080072cc <abort>:
 80072cc:	b508      	push	{r3, lr}
 80072ce:	2006      	movs	r0, #6
 80072d0:	f000 fc5e 	bl	8007b90 <raise>
 80072d4:	2001      	movs	r0, #1
 80072d6:	f7fa f849 	bl	800136c <_exit>
	...

080072dc <_free_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4605      	mov	r5, r0
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d041      	beq.n	8007368 <_free_r+0x8c>
 80072e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e8:	1f0c      	subs	r4, r1, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfb8      	it	lt
 80072ee:	18e4      	addlt	r4, r4, r3
 80072f0:	f7ff ff34 	bl	800715c <__malloc_lock>
 80072f4:	4a1d      	ldr	r2, [pc, #116]	@ (800736c <_free_r+0x90>)
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	b933      	cbnz	r3, 8007308 <_free_r+0x2c>
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6014      	str	r4, [r2, #0]
 80072fe:	4628      	mov	r0, r5
 8007300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007304:	f7ff bf30 	b.w	8007168 <__malloc_unlock>
 8007308:	42a3      	cmp	r3, r4
 800730a:	d908      	bls.n	800731e <_free_r+0x42>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	1821      	adds	r1, r4, r0
 8007310:	428b      	cmp	r3, r1
 8007312:	bf01      	itttt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	1809      	addeq	r1, r1, r0
 800731a:	6021      	streq	r1, [r4, #0]
 800731c:	e7ed      	b.n	80072fa <_free_r+0x1e>
 800731e:	461a      	mov	r2, r3
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b10b      	cbz	r3, 8007328 <_free_r+0x4c>
 8007324:	42a3      	cmp	r3, r4
 8007326:	d9fa      	bls.n	800731e <_free_r+0x42>
 8007328:	6811      	ldr	r1, [r2, #0]
 800732a:	1850      	adds	r0, r2, r1
 800732c:	42a0      	cmp	r0, r4
 800732e:	d10b      	bne.n	8007348 <_free_r+0x6c>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	4401      	add	r1, r0
 8007334:	1850      	adds	r0, r2, r1
 8007336:	4283      	cmp	r3, r0
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	d1e0      	bne.n	80072fe <_free_r+0x22>
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	6053      	str	r3, [r2, #4]
 8007342:	4408      	add	r0, r1
 8007344:	6010      	str	r0, [r2, #0]
 8007346:	e7da      	b.n	80072fe <_free_r+0x22>
 8007348:	d902      	bls.n	8007350 <_free_r+0x74>
 800734a:	230c      	movs	r3, #12
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	e7d6      	b.n	80072fe <_free_r+0x22>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	1821      	adds	r1, r4, r0
 8007354:	428b      	cmp	r3, r1
 8007356:	bf04      	itt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	6063      	str	r3, [r4, #4]
 800735e:	bf04      	itt	eq
 8007360:	1809      	addeq	r1, r1, r0
 8007362:	6021      	streq	r1, [r4, #0]
 8007364:	6054      	str	r4, [r2, #4]
 8007366:	e7ca      	b.n	80072fe <_free_r+0x22>
 8007368:	bd38      	pop	{r3, r4, r5, pc}
 800736a:	bf00      	nop
 800736c:	200003c0 	.word	0x200003c0

08007370 <__sfputc_r>:
 8007370:	6893      	ldr	r3, [r2, #8]
 8007372:	3b01      	subs	r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	b410      	push	{r4}
 8007378:	6093      	str	r3, [r2, #8]
 800737a:	da08      	bge.n	800738e <__sfputc_r+0x1e>
 800737c:	6994      	ldr	r4, [r2, #24]
 800737e:	42a3      	cmp	r3, r4
 8007380:	db01      	blt.n	8007386 <__sfputc_r+0x16>
 8007382:	290a      	cmp	r1, #10
 8007384:	d103      	bne.n	800738e <__sfputc_r+0x1e>
 8007386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800738a:	f000 bac1 	b.w	8007910 <__swbuf_r>
 800738e:	6813      	ldr	r3, [r2, #0]
 8007390:	1c58      	adds	r0, r3, #1
 8007392:	6010      	str	r0, [r2, #0]
 8007394:	7019      	strb	r1, [r3, #0]
 8007396:	4608      	mov	r0, r1
 8007398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800739c:	4770      	bx	lr

0800739e <__sfputs_r>:
 800739e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a0:	4606      	mov	r6, r0
 80073a2:	460f      	mov	r7, r1
 80073a4:	4614      	mov	r4, r2
 80073a6:	18d5      	adds	r5, r2, r3
 80073a8:	42ac      	cmp	r4, r5
 80073aa:	d101      	bne.n	80073b0 <__sfputs_r+0x12>
 80073ac:	2000      	movs	r0, #0
 80073ae:	e007      	b.n	80073c0 <__sfputs_r+0x22>
 80073b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b4:	463a      	mov	r2, r7
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff ffda 	bl	8007370 <__sfputc_r>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d1f3      	bne.n	80073a8 <__sfputs_r+0xa>
 80073c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073c4 <_vfiprintf_r>:
 80073c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	460d      	mov	r5, r1
 80073ca:	b09d      	sub	sp, #116	@ 0x74
 80073cc:	4614      	mov	r4, r2
 80073ce:	4698      	mov	r8, r3
 80073d0:	4606      	mov	r6, r0
 80073d2:	b118      	cbz	r0, 80073dc <_vfiprintf_r+0x18>
 80073d4:	6a03      	ldr	r3, [r0, #32]
 80073d6:	b90b      	cbnz	r3, 80073dc <_vfiprintf_r+0x18>
 80073d8:	f7ff fce0 	bl	8006d9c <__sinit>
 80073dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073de:	07d9      	lsls	r1, r3, #31
 80073e0:	d405      	bmi.n	80073ee <_vfiprintf_r+0x2a>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	059a      	lsls	r2, r3, #22
 80073e6:	d402      	bmi.n	80073ee <_vfiprintf_r+0x2a>
 80073e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073ea:	f7ff fd40 	bl	8006e6e <__retarget_lock_acquire_recursive>
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	071b      	lsls	r3, r3, #28
 80073f2:	d501      	bpl.n	80073f8 <_vfiprintf_r+0x34>
 80073f4:	692b      	ldr	r3, [r5, #16]
 80073f6:	b99b      	cbnz	r3, 8007420 <_vfiprintf_r+0x5c>
 80073f8:	4629      	mov	r1, r5
 80073fa:	4630      	mov	r0, r6
 80073fc:	f000 fac6 	bl	800798c <__swsetup_r>
 8007400:	b170      	cbz	r0, 8007420 <_vfiprintf_r+0x5c>
 8007402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007404:	07dc      	lsls	r4, r3, #31
 8007406:	d504      	bpl.n	8007412 <_vfiprintf_r+0x4e>
 8007408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800740c:	b01d      	add	sp, #116	@ 0x74
 800740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	0598      	lsls	r0, r3, #22
 8007416:	d4f7      	bmi.n	8007408 <_vfiprintf_r+0x44>
 8007418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800741a:	f7ff fd29 	bl	8006e70 <__retarget_lock_release_recursive>
 800741e:	e7f3      	b.n	8007408 <_vfiprintf_r+0x44>
 8007420:	2300      	movs	r3, #0
 8007422:	9309      	str	r3, [sp, #36]	@ 0x24
 8007424:	2320      	movs	r3, #32
 8007426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800742a:	f8cd 800c 	str.w	r8, [sp, #12]
 800742e:	2330      	movs	r3, #48	@ 0x30
 8007430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075e0 <_vfiprintf_r+0x21c>
 8007434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007438:	f04f 0901 	mov.w	r9, #1
 800743c:	4623      	mov	r3, r4
 800743e:	469a      	mov	sl, r3
 8007440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007444:	b10a      	cbz	r2, 800744a <_vfiprintf_r+0x86>
 8007446:	2a25      	cmp	r2, #37	@ 0x25
 8007448:	d1f9      	bne.n	800743e <_vfiprintf_r+0x7a>
 800744a:	ebba 0b04 	subs.w	fp, sl, r4
 800744e:	d00b      	beq.n	8007468 <_vfiprintf_r+0xa4>
 8007450:	465b      	mov	r3, fp
 8007452:	4622      	mov	r2, r4
 8007454:	4629      	mov	r1, r5
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ffa1 	bl	800739e <__sfputs_r>
 800745c:	3001      	adds	r0, #1
 800745e:	f000 80a7 	beq.w	80075b0 <_vfiprintf_r+0x1ec>
 8007462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007464:	445a      	add	r2, fp
 8007466:	9209      	str	r2, [sp, #36]	@ 0x24
 8007468:	f89a 3000 	ldrb.w	r3, [sl]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 809f 	beq.w	80075b0 <_vfiprintf_r+0x1ec>
 8007472:	2300      	movs	r3, #0
 8007474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800747c:	f10a 0a01 	add.w	sl, sl, #1
 8007480:	9304      	str	r3, [sp, #16]
 8007482:	9307      	str	r3, [sp, #28]
 8007484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007488:	931a      	str	r3, [sp, #104]	@ 0x68
 800748a:	4654      	mov	r4, sl
 800748c:	2205      	movs	r2, #5
 800748e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007492:	4853      	ldr	r0, [pc, #332]	@ (80075e0 <_vfiprintf_r+0x21c>)
 8007494:	f7f8 fec4 	bl	8000220 <memchr>
 8007498:	9a04      	ldr	r2, [sp, #16]
 800749a:	b9d8      	cbnz	r0, 80074d4 <_vfiprintf_r+0x110>
 800749c:	06d1      	lsls	r1, r2, #27
 800749e:	bf44      	itt	mi
 80074a0:	2320      	movmi	r3, #32
 80074a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a6:	0713      	lsls	r3, r2, #28
 80074a8:	bf44      	itt	mi
 80074aa:	232b      	movmi	r3, #43	@ 0x2b
 80074ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b0:	f89a 3000 	ldrb.w	r3, [sl]
 80074b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b6:	d015      	beq.n	80074e4 <_vfiprintf_r+0x120>
 80074b8:	9a07      	ldr	r2, [sp, #28]
 80074ba:	4654      	mov	r4, sl
 80074bc:	2000      	movs	r0, #0
 80074be:	f04f 0c0a 	mov.w	ip, #10
 80074c2:	4621      	mov	r1, r4
 80074c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074c8:	3b30      	subs	r3, #48	@ 0x30
 80074ca:	2b09      	cmp	r3, #9
 80074cc:	d94b      	bls.n	8007566 <_vfiprintf_r+0x1a2>
 80074ce:	b1b0      	cbz	r0, 80074fe <_vfiprintf_r+0x13a>
 80074d0:	9207      	str	r2, [sp, #28]
 80074d2:	e014      	b.n	80074fe <_vfiprintf_r+0x13a>
 80074d4:	eba0 0308 	sub.w	r3, r0, r8
 80074d8:	fa09 f303 	lsl.w	r3, r9, r3
 80074dc:	4313      	orrs	r3, r2
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	46a2      	mov	sl, r4
 80074e2:	e7d2      	b.n	800748a <_vfiprintf_r+0xc6>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	1d19      	adds	r1, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	9103      	str	r1, [sp, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfbb      	ittet	lt
 80074f0:	425b      	neglt	r3, r3
 80074f2:	f042 0202 	orrlt.w	r2, r2, #2
 80074f6:	9307      	strge	r3, [sp, #28]
 80074f8:	9307      	strlt	r3, [sp, #28]
 80074fa:	bfb8      	it	lt
 80074fc:	9204      	strlt	r2, [sp, #16]
 80074fe:	7823      	ldrb	r3, [r4, #0]
 8007500:	2b2e      	cmp	r3, #46	@ 0x2e
 8007502:	d10a      	bne.n	800751a <_vfiprintf_r+0x156>
 8007504:	7863      	ldrb	r3, [r4, #1]
 8007506:	2b2a      	cmp	r3, #42	@ 0x2a
 8007508:	d132      	bne.n	8007570 <_vfiprintf_r+0x1ac>
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	9203      	str	r2, [sp, #12]
 8007512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007516:	3402      	adds	r4, #2
 8007518:	9305      	str	r3, [sp, #20]
 800751a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075f0 <_vfiprintf_r+0x22c>
 800751e:	7821      	ldrb	r1, [r4, #0]
 8007520:	2203      	movs	r2, #3
 8007522:	4650      	mov	r0, sl
 8007524:	f7f8 fe7c 	bl	8000220 <memchr>
 8007528:	b138      	cbz	r0, 800753a <_vfiprintf_r+0x176>
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	eba0 000a 	sub.w	r0, r0, sl
 8007530:	2240      	movs	r2, #64	@ 0x40
 8007532:	4082      	lsls	r2, r0
 8007534:	4313      	orrs	r3, r2
 8007536:	3401      	adds	r4, #1
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753e:	4829      	ldr	r0, [pc, #164]	@ (80075e4 <_vfiprintf_r+0x220>)
 8007540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007544:	2206      	movs	r2, #6
 8007546:	f7f8 fe6b 	bl	8000220 <memchr>
 800754a:	2800      	cmp	r0, #0
 800754c:	d03f      	beq.n	80075ce <_vfiprintf_r+0x20a>
 800754e:	4b26      	ldr	r3, [pc, #152]	@ (80075e8 <_vfiprintf_r+0x224>)
 8007550:	bb1b      	cbnz	r3, 800759a <_vfiprintf_r+0x1d6>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	3307      	adds	r3, #7
 8007556:	f023 0307 	bic.w	r3, r3, #7
 800755a:	3308      	adds	r3, #8
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007560:	443b      	add	r3, r7
 8007562:	9309      	str	r3, [sp, #36]	@ 0x24
 8007564:	e76a      	b.n	800743c <_vfiprintf_r+0x78>
 8007566:	fb0c 3202 	mla	r2, ip, r2, r3
 800756a:	460c      	mov	r4, r1
 800756c:	2001      	movs	r0, #1
 800756e:	e7a8      	b.n	80074c2 <_vfiprintf_r+0xfe>
 8007570:	2300      	movs	r3, #0
 8007572:	3401      	adds	r4, #1
 8007574:	9305      	str	r3, [sp, #20]
 8007576:	4619      	mov	r1, r3
 8007578:	f04f 0c0a 	mov.w	ip, #10
 800757c:	4620      	mov	r0, r4
 800757e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007582:	3a30      	subs	r2, #48	@ 0x30
 8007584:	2a09      	cmp	r2, #9
 8007586:	d903      	bls.n	8007590 <_vfiprintf_r+0x1cc>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0c6      	beq.n	800751a <_vfiprintf_r+0x156>
 800758c:	9105      	str	r1, [sp, #20]
 800758e:	e7c4      	b.n	800751a <_vfiprintf_r+0x156>
 8007590:	fb0c 2101 	mla	r1, ip, r1, r2
 8007594:	4604      	mov	r4, r0
 8007596:	2301      	movs	r3, #1
 8007598:	e7f0      	b.n	800757c <_vfiprintf_r+0x1b8>
 800759a:	ab03      	add	r3, sp, #12
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	462a      	mov	r2, r5
 80075a0:	4b12      	ldr	r3, [pc, #72]	@ (80075ec <_vfiprintf_r+0x228>)
 80075a2:	a904      	add	r1, sp, #16
 80075a4:	4630      	mov	r0, r6
 80075a6:	f3af 8000 	nop.w
 80075aa:	4607      	mov	r7, r0
 80075ac:	1c78      	adds	r0, r7, #1
 80075ae:	d1d6      	bne.n	800755e <_vfiprintf_r+0x19a>
 80075b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075b2:	07d9      	lsls	r1, r3, #31
 80075b4:	d405      	bmi.n	80075c2 <_vfiprintf_r+0x1fe>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	059a      	lsls	r2, r3, #22
 80075ba:	d402      	bmi.n	80075c2 <_vfiprintf_r+0x1fe>
 80075bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075be:	f7ff fc57 	bl	8006e70 <__retarget_lock_release_recursive>
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	065b      	lsls	r3, r3, #25
 80075c6:	f53f af1f 	bmi.w	8007408 <_vfiprintf_r+0x44>
 80075ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075cc:	e71e      	b.n	800740c <_vfiprintf_r+0x48>
 80075ce:	ab03      	add	r3, sp, #12
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	462a      	mov	r2, r5
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <_vfiprintf_r+0x228>)
 80075d6:	a904      	add	r1, sp, #16
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 f879 	bl	80076d0 <_printf_i>
 80075de:	e7e4      	b.n	80075aa <_vfiprintf_r+0x1e6>
 80075e0:	08007ccb 	.word	0x08007ccb
 80075e4:	08007cd5 	.word	0x08007cd5
 80075e8:	00000000 	.word	0x00000000
 80075ec:	0800739f 	.word	0x0800739f
 80075f0:	08007cd1 	.word	0x08007cd1

080075f4 <_printf_common>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	4616      	mov	r6, r2
 80075fa:	4698      	mov	r8, r3
 80075fc:	688a      	ldr	r2, [r1, #8]
 80075fe:	690b      	ldr	r3, [r1, #16]
 8007600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007604:	4293      	cmp	r3, r2
 8007606:	bfb8      	it	lt
 8007608:	4613      	movlt	r3, r2
 800760a:	6033      	str	r3, [r6, #0]
 800760c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007610:	4607      	mov	r7, r0
 8007612:	460c      	mov	r4, r1
 8007614:	b10a      	cbz	r2, 800761a <_printf_common+0x26>
 8007616:	3301      	adds	r3, #1
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	0699      	lsls	r1, r3, #26
 800761e:	bf42      	ittt	mi
 8007620:	6833      	ldrmi	r3, [r6, #0]
 8007622:	3302      	addmi	r3, #2
 8007624:	6033      	strmi	r3, [r6, #0]
 8007626:	6825      	ldr	r5, [r4, #0]
 8007628:	f015 0506 	ands.w	r5, r5, #6
 800762c:	d106      	bne.n	800763c <_printf_common+0x48>
 800762e:	f104 0a19 	add.w	sl, r4, #25
 8007632:	68e3      	ldr	r3, [r4, #12]
 8007634:	6832      	ldr	r2, [r6, #0]
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	42ab      	cmp	r3, r5
 800763a:	dc26      	bgt.n	800768a <_printf_common+0x96>
 800763c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	3b00      	subs	r3, #0
 8007644:	bf18      	it	ne
 8007646:	2301      	movne	r3, #1
 8007648:	0692      	lsls	r2, r2, #26
 800764a:	d42b      	bmi.n	80076a4 <_printf_common+0xb0>
 800764c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007650:	4641      	mov	r1, r8
 8007652:	4638      	mov	r0, r7
 8007654:	47c8      	blx	r9
 8007656:	3001      	adds	r0, #1
 8007658:	d01e      	beq.n	8007698 <_printf_common+0xa4>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	6922      	ldr	r2, [r4, #16]
 800765e:	f003 0306 	and.w	r3, r3, #6
 8007662:	2b04      	cmp	r3, #4
 8007664:	bf02      	ittt	eq
 8007666:	68e5      	ldreq	r5, [r4, #12]
 8007668:	6833      	ldreq	r3, [r6, #0]
 800766a:	1aed      	subeq	r5, r5, r3
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	bf0c      	ite	eq
 8007670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007674:	2500      	movne	r5, #0
 8007676:	4293      	cmp	r3, r2
 8007678:	bfc4      	itt	gt
 800767a:	1a9b      	subgt	r3, r3, r2
 800767c:	18ed      	addgt	r5, r5, r3
 800767e:	2600      	movs	r6, #0
 8007680:	341a      	adds	r4, #26
 8007682:	42b5      	cmp	r5, r6
 8007684:	d11a      	bne.n	80076bc <_printf_common+0xc8>
 8007686:	2000      	movs	r0, #0
 8007688:	e008      	b.n	800769c <_printf_common+0xa8>
 800768a:	2301      	movs	r3, #1
 800768c:	4652      	mov	r2, sl
 800768e:	4641      	mov	r1, r8
 8007690:	4638      	mov	r0, r7
 8007692:	47c8      	blx	r9
 8007694:	3001      	adds	r0, #1
 8007696:	d103      	bne.n	80076a0 <_printf_common+0xac>
 8007698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800769c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a0:	3501      	adds	r5, #1
 80076a2:	e7c6      	b.n	8007632 <_printf_common+0x3e>
 80076a4:	18e1      	adds	r1, r4, r3
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	2030      	movs	r0, #48	@ 0x30
 80076aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ae:	4422      	add	r2, r4
 80076b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076b8:	3302      	adds	r3, #2
 80076ba:	e7c7      	b.n	800764c <_printf_common+0x58>
 80076bc:	2301      	movs	r3, #1
 80076be:	4622      	mov	r2, r4
 80076c0:	4641      	mov	r1, r8
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c8      	blx	r9
 80076c6:	3001      	adds	r0, #1
 80076c8:	d0e6      	beq.n	8007698 <_printf_common+0xa4>
 80076ca:	3601      	adds	r6, #1
 80076cc:	e7d9      	b.n	8007682 <_printf_common+0x8e>
	...

080076d0 <_printf_i>:
 80076d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	7e0f      	ldrb	r7, [r1, #24]
 80076d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076d8:	2f78      	cmp	r7, #120	@ 0x78
 80076da:	4691      	mov	r9, r2
 80076dc:	4680      	mov	r8, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	469a      	mov	sl, r3
 80076e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076e6:	d807      	bhi.n	80076f8 <_printf_i+0x28>
 80076e8:	2f62      	cmp	r7, #98	@ 0x62
 80076ea:	d80a      	bhi.n	8007702 <_printf_i+0x32>
 80076ec:	2f00      	cmp	r7, #0
 80076ee:	f000 80d2 	beq.w	8007896 <_printf_i+0x1c6>
 80076f2:	2f58      	cmp	r7, #88	@ 0x58
 80076f4:	f000 80b9 	beq.w	800786a <_printf_i+0x19a>
 80076f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007700:	e03a      	b.n	8007778 <_printf_i+0xa8>
 8007702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007706:	2b15      	cmp	r3, #21
 8007708:	d8f6      	bhi.n	80076f8 <_printf_i+0x28>
 800770a:	a101      	add	r1, pc, #4	@ (adr r1, 8007710 <_printf_i+0x40>)
 800770c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007710:	08007769 	.word	0x08007769
 8007714:	0800777d 	.word	0x0800777d
 8007718:	080076f9 	.word	0x080076f9
 800771c:	080076f9 	.word	0x080076f9
 8007720:	080076f9 	.word	0x080076f9
 8007724:	080076f9 	.word	0x080076f9
 8007728:	0800777d 	.word	0x0800777d
 800772c:	080076f9 	.word	0x080076f9
 8007730:	080076f9 	.word	0x080076f9
 8007734:	080076f9 	.word	0x080076f9
 8007738:	080076f9 	.word	0x080076f9
 800773c:	0800787d 	.word	0x0800787d
 8007740:	080077a7 	.word	0x080077a7
 8007744:	08007837 	.word	0x08007837
 8007748:	080076f9 	.word	0x080076f9
 800774c:	080076f9 	.word	0x080076f9
 8007750:	0800789f 	.word	0x0800789f
 8007754:	080076f9 	.word	0x080076f9
 8007758:	080077a7 	.word	0x080077a7
 800775c:	080076f9 	.word	0x080076f9
 8007760:	080076f9 	.word	0x080076f9
 8007764:	0800783f 	.word	0x0800783f
 8007768:	6833      	ldr	r3, [r6, #0]
 800776a:	1d1a      	adds	r2, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6032      	str	r2, [r6, #0]
 8007770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007778:	2301      	movs	r3, #1
 800777a:	e09d      	b.n	80078b8 <_printf_i+0x1e8>
 800777c:	6833      	ldr	r3, [r6, #0]
 800777e:	6820      	ldr	r0, [r4, #0]
 8007780:	1d19      	adds	r1, r3, #4
 8007782:	6031      	str	r1, [r6, #0]
 8007784:	0606      	lsls	r6, r0, #24
 8007786:	d501      	bpl.n	800778c <_printf_i+0xbc>
 8007788:	681d      	ldr	r5, [r3, #0]
 800778a:	e003      	b.n	8007794 <_printf_i+0xc4>
 800778c:	0645      	lsls	r5, r0, #25
 800778e:	d5fb      	bpl.n	8007788 <_printf_i+0xb8>
 8007790:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007794:	2d00      	cmp	r5, #0
 8007796:	da03      	bge.n	80077a0 <_printf_i+0xd0>
 8007798:	232d      	movs	r3, #45	@ 0x2d
 800779a:	426d      	negs	r5, r5
 800779c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a0:	4859      	ldr	r0, [pc, #356]	@ (8007908 <_printf_i+0x238>)
 80077a2:	230a      	movs	r3, #10
 80077a4:	e011      	b.n	80077ca <_printf_i+0xfa>
 80077a6:	6821      	ldr	r1, [r4, #0]
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	0608      	lsls	r0, r1, #24
 80077ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80077b0:	d402      	bmi.n	80077b8 <_printf_i+0xe8>
 80077b2:	0649      	lsls	r1, r1, #25
 80077b4:	bf48      	it	mi
 80077b6:	b2ad      	uxthmi	r5, r5
 80077b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077ba:	4853      	ldr	r0, [pc, #332]	@ (8007908 <_printf_i+0x238>)
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	bf14      	ite	ne
 80077c0:	230a      	movne	r3, #10
 80077c2:	2308      	moveq	r3, #8
 80077c4:	2100      	movs	r1, #0
 80077c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ca:	6866      	ldr	r6, [r4, #4]
 80077cc:	60a6      	str	r6, [r4, #8]
 80077ce:	2e00      	cmp	r6, #0
 80077d0:	bfa2      	ittt	ge
 80077d2:	6821      	ldrge	r1, [r4, #0]
 80077d4:	f021 0104 	bicge.w	r1, r1, #4
 80077d8:	6021      	strge	r1, [r4, #0]
 80077da:	b90d      	cbnz	r5, 80077e0 <_printf_i+0x110>
 80077dc:	2e00      	cmp	r6, #0
 80077de:	d04b      	beq.n	8007878 <_printf_i+0x1a8>
 80077e0:	4616      	mov	r6, r2
 80077e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80077e6:	fb03 5711 	mls	r7, r3, r1, r5
 80077ea:	5dc7      	ldrb	r7, [r0, r7]
 80077ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f0:	462f      	mov	r7, r5
 80077f2:	42bb      	cmp	r3, r7
 80077f4:	460d      	mov	r5, r1
 80077f6:	d9f4      	bls.n	80077e2 <_printf_i+0x112>
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d10b      	bne.n	8007814 <_printf_i+0x144>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	07df      	lsls	r7, r3, #31
 8007800:	d508      	bpl.n	8007814 <_printf_i+0x144>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	6861      	ldr	r1, [r4, #4]
 8007806:	4299      	cmp	r1, r3
 8007808:	bfde      	ittt	le
 800780a:	2330      	movle	r3, #48	@ 0x30
 800780c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007810:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007814:	1b92      	subs	r2, r2, r6
 8007816:	6122      	str	r2, [r4, #16]
 8007818:	f8cd a000 	str.w	sl, [sp]
 800781c:	464b      	mov	r3, r9
 800781e:	aa03      	add	r2, sp, #12
 8007820:	4621      	mov	r1, r4
 8007822:	4640      	mov	r0, r8
 8007824:	f7ff fee6 	bl	80075f4 <_printf_common>
 8007828:	3001      	adds	r0, #1
 800782a:	d14a      	bne.n	80078c2 <_printf_i+0x1f2>
 800782c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007830:	b004      	add	sp, #16
 8007832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	f043 0320 	orr.w	r3, r3, #32
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	4833      	ldr	r0, [pc, #204]	@ (800790c <_printf_i+0x23c>)
 8007840:	2778      	movs	r7, #120	@ 0x78
 8007842:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	6831      	ldr	r1, [r6, #0]
 800784a:	061f      	lsls	r7, r3, #24
 800784c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007850:	d402      	bmi.n	8007858 <_printf_i+0x188>
 8007852:	065f      	lsls	r7, r3, #25
 8007854:	bf48      	it	mi
 8007856:	b2ad      	uxthmi	r5, r5
 8007858:	6031      	str	r1, [r6, #0]
 800785a:	07d9      	lsls	r1, r3, #31
 800785c:	bf44      	itt	mi
 800785e:	f043 0320 	orrmi.w	r3, r3, #32
 8007862:	6023      	strmi	r3, [r4, #0]
 8007864:	b11d      	cbz	r5, 800786e <_printf_i+0x19e>
 8007866:	2310      	movs	r3, #16
 8007868:	e7ac      	b.n	80077c4 <_printf_i+0xf4>
 800786a:	4827      	ldr	r0, [pc, #156]	@ (8007908 <_printf_i+0x238>)
 800786c:	e7e9      	b.n	8007842 <_printf_i+0x172>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	f023 0320 	bic.w	r3, r3, #32
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	e7f6      	b.n	8007866 <_printf_i+0x196>
 8007878:	4616      	mov	r6, r2
 800787a:	e7bd      	b.n	80077f8 <_printf_i+0x128>
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	6825      	ldr	r5, [r4, #0]
 8007880:	6961      	ldr	r1, [r4, #20]
 8007882:	1d18      	adds	r0, r3, #4
 8007884:	6030      	str	r0, [r6, #0]
 8007886:	062e      	lsls	r6, r5, #24
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	d501      	bpl.n	8007890 <_printf_i+0x1c0>
 800788c:	6019      	str	r1, [r3, #0]
 800788e:	e002      	b.n	8007896 <_printf_i+0x1c6>
 8007890:	0668      	lsls	r0, r5, #25
 8007892:	d5fb      	bpl.n	800788c <_printf_i+0x1bc>
 8007894:	8019      	strh	r1, [r3, #0]
 8007896:	2300      	movs	r3, #0
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	4616      	mov	r6, r2
 800789c:	e7bc      	b.n	8007818 <_printf_i+0x148>
 800789e:	6833      	ldr	r3, [r6, #0]
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	6032      	str	r2, [r6, #0]
 80078a4:	681e      	ldr	r6, [r3, #0]
 80078a6:	6862      	ldr	r2, [r4, #4]
 80078a8:	2100      	movs	r1, #0
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7f8 fcb8 	bl	8000220 <memchr>
 80078b0:	b108      	cbz	r0, 80078b6 <_printf_i+0x1e6>
 80078b2:	1b80      	subs	r0, r0, r6
 80078b4:	6060      	str	r0, [r4, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	2300      	movs	r3, #0
 80078bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c0:	e7aa      	b.n	8007818 <_printf_i+0x148>
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	4632      	mov	r2, r6
 80078c6:	4649      	mov	r1, r9
 80078c8:	4640      	mov	r0, r8
 80078ca:	47d0      	blx	sl
 80078cc:	3001      	adds	r0, #1
 80078ce:	d0ad      	beq.n	800782c <_printf_i+0x15c>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	079b      	lsls	r3, r3, #30
 80078d4:	d413      	bmi.n	80078fe <_printf_i+0x22e>
 80078d6:	68e0      	ldr	r0, [r4, #12]
 80078d8:	9b03      	ldr	r3, [sp, #12]
 80078da:	4298      	cmp	r0, r3
 80078dc:	bfb8      	it	lt
 80078de:	4618      	movlt	r0, r3
 80078e0:	e7a6      	b.n	8007830 <_printf_i+0x160>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4632      	mov	r2, r6
 80078e6:	4649      	mov	r1, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	47d0      	blx	sl
 80078ec:	3001      	adds	r0, #1
 80078ee:	d09d      	beq.n	800782c <_printf_i+0x15c>
 80078f0:	3501      	adds	r5, #1
 80078f2:	68e3      	ldr	r3, [r4, #12]
 80078f4:	9903      	ldr	r1, [sp, #12]
 80078f6:	1a5b      	subs	r3, r3, r1
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	dcf2      	bgt.n	80078e2 <_printf_i+0x212>
 80078fc:	e7eb      	b.n	80078d6 <_printf_i+0x206>
 80078fe:	2500      	movs	r5, #0
 8007900:	f104 0619 	add.w	r6, r4, #25
 8007904:	e7f5      	b.n	80078f2 <_printf_i+0x222>
 8007906:	bf00      	nop
 8007908:	08007cdc 	.word	0x08007cdc
 800790c:	08007ced 	.word	0x08007ced

08007910 <__swbuf_r>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	460e      	mov	r6, r1
 8007914:	4614      	mov	r4, r2
 8007916:	4605      	mov	r5, r0
 8007918:	b118      	cbz	r0, 8007922 <__swbuf_r+0x12>
 800791a:	6a03      	ldr	r3, [r0, #32]
 800791c:	b90b      	cbnz	r3, 8007922 <__swbuf_r+0x12>
 800791e:	f7ff fa3d 	bl	8006d9c <__sinit>
 8007922:	69a3      	ldr	r3, [r4, #24]
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	071a      	lsls	r2, r3, #28
 800792a:	d501      	bpl.n	8007930 <__swbuf_r+0x20>
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	b943      	cbnz	r3, 8007942 <__swbuf_r+0x32>
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 f82a 	bl	800798c <__swsetup_r>
 8007938:	b118      	cbz	r0, 8007942 <__swbuf_r+0x32>
 800793a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800793e:	4638      	mov	r0, r7
 8007940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	1a98      	subs	r0, r3, r2
 8007948:	6963      	ldr	r3, [r4, #20]
 800794a:	b2f6      	uxtb	r6, r6
 800794c:	4283      	cmp	r3, r0
 800794e:	4637      	mov	r7, r6
 8007950:	dc05      	bgt.n	800795e <__swbuf_r+0x4e>
 8007952:	4621      	mov	r1, r4
 8007954:	4628      	mov	r0, r5
 8007956:	f7ff fbd9 	bl	800710c <_fflush_r>
 800795a:	2800      	cmp	r0, #0
 800795c:	d1ed      	bne.n	800793a <__swbuf_r+0x2a>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	3b01      	subs	r3, #1
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	701e      	strb	r6, [r3, #0]
 800796c:	6962      	ldr	r2, [r4, #20]
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	429a      	cmp	r2, r3
 8007972:	d004      	beq.n	800797e <__swbuf_r+0x6e>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	07db      	lsls	r3, r3, #31
 8007978:	d5e1      	bpl.n	800793e <__swbuf_r+0x2e>
 800797a:	2e0a      	cmp	r6, #10
 800797c:	d1df      	bne.n	800793e <__swbuf_r+0x2e>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff fbc3 	bl	800710c <_fflush_r>
 8007986:	2800      	cmp	r0, #0
 8007988:	d0d9      	beq.n	800793e <__swbuf_r+0x2e>
 800798a:	e7d6      	b.n	800793a <__swbuf_r+0x2a>

0800798c <__swsetup_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4b29      	ldr	r3, [pc, #164]	@ (8007a34 <__swsetup_r+0xa8>)
 8007990:	4605      	mov	r5, r0
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	460c      	mov	r4, r1
 8007996:	b118      	cbz	r0, 80079a0 <__swsetup_r+0x14>
 8007998:	6a03      	ldr	r3, [r0, #32]
 800799a:	b90b      	cbnz	r3, 80079a0 <__swsetup_r+0x14>
 800799c:	f7ff f9fe 	bl	8006d9c <__sinit>
 80079a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a4:	0719      	lsls	r1, r3, #28
 80079a6:	d422      	bmi.n	80079ee <__swsetup_r+0x62>
 80079a8:	06da      	lsls	r2, r3, #27
 80079aa:	d407      	bmi.n	80079bc <__swsetup_r+0x30>
 80079ac:	2209      	movs	r2, #9
 80079ae:	602a      	str	r2, [r5, #0]
 80079b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079ba:	e033      	b.n	8007a24 <__swsetup_r+0x98>
 80079bc:	0758      	lsls	r0, r3, #29
 80079be:	d512      	bpl.n	80079e6 <__swsetup_r+0x5a>
 80079c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079c2:	b141      	cbz	r1, 80079d6 <__swsetup_r+0x4a>
 80079c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079c8:	4299      	cmp	r1, r3
 80079ca:	d002      	beq.n	80079d2 <__swsetup_r+0x46>
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7ff fc85 	bl	80072dc <_free_r>
 80079d2:	2300      	movs	r3, #0
 80079d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	2300      	movs	r3, #0
 80079e0:	6063      	str	r3, [r4, #4]
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f043 0308 	orr.w	r3, r3, #8
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	b94b      	cbnz	r3, 8007a06 <__swsetup_r+0x7a>
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079fc:	d003      	beq.n	8007a06 <__swsetup_r+0x7a>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 f83f 	bl	8007a84 <__smakebuf_r>
 8007a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0a:	f013 0201 	ands.w	r2, r3, #1
 8007a0e:	d00a      	beq.n	8007a26 <__swsetup_r+0x9a>
 8007a10:	2200      	movs	r2, #0
 8007a12:	60a2      	str	r2, [r4, #8]
 8007a14:	6962      	ldr	r2, [r4, #20]
 8007a16:	4252      	negs	r2, r2
 8007a18:	61a2      	str	r2, [r4, #24]
 8007a1a:	6922      	ldr	r2, [r4, #16]
 8007a1c:	b942      	cbnz	r2, 8007a30 <__swsetup_r+0xa4>
 8007a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a22:	d1c5      	bne.n	80079b0 <__swsetup_r+0x24>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	0799      	lsls	r1, r3, #30
 8007a28:	bf58      	it	pl
 8007a2a:	6962      	ldrpl	r2, [r4, #20]
 8007a2c:	60a2      	str	r2, [r4, #8]
 8007a2e:	e7f4      	b.n	8007a1a <__swsetup_r+0x8e>
 8007a30:	2000      	movs	r0, #0
 8007a32:	e7f7      	b.n	8007a24 <__swsetup_r+0x98>
 8007a34:	20000018 	.word	0x20000018

08007a38 <__swhatbuf_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	b096      	sub	sp, #88	@ 0x58
 8007a44:	4615      	mov	r5, r2
 8007a46:	461e      	mov	r6, r3
 8007a48:	da0d      	bge.n	8007a66 <__swhatbuf_r+0x2e>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a50:	f04f 0100 	mov.w	r1, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2340      	movne	r3, #64	@ 0x40
 8007a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	b016      	add	sp, #88	@ 0x58
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
 8007a66:	466a      	mov	r2, sp
 8007a68:	f000 f848 	bl	8007afc <_fstat_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	dbec      	blt.n	8007a4a <__swhatbuf_r+0x12>
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a7a:	4259      	negs	r1, r3
 8007a7c:	4159      	adcs	r1, r3
 8007a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a82:	e7eb      	b.n	8007a5c <__swhatbuf_r+0x24>

08007a84 <__smakebuf_r>:
 8007a84:	898b      	ldrh	r3, [r1, #12]
 8007a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a88:	079d      	lsls	r5, r3, #30
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	d507      	bpl.n	8007aa0 <__smakebuf_r+0x1c>
 8007a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	6163      	str	r3, [r4, #20]
 8007a9c:	b003      	add	sp, #12
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa0:	ab01      	add	r3, sp, #4
 8007aa2:	466a      	mov	r2, sp
 8007aa4:	f7ff ffc8 	bl	8007a38 <__swhatbuf_r>
 8007aa8:	9f00      	ldr	r7, [sp, #0]
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4639      	mov	r1, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff fa28 	bl	8006f04 <_malloc_r>
 8007ab4:	b948      	cbnz	r0, 8007aca <__smakebuf_r+0x46>
 8007ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aba:	059a      	lsls	r2, r3, #22
 8007abc:	d4ee      	bmi.n	8007a9c <__smakebuf_r+0x18>
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0302 	orr.w	r3, r3, #2
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	e7e2      	b.n	8007a90 <__smakebuf_r+0xc>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	6020      	str	r0, [r4, #0]
 8007ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ada:	b15b      	cbz	r3, 8007af4 <__smakebuf_r+0x70>
 8007adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f81d 	bl	8007b20 <_isatty_r>
 8007ae6:	b128      	cbz	r0, 8007af4 <__smakebuf_r+0x70>
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	81a3      	strh	r3, [r4, #12]
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	431d      	orrs	r5, r3
 8007af8:	81a5      	strh	r5, [r4, #12]
 8007afa:	e7cf      	b.n	8007a9c <__smakebuf_r+0x18>

08007afc <_fstat_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	@ (8007b1c <_fstat_r+0x20>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	f7f9 fc7f 	bl	800140c <_fstat>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d102      	bne.n	8007b18 <_fstat_r+0x1c>
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	b103      	cbz	r3, 8007b18 <_fstat_r+0x1c>
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200003c4 	.word	0x200003c4

08007b20 <_isatty_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d06      	ldr	r5, [pc, #24]	@ (8007b3c <_isatty_r+0x1c>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7f9 fc7e 	bl	800142c <_isatty>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_isatty_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_isatty_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	200003c4 	.word	0x200003c4

08007b40 <_raise_r>:
 8007b40:	291f      	cmp	r1, #31
 8007b42:	b538      	push	{r3, r4, r5, lr}
 8007b44:	4605      	mov	r5, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	d904      	bls.n	8007b54 <_raise_r+0x14>
 8007b4a:	2316      	movs	r3, #22
 8007b4c:	6003      	str	r3, [r0, #0]
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b56:	b112      	cbz	r2, 8007b5e <_raise_r+0x1e>
 8007b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b5c:	b94b      	cbnz	r3, 8007b72 <_raise_r+0x32>
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 f830 	bl	8007bc4 <_getpid_r>
 8007b64:	4622      	mov	r2, r4
 8007b66:	4601      	mov	r1, r0
 8007b68:	4628      	mov	r0, r5
 8007b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b6e:	f000 b817 	b.w	8007ba0 <_kill_r>
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d00a      	beq.n	8007b8c <_raise_r+0x4c>
 8007b76:	1c59      	adds	r1, r3, #1
 8007b78:	d103      	bne.n	8007b82 <_raise_r+0x42>
 8007b7a:	2316      	movs	r3, #22
 8007b7c:	6003      	str	r3, [r0, #0]
 8007b7e:	2001      	movs	r0, #1
 8007b80:	e7e7      	b.n	8007b52 <_raise_r+0x12>
 8007b82:	2100      	movs	r1, #0
 8007b84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4798      	blx	r3
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e7e0      	b.n	8007b52 <_raise_r+0x12>

08007b90 <raise>:
 8007b90:	4b02      	ldr	r3, [pc, #8]	@ (8007b9c <raise+0xc>)
 8007b92:	4601      	mov	r1, r0
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	f7ff bfd3 	b.w	8007b40 <_raise_r>
 8007b9a:	bf00      	nop
 8007b9c:	20000018 	.word	0x20000018

08007ba0 <_kill_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d07      	ldr	r5, [pc, #28]	@ (8007bc0 <_kill_r+0x20>)
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	4611      	mov	r1, r2
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	f7f9 fbcd 	bl	800134c <_kill>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d102      	bne.n	8007bbc <_kill_r+0x1c>
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	b103      	cbz	r3, 8007bbc <_kill_r+0x1c>
 8007bba:	6023      	str	r3, [r4, #0]
 8007bbc:	bd38      	pop	{r3, r4, r5, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200003c4 	.word	0x200003c4

08007bc4 <_getpid_r>:
 8007bc4:	f7f9 bbba 	b.w	800133c <_getpid>

08007bc8 <_init>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	bf00      	nop
 8007bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bce:	bc08      	pop	{r3}
 8007bd0:	469e      	mov	lr, r3
 8007bd2:	4770      	bx	lr

08007bd4 <_fini>:
 8007bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd6:	bf00      	nop
 8007bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bda:	bc08      	pop	{r3}
 8007bdc:	469e      	mov	lr, r3
 8007bde:	4770      	bx	lr
