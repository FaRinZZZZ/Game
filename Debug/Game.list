
Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b18  08004b18  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08004b2c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004b2c  00006190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001275b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002530  00000000  00000000  00018797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdd  00000000  00000000  0001bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fa1  00000000  00000000  0001c7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f6c  00000000  00000000  00041776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ead6a  00000000  00000000  000546e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f44c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f68  00000000  00000000  0013f490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001433f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ab8 	.word	0x08004ab8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004ab8 	.word	0x08004ab8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fbf3 	bl	8000cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f80d 	bl	800052e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f91e 	bl	8000754 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f894 	bl	8000644 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800051c:	f000 f8dc 	bl	80006d8 <MX_SPI3_Init>
  MX_I2C1_Init();
 8000520:	f000 f850 	bl	80005c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LIGHT_OUTPUT_Setup();
 8000524:	f000 f9a6 	bl	8000874 <LIGHT_OUTPUT_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000528:	f000 f9c4 	bl	80008b4 <SPITxRx_readIO>
 800052c:	e7fc      	b.n	8000528 <main+0x20>

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b094      	sub	sp, #80	@ 0x50
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	2238      	movs	r2, #56	@ 0x38
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f004 fa8f 	bl	8004a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000550:	2000      	movs	r0, #0
 8000552:	f001 febf 	bl	80022d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800056c:	2304      	movs	r3, #4
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000570:	2355      	movs	r3, #85	@ 0x55
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f001 ff59 	bl	800243c <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000590:	f000 f9e8 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2104      	movs	r1, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fa57 	bl	8002a60 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b8:	f000 f9d4 	bl	8000964 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <MX_I2C1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <MX_I2C1_Init+0x7c>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000600:	f000 ff38 	bl	8001474 <HAL_I2C_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060a:	f000 f9ab 	bl	8000964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060e:	2100      	movs	r1, #0
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000612:	f001 fdc8 	bl	80021a6 <HAL_I2CEx_ConfigAnalogFilter>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f9a2 	bl	8000964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000620:	2100      	movs	r1, #0
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000624:	f001 fe0a 	bl	800223c <HAL_I2CEx_ConfigDigitalFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062e:	f000 f999 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028
 800063c:	40005400 	.word	0x40005400
 8000640:	30a0a7fb 	.word	0x30a0a7fb

08000644 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000648:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 800064a:	4a22      	ldr	r2, [pc, #136]	@ (80006d4 <MX_LPUART1_UART_Init+0x90>)
 800064c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000674:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 8000688:	f003 fb7c 	bl	8003d84 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f967 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 800069a:	f004 f917 	bl	80048cc <HAL_UARTEx_SetTxFifoThreshold>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006a4:	f000 f95e 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 80006ac:	f004 f94c 	bl	8004948 <HAL_UARTEx_SetRxFifoThreshold>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006b6:	f000 f955 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 f8cd 	bl	800485a <HAL_UARTEx_DisableFifoMode>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006c6:	f000 f94d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	40008000 	.word	0x40008000

080006d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_SPI3_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <MX_SPI3_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_SPI3_Init+0x74>)
 80006e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_SPI3_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_SPI3_Init+0x74>)
 80006f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80006f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_SPI3_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_SPI3_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI3_Init+0x74>)
 8000706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_SPI3_Init+0x74>)
 800070e:	2238      	movs	r2, #56	@ 0x38
 8000710:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_SPI3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_SPI3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI3_Init+0x74>)
 8000726:	2207      	movs	r2, #7
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI3_Init+0x74>)
 8000732:	2208      	movs	r2, #8
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_SPI3_Init+0x74>)
 8000738:	f002 fdfc 	bl	8003334 <HAL_SPI_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f90f 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000110 	.word	0x20000110
 8000750:	40003c00 	.word	0x40003c00

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b3f      	ldr	r3, [pc, #252]	@ (8000868 <MX_GPIO_Init+0x114>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a3e      	ldr	r2, [pc, #248]	@ (8000868 <MX_GPIO_Init+0x114>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b3c      	ldr	r3, [pc, #240]	@ (8000868 <MX_GPIO_Init+0x114>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000782:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <MX_GPIO_Init+0x114>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a38      	ldr	r2, [pc, #224]	@ (8000868 <MX_GPIO_Init+0x114>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b36      	ldr	r3, [pc, #216]	@ (8000868 <MX_GPIO_Init+0x114>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <MX_GPIO_Init+0x114>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a32      	ldr	r2, [pc, #200]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b30      	ldr	r3, [pc, #192]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a26      	ldr	r2, [pc, #152]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_GPIO_Init+0x114>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ea:	f000 fe13 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2104      	movs	r1, #4
 80007f2:	481e      	ldr	r0, [pc, #120]	@ (800086c <MX_GPIO_Init+0x118>)
 80007f4:	f000 fe0e 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <MX_GPIO_Init+0x11c>)
 8000810:	f000 fc66 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000814:	2320      	movs	r3, #32
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082e:	f000 fc57 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000832:	2304      	movs	r3, #4
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <MX_GPIO_Init+0x118>)
 800084a:	f000 fc49 	bl	80010e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2028      	movs	r0, #40	@ 0x28
 8000854:	f000 fb9b 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000858:	2028      	movs	r0, #40	@ 0x28
 800085a:	f000 fbb2 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	48000c00 	.word	0x48000c00
 8000870:	48000800 	.word	0x48000800

08000874 <LIGHT_OUTPUT_Setup>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
		HAL_Delay(1);
}

void LIGHT_OUTPUT_Setup()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2104      	movs	r1, #4
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <LIGHT_OUTPUT_Setup+0x30>)
 800087e:	f000 fdc9 	bl	8001414 <HAL_GPIO_WritePin>
	SPI_TX[0] = 0b01000000;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <LIGHT_OUTPUT_Setup+0x34>)
 8000884:	2240      	movs	r2, #64	@ 0x40
 8000886:	701a      	strb	r2, [r3, #0]
	SPI_TX[1] = 0x01;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <LIGHT_OUTPUT_Setup+0x34>)
 800088a:	2201      	movs	r2, #1
 800088c:	705a      	strb	r2, [r3, #1]
	SPI_TX[2] = 0b00000000;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <LIGHT_OUTPUT_Setup+0x34>)
 8000890:	2200      	movs	r2, #0
 8000892:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 8000894:	2303      	movs	r3, #3
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <LIGHT_OUTPUT_Setup+0x38>)
 8000898:	4903      	ldr	r1, [pc, #12]	@ (80008a8 <LIGHT_OUTPUT_Setup+0x34>)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <LIGHT_OUTPUT_Setup+0x3c>)
 800089c:	f002 fdf6 	bl	800348c <HAL_SPI_TransmitReceive_IT>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	48000c00 	.word	0x48000c00
 80008a8:	20000174 	.word	0x20000174
 80008ac:	20000180 	.word	0x20000180
 80008b0:	20000110 	.word	0x20000110

080008b4 <SPITxRx_readIO>:

void SPITxRx_readIO()
	{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80008b8:	2104      	movs	r1, #4
 80008ba:	480e      	ldr	r0, [pc, #56]	@ (80008f4 <SPITxRx_readIO+0x40>)
 80008bc:	f000 fd92 	bl	80013e4 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d013      	beq.n	80008ee <SPITxRx_readIO+0x3a>
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2104      	movs	r1, #4
 80008ca:	480a      	ldr	r0, [pc, #40]	@ (80008f4 <SPITxRx_readIO+0x40>)
 80008cc:	f000 fda2 	bl	8001414 <HAL_GPIO_WritePin>
				SPI_TX[0] = 0b01000001;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <SPITxRx_readIO+0x44>)
 80008d2:	2241      	movs	r2, #65	@ 0x41
 80008d4:	701a      	strb	r2, [r3, #0]
				SPI_TX[1] = 0x12;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <SPITxRx_readIO+0x44>)
 80008d8:	2212      	movs	r2, #18
 80008da:	705a      	strb	r2, [r3, #1]
				SPI_TX[2] = 0;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SPITxRx_readIO+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	709a      	strb	r2, [r3, #2]
				HAL_SPI_TransmitReceive_IT(&hspi3, SPI_TX, SPI_RX, 3);
 80008e2:	2303      	movs	r3, #3
 80008e4:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <SPITxRx_readIO+0x48>)
 80008e6:	4904      	ldr	r1, [pc, #16]	@ (80008f8 <SPITxRx_readIO+0x44>)
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <SPITxRx_readIO+0x4c>)
 80008ea:	f002 fdcf 	bl	800348c <HAL_SPI_TransmitReceive_IT>
			}
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48000c00 	.word	0x48000c00
 80008f8:	20000174 	.word	0x20000174
 80008fc:	20000180 	.word	0x20000180
 8000900:	20000110 	.word	0x20000110

08000904 <HAL_SPI_TxRxCpltCallback>:
{

}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800090c:	2201      	movs	r2, #1
 800090e:	2104      	movs	r1, #4
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000912:	f000 fd7f 	bl	8001414 <HAL_GPIO_WritePin>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	48000c00 	.word	0x48000c00

08000924 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_13)
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000934:	d10e      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x30>
		{
			if (control_rand == 1)
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d103      	bne.n	8000946 <HAL_GPIO_EXTI_Callback+0x22>
				{
					control_rand = 0;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
					control_rand = 1;
				}
		}


	}
 8000944:	e006      	b.n	8000954 <HAL_GPIO_EXTI_Callback+0x30>
			else if (control_rand == 0)
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_GPIO_EXTI_Callback+0x30>
					control_rand = 1;
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000950:	2201      	movs	r2, #1
 8000952:	801a      	strh	r2, [r3, #0]
	}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2000018a 	.word	0x2000018a

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6613      	str	r3, [r2, #96]	@ 0x60
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6593      	str	r3, [r2, #88]	@ 0x58
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009a6:	f001 fd39 	bl	800241c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09e      	sub	sp, #120	@ 0x78
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2254      	movs	r2, #84	@ 0x54
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 f841 	bl	8004a60 <memset>
  if(hi2c->Instance==I2C1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a27      	ldr	r2, [pc, #156]	@ (8000a80 <HAL_I2C_MspInit+0xc8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d146      	bne.n	8000a76 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fa4f 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f7ff ffb0 	bl	8000964 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <HAL_I2C_MspInit+0xcc>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <HAL_I2C_MspInit+0xcc>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_I2C_MspInit+0xcc>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a36:	4619      	mov	r1, r3
 8000a38:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <HAL_I2C_MspInit+0xd0>)
 8000a3a:	f000 fb51 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <HAL_I2C_MspInit+0xcc>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <HAL_I2C_MspInit+0xcc>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_I2C_MspInit+0xcc>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	201f      	movs	r0, #31
 8000a5c:	f000 fa97 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a60:	201f      	movs	r0, #31
 8000a62:	f000 faae 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	f000 fa8f 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a70:	2020      	movs	r0, #32
 8000a72:	f000 faa6 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3778      	adds	r7, #120	@ 0x78
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000400 	.word	0x48000400

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09e      	sub	sp, #120	@ 0x78
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2254      	movs	r2, #84	@ 0x54
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 ffd7 	bl	8004a60 <memset>
  if(huart->Instance==LPUART1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <HAL_UART_MspInit+0xa8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d136      	bne.n	8000b2a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000abc:	2320      	movs	r3, #32
 8000abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 f9e5 	bl	8002e98 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ff46 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000adc:	4a16      	ldr	r2, [pc, #88]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_UART_MspInit+0xac>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f000 fadb 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3778      	adds	r7, #120	@ 0x78
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40008000 	.word	0x40008000
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <HAL_SPI_MspInit+0x8c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d130      	bne.n	8000bc0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <HAL_SPI_MspInit+0x90>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	4a1a      	ldr	r2, [pc, #104]	@ (8000bcc <HAL_SPI_MspInit+0x90>)
 8000b64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_SPI_MspInit+0x90>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_SPI_MspInit+0x90>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <HAL_SPI_MspInit+0x90>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_SPI_MspInit+0x90>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b8e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <HAL_SPI_MspInit+0x94>)
 8000bac:	f000 fa98 	bl	80010e0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2033      	movs	r0, #51	@ 0x33
 8000bb6:	f000 f9ea 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000bba:	2033      	movs	r0, #51	@ 0x33
 8000bbc:	f000 fa01 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40003c00 	.word	0x40003c00
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000800 	.word	0x48000800

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f8b7 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <I2C1_EV_IRQHandler+0x10>)
 8000c3a:	f000 fcb6 	bl	80015aa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000028 	.word	0x20000028

08000c48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <I2C1_ER_IRQHandler+0x10>)
 8000c4e:	f000 fcc6 	bl	80015de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000028 	.word	0x20000028

08000c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c64:	f000 fbee 	bl	8001444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <SPI3_IRQHandler+0x10>)
 8000c72:	f002 fcb9 	bl	80035e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000110 	.word	0x20000110

08000c80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	@ (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f003 fecd 	bl	8004a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fc17 	bl	8000508 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce8:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>

08000cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f939 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 f80e 	bl	8000d28 <HAL_InitTick>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	71fb      	strb	r3, [r7, #7]
 8000d16:	e001      	b.n	8000d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d18:	f7ff fe2a 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_InitTick+0x68>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d022      	beq.n	8000d82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_InitTick+0x6c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <HAL_InitTick+0x68>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f944 	bl	8000fde <HAL_SYSTICK_Config>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10f      	bne.n	8000d7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	d809      	bhi.n	8000d76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d62:	2200      	movs	r2, #0
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d6a:	f000 f910 	bl	8000f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_InitTick+0x70>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e004      	b.n	8000d86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e001      	b.n	8000d86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a03      	ldr	r2, [pc, #12]	@ (8000db8 <HAL_IncTick+0x1c>)
 8000dac:	6013      	str	r3, [r2, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	2000018c 	.word	0x2000018c
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000018c 	.word	0x2000018c

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	@ (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	@ (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff29 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff40 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff33 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa4 	bl	8000f34 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00d      	beq.n	800102a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2204      	movs	r2, #4
 8001012:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e047      	b.n	80010ba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 020e 	bic.w	r2, r2, #14
 8001038:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001058:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f003 021f 	and.w	r2, r3, #31
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001076:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800108a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800108e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001098:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    }
  }
  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010d2:	b2db      	uxtb	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ee:	e15a      	b.n	80013a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 814c 	beq.w	80013a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a6 	beq.w	80013a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b5b      	ldr	r3, [pc, #364]	@ (80013c4 <HAL_GPIO_Init+0x2e4>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001258:	4a5a      	ldr	r2, [pc, #360]	@ (80013c4 <HAL_GPIO_Init+0x2e4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001260:	4b58      	ldr	r3, [pc, #352]	@ (80013c4 <HAL_GPIO_Init+0x2e4>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126c:	4a56      	ldr	r2, [pc, #344]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001296:	d01f      	beq.n	80012d8 <HAL_GPIO_Init+0x1f8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4c      	ldr	r2, [pc, #304]	@ (80013cc <HAL_GPIO_Init+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d019      	beq.n	80012d4 <HAL_GPIO_Init+0x1f4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4b      	ldr	r2, [pc, #300]	@ (80013d0 <HAL_GPIO_Init+0x2f0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1f0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a4a      	ldr	r2, [pc, #296]	@ (80013d4 <HAL_GPIO_Init+0x2f4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1ec>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a49      	ldr	r2, [pc, #292]	@ (80013d8 <HAL_GPIO_Init+0x2f8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a48      	ldr	r2, [pc, #288]	@ (80013dc <HAL_GPIO_Init+0x2fc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e4>
 80012c0:	2305      	movs	r3, #5
 80012c2:	e00a      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012c4:	2306      	movs	r3, #6
 80012c6:	e008      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012c8:	2304      	movs	r3, #4
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012cc:	2303      	movs	r3, #3
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x1fa>
 80012d8:	2300      	movs	r3, #0
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ea:	4937      	ldr	r1, [pc, #220]	@ (80013c8 <HAL_GPIO_Init+0x2e8>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f8:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131c:	4a30      	ldr	r2, [pc, #192]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001346:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800134c:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_GPIO_Init+0x300>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f ae9d 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001430:	e002      	b.n	8001438 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001450:	695a      	ldr	r2, [r3, #20]
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fa5e 	bl	8000924 <HAL_GPIO_EXTI_Callback>
  }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e08d      	b.n	80015a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fa8c 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2224      	movs	r2, #36	@ 0x24
 80014a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e006      	b.n	80014fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d108      	bne.n	8001516 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	e007      	b.n	8001526 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69d9      	ldr	r1, [r3, #28]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1a      	ldr	r2, [r3, #32]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
  }
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00f      	beq.n	8001620 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00a      	beq.n	8001620 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800161e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00f      	beq.n	800164a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001638:	f043 0208 	orr.w	r2, r3, #8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001648:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00f      	beq.n	8001674 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00a      	beq.n	8001674 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001672:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001678:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 030b 	and.w	r3, r3, #11
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001684:	68f9      	ldr	r1, [r7, #12]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fbd6 	bl	8001e38 <I2C_ITError>
  }
}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <I2C_Slave_ISR_IT+0x24>
 8001734:	2302      	movs	r3, #2
 8001736:	e0e2      	b.n	80018fe <I2C_Slave_ISR_IT+0x1ea>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f9b6 	bl	8001ac8 <I2C_ITSlaveCplt>
 800175c:	e0ca      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d04b      	beq.n	8001800 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800176e:	2b00      	cmp	r3, #0
 8001770:	d046      	beq.n	8001800 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d128      	bne.n	80017ce <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b28      	cmp	r3, #40	@ 0x28
 8001786:	d108      	bne.n	800179a <I2C_Slave_ISR_IT+0x86>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800178e:	d104      	bne.n	800179a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001790:	6939      	ldr	r1, [r7, #16]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fafc 	bl	8001d90 <I2C_ITListenCplt>
 8001798:	e031      	b.n	80017fe <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b29      	cmp	r3, #41	@ 0x29
 80017a4:	d10e      	bne.n	80017c4 <I2C_Slave_ISR_IT+0xb0>
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017ac:	d00a      	beq.n	80017c4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2210      	movs	r2, #16
 80017b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 fc55 	bl	8002066 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f926 	bl	8001a0e <I2C_ITSlaveSeqCplt>
 80017c2:	e01c      	b.n	80017fe <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80017cc:	e08f      	b.n	80018ee <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f043 0204 	orr.w	r2, r3, #4
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <I2C_Slave_ISR_IT+0xdc>
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ee:	d17e      	bne.n	80018ee <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	4619      	mov	r1, r3
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 fb1e 	bl	8001e38 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80017fc:	e077      	b.n	80018ee <I2C_Slave_ISR_IT+0x1da>
 80017fe:	e076      	b.n	80018ee <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02f      	beq.n	800186a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02a      	beq.n	800186a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001818:	b29b      	uxth	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d018      	beq.n	8001850 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d14b      	bne.n	80018f2 <I2C_Slave_ISR_IT+0x1de>
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001860:	d047      	beq.n	80018f2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f8d3 	bl	8001a0e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001868:	e043      	b.n	80018f2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800187e:	6939      	ldr	r1, [r7, #16]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f840 	bl	8001906 <I2C_ITAddrCplt>
 8001886:	e035      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d030      	beq.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001898:	2b00      	cmp	r3, #0
 800189a:	d02b      	beq.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d018      	beq.n	80018d8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80018d6:	e00d      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018de:	d002      	beq.n	80018e6 <I2C_Slave_ISR_IT+0x1d2>
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f891 	bl	8001a0e <I2C_ITSlaveSeqCplt>
 80018ec:	e002      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80018ee:	bf00      	nop
 80018f0:	e000      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80018f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800191c:	2b28      	cmp	r3, #40	@ 0x28
 800191e:	d16a      	bne.n	80019f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	0c1b      	lsrs	r3, r3, #16
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	b29b      	uxth	r3, r3
 800193a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800193e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800194c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800195a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d138      	bne.n	80019d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	09db      	lsrs	r3, r3, #7
 8001968:	b29a      	uxth	r2, r3
 800196a:	89bb      	ldrh	r3, [r7, #12]
 800196c:	4053      	eors	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	f003 0306 	and.w	r3, r3, #6
 8001974:	2b00      	cmp	r3, #0
 8001976:	d11c      	bne.n	80019b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001978:	897b      	ldrh	r3, [r7, #10]
 800197a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198a:	2b02      	cmp	r3, #2
 800198c:	d13b      	bne.n	8001a06 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2208      	movs	r2, #8
 800199a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019a4:	89ba      	ldrh	r2, [r7, #12]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4619      	mov	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fe86 	bl	80016bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80019b0:	e029      	b.n	8001a06 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fb95 	bl	80020ea <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019c8:	89ba      	ldrh	r2, [r7, #12]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff fe74 	bl	80016bc <HAL_I2C_AddrCallback>
}
 80019d4:	e017      	b.n	8001a06 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fb85 	bl	80020ea <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019e8:	89ba      	ldrh	r2, [r7, #12]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4619      	mov	r1, r3
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fe64 	bl	80016bc <HAL_I2C_AddrCallback>
}
 80019f4:	e007      	b.n	8001a06 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2208      	movs	r2, #8
 80019fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e00c      	b.n	8001a5c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d007      	beq.n	8001a5c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b29      	cmp	r3, #41	@ 0x29
 8001a66:	d112      	bne.n	8001a8e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2228      	movs	r2, #40	@ 0x28
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2221      	movs	r2, #33	@ 0x21
 8001a74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a76:	2101      	movs	r1, #1
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fb36 	bl	80020ea <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fe04 	bl	8001694 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001a8c:	e017      	b.n	8001abe <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a98:	d111      	bne.n	8001abe <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2228      	movs	r2, #40	@ 0x28
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2222      	movs	r2, #34	@ 0x22
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fb1d 	bl	80020ea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fdf5 	bl	80016a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2220      	movs	r2, #32
 8001af2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001af4:	7afb      	ldrb	r3, [r7, #11]
 8001af6:	2b21      	cmp	r3, #33	@ 0x21
 8001af8:	d002      	beq.n	8001b00 <I2C_ITSlaveCplt+0x38>
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	2b29      	cmp	r3, #41	@ 0x29
 8001afe:	d108      	bne.n	8001b12 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001b00:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 faf0 	bl	80020ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2221      	movs	r2, #33	@ 0x21
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b10:	e019      	b.n	8001b46 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	2b22      	cmp	r3, #34	@ 0x22
 8001b16:	d002      	beq.n	8001b1e <I2C_ITSlaveCplt+0x56>
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b1c:	d108      	bne.n	8001b30 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b1e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fae1 	bl	80020ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2222      	movs	r2, #34	@ 0x22
 8001b2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2e:	e00a      	b.n	8001b46 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	2b28      	cmp	r3, #40	@ 0x28
 8001b34:	d107      	bne.n	8001b46 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001b36:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fad5 	bl	80020ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b54:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b89      	ldr	r3, [pc, #548]	@ (8001d88 <I2C_ITSlaveCplt+0x2c0>)
 8001b62:	400b      	ands	r3, r1
 8001b64:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fa7d 	bl	8002066 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d013      	beq.n	8001b9e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b84:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01f      	beq.n	8001bce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b9c:	e017      	b.n	8001bce <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d049      	beq.n	8001cce <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d044      	beq.n	8001cce <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d128      	bne.n	8001ca0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b28      	cmp	r3, #40	@ 0x28
 8001c58:	d108      	bne.n	8001c6c <I2C_ITSlaveCplt+0x1a4>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c60:	d104      	bne.n	8001c6c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c62:	6979      	ldr	r1, [r7, #20]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f893 	bl	8001d90 <I2C_ITListenCplt>
 8001c6a:	e030      	b.n	8001cce <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b29      	cmp	r3, #41	@ 0x29
 8001c76:	d10e      	bne.n	8001c96 <I2C_ITSlaveCplt+0x1ce>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c7e:	d00a      	beq.n	8001c96 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2210      	movs	r2, #16
 8001c86:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f9ec 	bl	8002066 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff febd 	bl	8001a0e <I2C_ITSlaveSeqCplt>
 8001c94:	e01b      	b.n	8001cce <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	61da      	str	r2, [r3, #28]
 8001c9e:	e016      	b.n	8001cce <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <I2C_ITSlaveCplt+0x1fa>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc0:	d105      	bne.n	8001cce <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f8b5 	bl	8001e38 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8a4 	bl	8001e38 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b28      	cmp	r3, #40	@ 0x28
 8001cfa:	d141      	bne.n	8001d80 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f846 	bl	8001d90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d04:	e03c      	b.n	8001d80 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d0e:	d014      	beq.n	8001d3a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe7c 	bl	8001a0e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1c      	ldr	r2, [pc, #112]	@ (8001d8c <I2C_ITSlaveCplt+0x2c4>)
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fcd0 	bl	80016d8 <HAL_I2C_ListenCpltCallback>
}
 8001d38:	e022      	b.n	8001d80 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b22      	cmp	r3, #34	@ 0x22
 8001d44:	d10e      	bne.n	8001d64 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fca3 	bl	80016a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d62:	e00d      	b.n	8001d80 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fc8a 	bl	8001694 <HAL_I2C_SlaveTxCpltCallback>
}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	fe00e800 	.word	0xfe00e800
 8001d8c:	ffff0000 	.word	0xffff0000

08001d90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	@ (8001e34 <I2C_ITListenCplt+0xa4>)
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d022      	beq.n	8001e0c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e0c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f96a 	bl	80020ea <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fc56 	bl	80016d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	ffff0000 	.word	0xffff0000

08001e38 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a6d      	ldr	r2, [pc, #436]	@ (800200c <I2C_ITError+0x1d4>)
 8001e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b28      	cmp	r3, #40	@ 0x28
 8001e6e:	d005      	beq.n	8001e7c <I2C_ITError+0x44>
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b29      	cmp	r3, #41	@ 0x29
 8001e74:	d002      	beq.n	8001e7c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e7a:	d10b      	bne.n	8001e94 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f933 	bl	80020ea <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2228      	movs	r2, #40	@ 0x28
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a60      	ldr	r2, [pc, #384]	@ (8002010 <I2C_ITError+0x1d8>)
 8001e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e92:	e030      	b.n	8001ef6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e94:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f926 	bl	80020ea <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8e1 	bl	8002066 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b60      	cmp	r3, #96	@ 0x60
 8001eae:	d01f      	beq.n	8001ef0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d114      	bne.n	8001ef0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d109      	bne.n	8001ee8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f043 0204 	orr.w	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2220      	movs	r2, #32
 8001eee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d039      	beq.n	8001f78 <I2C_ITError+0x140>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b11      	cmp	r3, #17
 8001f08:	d002      	beq.n	8001f10 <I2C_ITError+0xd8>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b21      	cmp	r3, #33	@ 0x21
 8001f0e:	d133      	bne.n	8001f78 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f1e:	d107      	bne.n	8001f30 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f2e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f8c5 	bl	80010c4 <HAL_DMA_GetState>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d017      	beq.n	8001f70 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	4a33      	ldr	r2, [pc, #204]	@ (8002014 <I2C_ITError+0x1dc>)
 8001f46:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f84e 	bl	8000ff6 <HAL_DMA_Abort_IT>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d04d      	beq.n	8001ffc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f6e:	e045      	b.n	8001ffc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f851 	bl	8002018 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f76:	e041      	b.n	8001ffc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d039      	beq.n	8001ff4 <I2C_ITError+0x1bc>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d002      	beq.n	8001f8c <I2C_ITError+0x154>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b22      	cmp	r3, #34	@ 0x22
 8001f8a:	d133      	bne.n	8001ff4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f9a:	d107      	bne.n	8001fac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001faa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f887 	bl	80010c4 <HAL_DMA_GetState>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d017      	beq.n	8001fec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <I2C_ITError+0x1dc>)
 8001fc2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f810 	bl	8000ff6 <HAL_DMA_Abort_IT>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d011      	beq.n	8002000 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fea:	e009      	b.n	8002000 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f813 	bl	8002018 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001ff2:	e005      	b.n	8002000 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f80f 	bl	8002018 <I2C_TreatErrorCallback>
  }
}
 8001ffa:	e002      	b.n	8002002 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002000:	bf00      	nop
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	ffff0000 	.word	0xffff0000
 8002010:	08001715 	.word	0x08001715
 8002014:	080020af 	.word	0x080020af

08002018 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b60      	cmp	r3, #96	@ 0x60
 800202a:	d10e      	bne.n	800204a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fb5c 	bl	8001700 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002048:	e009      	b.n	800205e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fb47 	bl	80016ec <HAL_I2C_ErrorCallback>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d103      	bne.n	8002084 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	619a      	str	r2, [r3, #24]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c8:	2200      	movs	r2, #0
 80020ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d8:	2200      	movs	r2, #0
 80020da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff ff9b 	bl	8002018 <I2C_TreatErrorCallback>
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00f      	beq.n	8002124 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800210a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002118:	2b28      	cmp	r3, #40	@ 0x28
 800211a:	d003      	beq.n	8002124 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002122:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00f      	beq.n	800214e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002134:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002142:	2b28      	cmp	r3, #40	@ 0x28
 8002144:	d003      	beq.n	800214e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800214c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800214e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002152:	2b00      	cmp	r3, #0
 8002154:	da03      	bge.n	800215e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	2b10      	cmp	r3, #16
 8002162:	d103      	bne.n	800216c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800216a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	2b20      	cmp	r3, #32
 8002170:	d103      	bne.n	800217a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f043 0320 	orr.w	r3, r3, #32
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	2b40      	cmp	r3, #64	@ 0x40
 800217e:	d103      	bne.n	8002188 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002186:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43da      	mvns	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	400a      	ands	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d138      	bne.n	800222e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e032      	b.n	8002230 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2224      	movs	r2, #36	@ 0x24
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	d139      	bne.n	80022c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e033      	b.n	80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2224      	movs	r2, #36	@ 0x24
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800228e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d141      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ee:	d131      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f0:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f6:	4a46      	ldr	r2, [pc, #280]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002300:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002308:	4a41      	ldr	r2, [pc, #260]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800230e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002310:	4b40      	ldr	r3, [pc, #256]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2232      	movs	r2, #50	@ 0x32
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	4a3f      	ldr	r2, [pc, #252]	@ (8002418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	3301      	adds	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002326:	e002      	b.n	800232e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3b01      	subs	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232e:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233a:	d102      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f2      	bne.n	8002328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002342:	4b33      	ldr	r3, [pc, #204]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234e:	d158      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e057      	b.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002354:	4b2e      	ldr	r3, [pc, #184]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235a:	4a2d      	ldr	r2, [pc, #180]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002364:	e04d      	b.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236c:	d141      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800236e:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237a:	d131      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800238c:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002394:	4a1e      	ldr	r2, [pc, #120]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800239a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2232      	movs	r2, #50	@ 0x32
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	0c9b      	lsrs	r3, r3, #18
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b2:	e002      	b.n	80023ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023c6:	d102      	bne.n	80023ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f2      	bne.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023da:	d112      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e011      	b.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023f0:	e007      	b.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002400:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40007000 	.word	0x40007000
 8002414:	20000000 	.word	0x20000000
 8002418:	431bde83 	.word	0x431bde83

0800241c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242a:	6093      	str	r3, [r2, #8]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000

0800243c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e2fe      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d075      	beq.n	8002546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245a:	4b97      	ldr	r3, [pc, #604]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002464:	4b94      	ldr	r3, [pc, #592]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0x3e>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d002      	beq.n	8002480 <HAL_RCC_OscConfig+0x44>
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d10b      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b8d      	ldr	r3, [pc, #564]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05b      	beq.n	8002544 <HAL_RCC_OscConfig+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d157      	bne.n	8002544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e2d9      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x74>
 80024a2:	4b85      	ldr	r3, [pc, #532]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a84      	ldr	r2, [pc, #528]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x98>
 80024ba:	4b7f      	ldr	r3, [pc, #508]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b7c      	ldr	r3, [pc, #496]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024d4:	4b78      	ldr	r3, [pc, #480]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a77      	ldr	r2, [pc, #476]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b75      	ldr	r3, [pc, #468]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a74      	ldr	r2, [pc, #464]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fc64 	bl	8000dc0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fc60 	bl	8000dc0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e29e      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xc0>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fc50 	bl	8000dc0 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fc4c 	bl	8000dc0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e28a      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0xe8>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d075      	beq.n	800263e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002552:	4b59      	ldr	r3, [pc, #356]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255c:	4b56      	ldr	r3, [pc, #344]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0x136>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d002      	beq.n	8002578 <HAL_RCC_OscConfig+0x13c>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d11f      	bne.n	80025b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	4b4f      	ldr	r3, [pc, #316]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x154>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e25d      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b49      	ldr	r3, [pc, #292]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4946      	ldr	r1, [pc, #280]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025a4:	4b45      	ldr	r3, [pc, #276]	@ (80026bc <HAL_RCC_OscConfig+0x280>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fbbd 	bl	8000d28 <HAL_InitTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d043      	beq.n	800263c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e249      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d023      	beq.n	8002608 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b3d      	ldr	r3, [pc, #244]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a3c      	ldr	r2, [pc, #240]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fbf8 	bl	8000dc0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe fbf4 	bl	8000dc0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e232      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e6:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b31      	ldr	r3, [pc, #196]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	061b      	lsls	r3, r3, #24
 8002600:	492d      	ldr	r1, [pc, #180]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
 8002606:	e01a      	b.n	800263e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002608:	4b2b      	ldr	r3, [pc, #172]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800260e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fbd4 	bl	8000dc0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7fe fbd0 	bl	8000dc0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e20e      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262e:	4b22      	ldr	r3, [pc, #136]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x1e0>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d041      	beq.n	80026ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01c      	beq.n	800268c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002658:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fbad 	bl	8000dc0 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe fba9 	bl	8000dc0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1e7      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ef      	beq.n	800266a <HAL_RCC_OscConfig+0x22e>
 800268a:	e020      	b.n	80026ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268c:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fb90 	bl	8000dc0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a2:	e00d      	b.n	80026c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fb8c 	bl	8000dc0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d906      	bls.n	80026c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1ca      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c0:	4b8c      	ldr	r3, [pc, #560]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80026c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ea      	bne.n	80026a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a6 	beq.w	8002828 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026dc:	2300      	movs	r3, #0
 80026de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026e0:	4b84      	ldr	r3, [pc, #528]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2b4>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x2b6>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00d      	beq.n	8002712 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b7f      	ldr	r3, [pc, #508]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	4a7e      	ldr	r2, [pc, #504]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002700:	6593      	str	r3, [r2, #88]	@ 0x58
 8002702:	4b7c      	ldr	r3, [pc, #496]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	4b79      	ldr	r3, [pc, #484]	@ (80028f8 <HAL_RCC_OscConfig+0x4bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271e:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <HAL_RCC_OscConfig+0x4bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	@ (80028f8 <HAL_RCC_OscConfig+0x4bc>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe fb49 	bl	8000dc0 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fb45 	bl	8000dc0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e183      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002744:	4b6c      	ldr	r3, [pc, #432]	@ (80028f8 <HAL_RCC_OscConfig+0x4bc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d108      	bne.n	800276a <HAL_RCC_OscConfig+0x32e>
 8002758:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	4a65      	ldr	r2, [pc, #404]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002768:	e024      	b.n	80027b4 <HAL_RCC_OscConfig+0x378>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d110      	bne.n	8002794 <HAL_RCC_OscConfig+0x358>
 8002772:	4b60      	ldr	r3, [pc, #384]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002778:	4a5e      	ldr	r2, [pc, #376]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002782:	4b5c      	ldr	r3, [pc, #368]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002788:	4a5a      	ldr	r2, [pc, #360]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002792:	e00f      	b.n	80027b4 <HAL_RCC_OscConfig+0x378>
 8002794:	4b57      	ldr	r3, [pc, #348]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279a:	4a56      	ldr	r2, [pc, #344]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a4:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	4a52      	ldr	r2, [pc, #328]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d016      	beq.n	80027ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fb00 	bl	8000dc0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fafc 	bl	8000dc0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e138      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ed      	beq.n	80027c4 <HAL_RCC_OscConfig+0x388>
 80027e8:	e015      	b.n	8002816 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fae9 	bl	8000dc0 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fae5 	bl	8000dc0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e121      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002808:	4b3a      	ldr	r3, [pc, #232]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ed      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002816:	7ffb      	ldrb	r3, [r7, #31]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b35      	ldr	r3, [pc, #212]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	4a34      	ldr	r2, [pc, #208]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002826:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d03c      	beq.n	80028ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01c      	beq.n	8002876 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800283c:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800283e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002842:	4a2c      	ldr	r2, [pc, #176]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fab8 	bl	8000dc0 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002854:	f7fe fab4 	bl	8000dc0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0f2      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002866:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002868:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ef      	beq.n	8002854 <HAL_RCC_OscConfig+0x418>
 8002874:	e01b      	b.n	80028ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002876:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 8002878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800287c:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fa9b 	bl	8000dc0 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800288e:	f7fe fa97 	bl	8000dc0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0d5      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80028a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ef      	bne.n	800288e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80c9 	beq.w	8002a4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b8:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	f000 8083 	beq.w	80029cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d15e      	bne.n	800298c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <HAL_RCC_OscConfig+0x4b8>)
 80028d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fa71 	bl	8000dc0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e0:	e00c      	b.n	80028fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fa6d 	bl	8000dc0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d905      	bls.n	80028fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0ab      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	4b55      	ldr	r3, [pc, #340]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ec      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002908:	4b52      	ldr	r3, [pc, #328]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b52      	ldr	r3, [pc, #328]	@ (8002a58 <HAL_RCC_OscConfig+0x61c>)
 800290e:	4013      	ands	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6a11      	ldr	r1, [r2, #32]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002918:	3a01      	subs	r2, #1
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002922:	0212      	lsls	r2, r2, #8
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800292a:	0852      	lsrs	r2, r2, #1
 800292c:	3a01      	subs	r2, #1
 800292e:	0552      	lsls	r2, r2, #21
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002936:	0852      	lsrs	r2, r2, #1
 8002938:	3a01      	subs	r2, #1
 800293a:	0652      	lsls	r2, r2, #25
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002942:	06d2      	lsls	r2, r2, #27
 8002944:	430a      	orrs	r2, r1
 8002946:	4943      	ldr	r1, [pc, #268]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 8002948:	4313      	orrs	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b41      	ldr	r3, [pc, #260]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a40      	ldr	r2, [pc, #256]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002958:	4b3e      	ldr	r3, [pc, #248]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002962:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fa2c 	bl	8000dc0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fa28 	bl	8000dc0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e066      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	4b35      	ldr	r3, [pc, #212]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x530>
 800298a:	e05e      	b.n	8002a4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298c:	4b31      	ldr	r3, [pc, #196]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a30      	ldr	r2, [pc, #192]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 8002992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fa12 	bl	8000dc0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fa0e 	bl	8000dc0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e04c      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b2:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029be:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	4924      	ldr	r1, [pc, #144]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 80029c4:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <HAL_RCC_OscConfig+0x620>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
 80029ca:	e03e      	b.n	8002a4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e039      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a54 <HAL_RCC_OscConfig+0x618>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d12c      	bne.n	8002a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	3b01      	subs	r3, #1
 80029f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d123      	bne.n	8002a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11b      	bne.n	8002a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d113      	bne.n	8002a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	019f800c 	.word	0x019f800c
 8002a5c:	feeefffc 	.word	0xfeeefffc

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e11e      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b91      	ldr	r3, [pc, #580]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 020f 	bic.w	r2, r3, #15
 8002a8e:	498c      	ldr	r1, [pc, #560]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b8a      	ldr	r3, [pc, #552]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e106      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d073      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d129      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abc:	4b81      	ldr	r3, [pc, #516]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0f4      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002acc:	f000 f99e 	bl	8002e0c <RCC_GetSysClockFreqFromPLLSource>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4a7c      	ldr	r2, [pc, #496]	@ (8002cc8 <HAL_RCC_ClockConfig+0x268>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d93f      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ada:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d033      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12f      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002afa:	4b72      	ldr	r3, [pc, #456]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b02:	4a70      	ldr	r2, [pc, #448]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e024      	b.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b18:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0c6      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0be      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b38:	f000 f8ce 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4a61      	ldr	r2, [pc, #388]	@ (8002cc8 <HAL_RCC_ClockConfig+0x268>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d909      	bls.n	8002b5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b46:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4957      	ldr	r1, [pc, #348]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f928 	bl	8000dc0 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe f924 	bl	8000dc0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e095      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b43      	ldr	r3, [pc, #268]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a42      	ldr	r2, [pc, #264]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4936      	ldr	r1, [pc, #216]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bf6:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4a32      	ldr	r2, [pc, #200]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c02:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d21d      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c10:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 020f 	bic.w	r2, r3, #15
 8002c18:	4929      	ldr	r1, [pc, #164]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c20:	f7fe f8ce 	bl	8000dc0 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe f8ca 	bl	8000dc0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e03b      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1ed      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4917      	ldr	r1, [pc, #92]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	490f      	ldr	r1, [pc, #60]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c8a:	f000 f825 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <HAL_RCC_ClockConfig+0x264>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	490c      	ldr	r1, [pc, #48]	@ (8002ccc <HAL_RCC_ClockConfig+0x26c>)
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x270>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_ClockConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f83a 	bl	8000d28 <HAL_InitTick>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	04c4b400 	.word	0x04c4b400
 8002ccc:	08004ad0 	.word	0x08004ad0
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cde:	4b2c      	ldr	r3, [pc, #176]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cea:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	e047      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cf0:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cfc:	4b26      	ldr	r3, [pc, #152]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	e03e      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d02:	4b23      	ldr	r3, [pc, #140]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d136      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3301      	adds	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d36:	68d2      	ldr	r2, [r2, #12]
 8002d38:	0a12      	lsrs	r2, r2, #8
 8002d3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	e00c      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d46:	4a13      	ldr	r2, [pc, #76]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4a10      	ldr	r2, [pc, #64]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	0a12      	lsrs	r2, r2, #8
 8002d54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
      break;
 8002d5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0e5b      	lsrs	r3, r3, #25
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e001      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d80:	693b      	ldr	r3, [r7, #16]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	016e3600 	.word	0x016e3600

08002d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4904      	ldr	r1, [pc, #16]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08004ae0 	.word	0x08004ae0

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de4:	f7ff ffda 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0adb      	lsrs	r3, r3, #11
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4904      	ldr	r1, [pc, #16]	@ (8002e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08004ae0 	.word	0x08004ae0

08002e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e12:	4b1e      	ldr	r3, [pc, #120]	@ (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d10c      	bne.n	8002e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e30:	4a17      	ldr	r2, [pc, #92]	@ (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e3a:	68d2      	ldr	r2, [r2, #12]
 8002e3c:	0a12      	lsrs	r2, r2, #8
 8002e3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	617b      	str	r3, [r7, #20]
    break;
 8002e48:	e00c      	b.n	8002e64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e4a:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	4a0e      	ldr	r2, [pc, #56]	@ (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	0a12      	lsrs	r2, r2, #8
 8002e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
    break;
 8002e62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	0e5b      	lsrs	r3, r3, #25
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e7e:	687b      	ldr	r3, [r7, #4]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	016e3600 	.word	0x016e3600
 8002e94:	00f42400 	.word	0x00f42400

08002e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8098 	beq.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eba:	4b43      	ldr	r3, [pc, #268]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10d      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	4b40      	ldr	r3, [pc, #256]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a39      	ldr	r2, [pc, #228]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eee:	f7fd ff67 	bl	8000dc0 <HAL_GetTick>
 8002ef2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef4:	e009      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fd ff63 	bl	8000dc0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d902      	bls.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	74fb      	strb	r3, [r7, #19]
        break;
 8002f08:	e005      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0a:	4b30      	ldr	r3, [pc, #192]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0ef      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d159      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01e      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d019      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f38:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f44:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f54:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f64:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fd ff23 	bl	8000dc0 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7c:	e00b      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fd ff1f 	bl	8000dc0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d902      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	74fb      	strb	r3, [r7, #19]
            break;
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f96:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ec      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	4903      	ldr	r1, [pc, #12]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	74bb      	strb	r3, [r7, #18]
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd4:	7c7b      	ldrb	r3, [r7, #17]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fda:	4ba7      	ldr	r3, [pc, #668]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fde:	4aa6      	ldr	r2, [pc, #664]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff2:	4ba1      	ldr	r3, [pc, #644]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	499d      	ldr	r1, [pc, #628]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003014:	4b98      	ldr	r3, [pc, #608]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	f023 020c 	bic.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4995      	ldr	r1, [pc, #596]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003036:	4b90      	ldr	r3, [pc, #576]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	498c      	ldr	r1, [pc, #560]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003058:	4b87      	ldr	r3, [pc, #540]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	4984      	ldr	r1, [pc, #528]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800307a:	4b7f      	ldr	r3, [pc, #508]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	497b      	ldr	r1, [pc, #492]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800309c:	4b76      	ldr	r3, [pc, #472]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	4973      	ldr	r1, [pc, #460]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030be:	4b6e      	ldr	r3, [pc, #440]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	496a      	ldr	r1, [pc, #424]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030e0:	4b65      	ldr	r3, [pc, #404]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4962      	ldr	r1, [pc, #392]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003102:	4b5d      	ldr	r3, [pc, #372]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003108:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	4959      	ldr	r1, [pc, #356]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003124:	4b54      	ldr	r3, [pc, #336]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	4951      	ldr	r1, [pc, #324]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003146:	4b4c      	ldr	r3, [pc, #304]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	4948      	ldr	r1, [pc, #288]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d015      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003168:	4b43      	ldr	r3, [pc, #268]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	4940      	ldr	r1, [pc, #256]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003186:	d105      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003188:	4b3b      	ldr	r3, [pc, #236]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a3a      	ldr	r2, [pc, #232]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d015      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031a0:	4b35      	ldr	r3, [pc, #212]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ae:	4932      	ldr	r1, [pc, #200]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031be:	d105      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031d8:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	4924      	ldr	r1, [pc, #144]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003202:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003210:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	4916      	ldr	r1, [pc, #88]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800322e:	d105      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a10      	ldr	r2, [pc, #64]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800323a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d019      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003248:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	4908      	ldr	r1, [pc, #32]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003266:	d109      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a02      	ldr	r2, [pc, #8]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003272:	60d3      	str	r3, [r2, #12]
 8003274:	e002      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003288:	4b29      	ldr	r3, [pc, #164]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	4926      	ldr	r1, [pc, #152]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032a6:	d105      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032a8:	4b21      	ldr	r3, [pc, #132]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a20      	ldr	r2, [pc, #128]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80032c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ce:	4918      	ldr	r1, [pc, #96]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032e0:	4b13      	ldr	r3, [pc, #76]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	490a      	ldr	r1, [pc, #40]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a04      	ldr	r2, [pc, #16]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800331e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003322:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003324:	7cbb      	ldrb	r3, [r7, #18]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e09d      	b.n	8003482 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003356:	d009      	beq.n	800336c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
 800335e:	e005      	b.n	800336c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fbd8 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033ac:	d902      	bls.n	80033b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e002      	b.n	80033ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033c2:	d007      	beq.n	80033d4 <HAL_SPI_Init+0xa0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033cc:	d002      	beq.n	80033d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003416:	ea42 0103 	orr.w	r1, r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	0c1b      	lsrs	r3, r3, #16
 8003430:	f003 0204 	and.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003450:	ea42 0103 	orr.w	r1, r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003470:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034a4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034ac:	7dbb      	ldrb	r3, [r7, #22]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d00d      	beq.n	80034ce <HAL_SPI_TransmitReceive_IT+0x42>
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b8:	d106      	bne.n	80034c8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034cc:	e07d      	b.n	80035ca <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_SPI_TransmitReceive_IT+0x54>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_SPI_TransmitReceive_IT+0x54>
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034e4:	e071      	b.n	80035ca <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_SPI_TransmitReceive_IT+0x68>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e06b      	b.n	80035cc <HAL_SPI_TransmitReceive_IT+0x140>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b04      	cmp	r3, #4
 8003506:	d003      	beq.n	8003510 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2205      	movs	r2, #5
 800350c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	887a      	ldrh	r2, [r7, #2]
 8003526:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003546:	d906      	bls.n	8003556 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800354c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <HAL_SPI_TransmitReceive_IT+0x150>)
 8003552:	651a      	str	r2, [r3, #80]	@ 0x50
 8003554:	e005      	b.n	8003562 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800355a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8003560:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800356a:	d802      	bhi.n	8003572 <HAL_SPI_TransmitReceive_IT+0xe6>
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d908      	bls.n	8003584 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	e007      	b.n	8003594 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003592:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d007      	beq.n	80035b2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80035c8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	08003973 	.word	0x08003973
 80035dc:	080039d9 	.word	0x080039d9
 80035e0:	08003823 	.word	0x08003823
 80035e4:	080038e1 	.word	0x080038e1

080035e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
    return;
 8003626:	e0ce      	b.n	80037c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_SPI_IRQHandler+0x5e>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    return;
 8003644:	e0bf      	b.n	80037c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_SPI_IRQHandler+0x7e>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b0 	beq.w	80037c6 <HAL_SPI_IRQHandler+0x1de>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80aa 	beq.w	80037c6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d011      	beq.n	80036ac <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	e00b      	b.n	80036c4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
        return;
 80036c2:	e080      	b.n	80037c6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	f043 0208 	orr.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	2b00      	cmp	r3, #0
 8003722:	d04f      	beq.n	80037c4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003732:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <HAL_SPI_IRQHandler+0x168>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d034      	beq.n	80037ba <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0203 	bic.w	r2, r2, #3
 800375e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	2b00      	cmp	r3, #0
 8003766:	d011      	beq.n	800378c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_SPI_IRQHandler+0x1e4>)
 800376e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003774:	4618      	mov	r0, r3
 8003776:	f7fd fc3e 	bl	8000ff6 <HAL_DMA_Abort_IT>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	2b00      	cmp	r3, #0
 8003792:	d016      	beq.n	80037c2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <HAL_SPI_IRQHandler+0x1e4>)
 800379a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd fc28 	bl	8000ff6 <HAL_DMA_Abort_IT>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80037b8:	e003      	b.n	80037c2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f812 	bl	80037e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037c0:	e000      	b.n	80037c4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80037c2:	bf00      	nop
    return;
 80037c4:	bf00      	nop
  }
}
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	080037f9 	.word	0x080037f9

080037d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ffe5 	bl	80037e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d923      	bls.n	800387e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	b292      	uxth	r2, r2
 8003842:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b02      	subs	r3, #2
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d11f      	bne.n	80038ac <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	e016      	b.n	80038ac <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f103 020c 	add.w	r2, r3, #12
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	7812      	ldrb	r2, [r2, #0]
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10f      	bne.n	80038d8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa14 	bl	8003d00 <SPI_CloseRxTx_ISR>
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d912      	bls.n	8003918 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b02      	subs	r3, #2
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003916:	e012      	b.n	800393e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d110      	bne.n	800396a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003956:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f9cb 	bl	8003d00 <SPI_CloseRxTx_ISR>
    }
  }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	b292      	uxth	r2, r2
 8003986:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10f      	bne.n	80039d0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f998 	bl	8003d00 <SPI_CloseRxTx_ISR>
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d110      	bne.n	8003a30 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a1c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f968 	bl	8003d00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a48:	f7fd f9ba 	bl	8000dc0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a58:	f7fd f9b2 	bl	8000dc0 <HAL_GetTick>
 8003a5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a5e:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	015b      	lsls	r3, r3, #5
 8003a64:	0d1b      	lsrs	r3, r3, #20
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a6e:	e054      	b.n	8003b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a76:	d050      	beq.n	8003b1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a78:	f7fd f9a2 	bl	8000dc0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d902      	bls.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d13d      	bne.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa6:	d111      	bne.n	8003acc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab0:	d004      	beq.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aba:	d107      	bne.n	8003acc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad4:	d10f      	bne.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e017      	b.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d19b      	bne.n	8003a70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000000 	.word	0x20000000

08003b48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b5a:	f7fd f931 	bl	8000dc0 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003b6a:	f7fd f929 	bl	8000dc0 <HAL_GetTick>
 8003b6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b78:	4b3d      	ldr	r3, [pc, #244]	@ (8003c70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00da      	lsls	r2, r3, #3
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	0d1b      	lsrs	r3, r3, #20
 8003b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b90:	e060      	b.n	8003c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b98:	d107      	bne.n	8003baa <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bb0:	d050      	beq.n	8003c54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb2:	f7fd f905 	bl	8000dc0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d902      	bls.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d13d      	bne.n	8003c44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003be0:	d111      	bne.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bea:	d004      	beq.n	8003bf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf4:	d107      	bne.n	8003c06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0e:	d10f      	bne.n	8003c30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e010      	b.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d196      	bne.n	8003b92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3728      	adds	r7, #40	@ 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000000 	.word	0x20000000

08003c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff ff5b 	bl	8003b48 <SPI_WaitFifoStateUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e027      	b.n	8003cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2180      	movs	r1, #128	@ 0x80
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff fec0 	bl	8003a38 <SPI_WaitFlagStateUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e014      	b.n	8003cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff ff34 	bl	8003b48 <SPI_WaitFifoStateUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e000      	b.n	8003cf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d08:	f7fd f85a 	bl	8000dc0 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0220 	bic.w	r2, r2, #32
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	2164      	movs	r1, #100	@ 0x64
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ffa6 	bl	8003c74 <SPI_EndRxTxTransaction>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d115      	bne.n	8003d6e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d107      	bne.n	8003d5e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fd3a 	bl	80037d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003d5c:	e00e      	b.n	8003d7c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fc fdcc 	bl	8000904 <HAL_SPI_TxRxCpltCallback>
}
 8003d6c:	e006      	b.n	8003d7c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fd34 	bl	80037e4 <HAL_SPI_ErrorCallback>
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e042      	b.n	8003e1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fc fe6f 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2224      	movs	r2, #36	@ 0x24
 8003db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fb24 	bl	800441c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f825 	bl	8003e24 <UART_SetConfig>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e01b      	b.n	8003e1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fba3 	bl	8004560 <UART_CheckIdleState>
 8003e1a:	4603      	mov	r3, r0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e28:	b08c      	sub	sp, #48	@ 0x30
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4baa      	ldr	r3, [pc, #680]	@ (80040fc <UART_SetConfig+0x2d8>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a9f      	ldr	r2, [pc, #636]	@ (8004100 <UART_SetConfig+0x2dc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003e9a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	f023 010f 	bic.w	r1, r3, #15
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a90      	ldr	r2, [pc, #576]	@ (8004104 <UART_SetConfig+0x2e0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d125      	bne.n	8003f14 <UART_SetConfig+0xf0>
 8003ec8:	4b8f      	ldr	r3, [pc, #572]	@ (8004108 <UART_SetConfig+0x2e4>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d81a      	bhi.n	8003f0c <UART_SetConfig+0xe8>
 8003ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <UART_SetConfig+0xb8>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003efd 	.word	0x08003efd
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003f05 	.word	0x08003f05
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ef2:	e116      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003efa:	e112      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003efc:	2304      	movs	r3, #4
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f02:	e10e      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f04:	2308      	movs	r3, #8
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0a:	e10a      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f12:	e106      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7c      	ldr	r2, [pc, #496]	@ (800410c <UART_SetConfig+0x2e8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d138      	bne.n	8003f90 <UART_SetConfig+0x16c>
 8003f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004108 <UART_SetConfig+0x2e4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d82d      	bhi.n	8003f88 <UART_SetConfig+0x164>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <UART_SetConfig+0x110>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	08003f89 	.word	0x08003f89
 8003f3c:	08003f89 	.word	0x08003f89
 8003f40:	08003f89 	.word	0x08003f89
 8003f44:	08003f79 	.word	0x08003f79
 8003f48:	08003f89 	.word	0x08003f89
 8003f4c:	08003f89 	.word	0x08003f89
 8003f50:	08003f89 	.word	0x08003f89
 8003f54:	08003f71 	.word	0x08003f71
 8003f58:	08003f89 	.word	0x08003f89
 8003f5c:	08003f89 	.word	0x08003f89
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f81 	.word	0x08003f81
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6e:	e0d8      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f70:	2302      	movs	r3, #2
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f76:	e0d4      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7e:	e0d0      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f80:	2308      	movs	r3, #8
 8003f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f86:	e0cc      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	e0c8      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a5e      	ldr	r2, [pc, #376]	@ (8004110 <UART_SetConfig+0x2ec>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d125      	bne.n	8003fe6 <UART_SetConfig+0x1c2>
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004108 <UART_SetConfig+0x2e4>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fa4:	2b30      	cmp	r3, #48	@ 0x30
 8003fa6:	d016      	beq.n	8003fd6 <UART_SetConfig+0x1b2>
 8003fa8:	2b30      	cmp	r3, #48	@ 0x30
 8003faa:	d818      	bhi.n	8003fde <UART_SetConfig+0x1ba>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d00a      	beq.n	8003fc6 <UART_SetConfig+0x1a2>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d814      	bhi.n	8003fde <UART_SetConfig+0x1ba>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <UART_SetConfig+0x19a>
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d008      	beq.n	8003fce <UART_SetConfig+0x1aa>
 8003fbc:	e00f      	b.n	8003fde <UART_SetConfig+0x1ba>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc4:	e0ad      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fcc:	e0a9      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003fce:	2304      	movs	r3, #4
 8003fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd4:	e0a5      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fdc:	e0a1      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003fde:	2310      	movs	r3, #16
 8003fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe4:	e09d      	b.n	8004122 <UART_SetConfig+0x2fe>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a4a      	ldr	r2, [pc, #296]	@ (8004114 <UART_SetConfig+0x2f0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d125      	bne.n	800403c <UART_SetConfig+0x218>
 8003ff0:	4b45      	ldr	r3, [pc, #276]	@ (8004108 <UART_SetConfig+0x2e4>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ffc:	d016      	beq.n	800402c <UART_SetConfig+0x208>
 8003ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004000:	d818      	bhi.n	8004034 <UART_SetConfig+0x210>
 8004002:	2b80      	cmp	r3, #128	@ 0x80
 8004004:	d00a      	beq.n	800401c <UART_SetConfig+0x1f8>
 8004006:	2b80      	cmp	r3, #128	@ 0x80
 8004008:	d814      	bhi.n	8004034 <UART_SetConfig+0x210>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <UART_SetConfig+0x1f0>
 800400e:	2b40      	cmp	r3, #64	@ 0x40
 8004010:	d008      	beq.n	8004024 <UART_SetConfig+0x200>
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x210>
 8004014:	2300      	movs	r3, #0
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401a:	e082      	b.n	8004122 <UART_SetConfig+0x2fe>
 800401c:	2302      	movs	r3, #2
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004022:	e07e      	b.n	8004122 <UART_SetConfig+0x2fe>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402a:	e07a      	b.n	8004122 <UART_SetConfig+0x2fe>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004032:	e076      	b.n	8004122 <UART_SetConfig+0x2fe>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800403a:	e072      	b.n	8004122 <UART_SetConfig+0x2fe>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <UART_SetConfig+0x2f4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12a      	bne.n	800409c <UART_SetConfig+0x278>
 8004046:	4b30      	ldr	r3, [pc, #192]	@ (8004108 <UART_SetConfig+0x2e4>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004054:	d01a      	beq.n	800408c <UART_SetConfig+0x268>
 8004056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800405a:	d81b      	bhi.n	8004094 <UART_SetConfig+0x270>
 800405c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004060:	d00c      	beq.n	800407c <UART_SetConfig+0x258>
 8004062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004066:	d815      	bhi.n	8004094 <UART_SetConfig+0x270>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <UART_SetConfig+0x250>
 800406c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004070:	d008      	beq.n	8004084 <UART_SetConfig+0x260>
 8004072:	e00f      	b.n	8004094 <UART_SetConfig+0x270>
 8004074:	2300      	movs	r3, #0
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407a:	e052      	b.n	8004122 <UART_SetConfig+0x2fe>
 800407c:	2302      	movs	r3, #2
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004082:	e04e      	b.n	8004122 <UART_SetConfig+0x2fe>
 8004084:	2304      	movs	r3, #4
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408a:	e04a      	b.n	8004122 <UART_SetConfig+0x2fe>
 800408c:	2308      	movs	r3, #8
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004092:	e046      	b.n	8004122 <UART_SetConfig+0x2fe>
 8004094:	2310      	movs	r3, #16
 8004096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409a:	e042      	b.n	8004122 <UART_SetConfig+0x2fe>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <UART_SetConfig+0x2dc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d13a      	bne.n	800411c <UART_SetConfig+0x2f8>
 80040a6:	4b18      	ldr	r3, [pc, #96]	@ (8004108 <UART_SetConfig+0x2e4>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040b4:	d01a      	beq.n	80040ec <UART_SetConfig+0x2c8>
 80040b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040ba:	d81b      	bhi.n	80040f4 <UART_SetConfig+0x2d0>
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c0:	d00c      	beq.n	80040dc <UART_SetConfig+0x2b8>
 80040c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c6:	d815      	bhi.n	80040f4 <UART_SetConfig+0x2d0>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <UART_SetConfig+0x2b0>
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d0:	d008      	beq.n	80040e4 <UART_SetConfig+0x2c0>
 80040d2:	e00f      	b.n	80040f4 <UART_SetConfig+0x2d0>
 80040d4:	2300      	movs	r3, #0
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040da:	e022      	b.n	8004122 <UART_SetConfig+0x2fe>
 80040dc:	2302      	movs	r3, #2
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e2:	e01e      	b.n	8004122 <UART_SetConfig+0x2fe>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ea:	e01a      	b.n	8004122 <UART_SetConfig+0x2fe>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f2:	e016      	b.n	8004122 <UART_SetConfig+0x2fe>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fa:	e012      	b.n	8004122 <UART_SetConfig+0x2fe>
 80040fc:	cfff69f3 	.word	0xcfff69f3
 8004100:	40008000 	.word	0x40008000
 8004104:	40013800 	.word	0x40013800
 8004108:	40021000 	.word	0x40021000
 800410c:	40004400 	.word	0x40004400
 8004110:	40004800 	.word	0x40004800
 8004114:	40004c00 	.word	0x40004c00
 8004118:	40005000 	.word	0x40005000
 800411c:	2310      	movs	r3, #16
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4aae      	ldr	r2, [pc, #696]	@ (80043e0 <UART_SetConfig+0x5bc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	f040 8097 	bne.w	800425c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800412e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004132:	2b08      	cmp	r3, #8
 8004134:	d823      	bhi.n	800417e <UART_SetConfig+0x35a>
 8004136:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <UART_SetConfig+0x318>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004161 	.word	0x08004161
 8004140:	0800417f 	.word	0x0800417f
 8004144:	08004169 	.word	0x08004169
 8004148:	0800417f 	.word	0x0800417f
 800414c:	0800416f 	.word	0x0800416f
 8004150:	0800417f 	.word	0x0800417f
 8004154:	0800417f 	.word	0x0800417f
 8004158:	0800417f 	.word	0x0800417f
 800415c:	08004177 	.word	0x08004177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7fe fe28 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004166:	e010      	b.n	800418a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004168:	4b9e      	ldr	r3, [pc, #632]	@ (80043e4 <UART_SetConfig+0x5c0>)
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800416c:	e00d      	b.n	800418a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7fe fdb3 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8004172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004174:	e009      	b.n	800418a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800417c:	e005      	b.n	800418a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8130 	beq.w	80043f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	4a94      	ldr	r2, [pc, #592]	@ (80043e8 <UART_SetConfig+0x5c4>)
 8004198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800419c:	461a      	mov	r2, r3
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4413      	add	r3, r2
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d305      	bcc.n	80041c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d903      	bls.n	80041ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041c8:	e113      	b.n	80043f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	2200      	movs	r2, #0
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	60fa      	str	r2, [r7, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	4a84      	ldr	r2, [pc, #528]	@ (80043e8 <UART_SetConfig+0x5c4>)
 80041d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2200      	movs	r2, #0
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041ec:	f7fc f814 	bl	8000218 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	020b      	lsls	r3, r1, #8
 8004202:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004206:	0202      	lsls	r2, r0, #8
 8004208:	6979      	ldr	r1, [r7, #20]
 800420a:	6849      	ldr	r1, [r1, #4]
 800420c:	0849      	lsrs	r1, r1, #1
 800420e:	2000      	movs	r0, #0
 8004210:	460c      	mov	r4, r1
 8004212:	4605      	mov	r5, r0
 8004214:	eb12 0804 	adds.w	r8, r2, r4
 8004218:	eb43 0905 	adc.w	r9, r3, r5
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	469a      	mov	sl, r3
 8004224:	4693      	mov	fp, r2
 8004226:	4652      	mov	r2, sl
 8004228:	465b      	mov	r3, fp
 800422a:	4640      	mov	r0, r8
 800422c:	4649      	mov	r1, r9
 800422e:	f7fb fff3 	bl	8000218 <__aeabi_uldivmod>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4613      	mov	r3, r2
 8004238:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004240:	d308      	bcc.n	8004254 <UART_SetConfig+0x430>
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004248:	d204      	bcs.n	8004254 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a3a      	ldr	r2, [r7, #32]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e0ce      	b.n	80043f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800425a:	e0ca      	b.n	80043f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004264:	d166      	bne.n	8004334 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800426a:	2b08      	cmp	r3, #8
 800426c:	d827      	bhi.n	80042be <UART_SetConfig+0x49a>
 800426e:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x450>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004299 	.word	0x08004299
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042bf 	.word	0x080042bf
 8004284:	080042af 	.word	0x080042af
 8004288:	080042bf 	.word	0x080042bf
 800428c:	080042bf 	.word	0x080042bf
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042b7 	.word	0x080042b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe fd8c 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800429e:	e014      	b.n	80042ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7fe fd9e 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042a6:	e010      	b.n	80042ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a8:	4b4e      	ldr	r3, [pc, #312]	@ (80043e4 <UART_SetConfig+0x5c0>)
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042ac:	e00d      	b.n	80042ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ae:	f7fe fd13 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 80042b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042bc:	e005      	b.n	80042ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8090 	beq.w	80043f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	4a44      	ldr	r2, [pc, #272]	@ (80043e8 <UART_SetConfig+0x5c4>)
 80042d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042dc:	461a      	mov	r2, r3
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e4:	005a      	lsls	r2, r3, #1
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	441a      	add	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	2b0f      	cmp	r3, #15
 80042fc:	d916      	bls.n	800432c <UART_SetConfig+0x508>
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004304:	d212      	bcs.n	800432c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f023 030f 	bic.w	r3, r3, #15
 800430e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	b29b      	uxth	r3, r3
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	b29a      	uxth	r2, r3
 800431c:	8bfb      	ldrh	r3, [r7, #30]
 800431e:	4313      	orrs	r3, r2
 8004320:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	8bfa      	ldrh	r2, [r7, #30]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	e062      	b.n	80043f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004332:	e05e      	b.n	80043f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004334:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004338:	2b08      	cmp	r3, #8
 800433a:	d828      	bhi.n	800438e <UART_SetConfig+0x56a>
 800433c:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0x520>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004369 	.word	0x08004369
 8004348:	08004371 	.word	0x08004371
 800434c:	08004379 	.word	0x08004379
 8004350:	0800438f 	.word	0x0800438f
 8004354:	0800437f 	.word	0x0800437f
 8004358:	0800438f 	.word	0x0800438f
 800435c:	0800438f 	.word	0x0800438f
 8004360:	0800438f 	.word	0x0800438f
 8004364:	08004387 	.word	0x08004387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004368:	f7fe fd24 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800436c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800436e:	e014      	b.n	800439a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7fe fd36 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8004374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004376:	e010      	b.n	800439a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004378:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <UART_SetConfig+0x5c0>)
 800437a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800437c:	e00d      	b.n	800439a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437e:	f7fe fcab 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8004382:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004384:	e009      	b.n	800439a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800438c:	e005      	b.n	800439a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004398:	bf00      	nop
    }

    if (pclk != 0U)
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d028      	beq.n	80043f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	4a10      	ldr	r2, [pc, #64]	@ (80043e8 <UART_SetConfig+0x5c4>)
 80043a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043aa:	461a      	mov	r2, r3
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	441a      	add	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	d910      	bls.n	80043ec <UART_SetConfig+0x5c8>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d20c      	bcs.n	80043ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60da      	str	r2, [r3, #12]
 80043dc:	e009      	b.n	80043f2 <UART_SetConfig+0x5ce>
 80043de:	bf00      	nop
 80043e0:	40008000 	.word	0x40008000
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	08004ae8 	.word	0x08004ae8
      }
      else
      {
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2200      	movs	r2, #0
 800440c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800440e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004412:	4618      	mov	r0, r3
 8004414:	3730      	adds	r7, #48	@ 0x30
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800441c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01a      	beq.n	8004532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800451a:	d10a      	bne.n	8004532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	605a      	str	r2, [r3, #4]
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b098      	sub	sp, #96	@ 0x60
 8004564:	af02      	add	r7, sp, #8
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004570:	f7fc fc26 	bl	8000dc0 <HAL_GetTick>
 8004574:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d12f      	bne.n	80045e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004584:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458c:	2200      	movs	r2, #0
 800458e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f88e 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d022      	beq.n	80045e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e6      	bne.n	800459e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e063      	b.n	80046ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d149      	bne.n	8004686 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fa:	2200      	movs	r2, #0
 80045fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f857 	bl	80046b4 <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d03c      	beq.n	8004686 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	623b      	str	r3, [r7, #32]
   return(result);
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30
 800462c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	60fb      	str	r3, [r7, #12]
   return(result);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800465e:	61fa      	str	r2, [r7, #28]
 8004660:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	617b      	str	r3, [r7, #20]
   return(result);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e012      	b.n	80046ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3758      	adds	r7, #88	@ 0x58
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c4:	e04f      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046cc:	d04b      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7fc fb77 	bl	8000dc0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e04e      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d037      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b80      	cmp	r3, #128	@ 0x80
 80046fa:	d034      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b40      	cmp	r3, #64	@ 0x40
 8004700:	d031      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b08      	cmp	r3, #8
 800470e:	d110      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f838 	bl	800478e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2208      	movs	r2, #8
 8004722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e029      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004740:	d111      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800474a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f81e 	bl	800478e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e00f      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d0a0      	beq.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800478e:	b480      	push	{r7}
 8004790:	b095      	sub	sp, #84	@ 0x54
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e6      	bne.n	8004796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e3      	bne.n	80047c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d118      	bne.n	800483a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	60bb      	str	r3, [r7, #8]
   return(result);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f023 0310 	bic.w	r3, r3, #16
 800481c:	647b      	str	r3, [r7, #68]	@ 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6979      	ldr	r1, [r7, #20]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	613b      	str	r3, [r7, #16]
   return(result);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e6      	bne.n	8004808 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800484e:	bf00      	nop
 8004850:	3754      	adds	r7, #84	@ 0x54
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_UARTEx_DisableFifoMode+0x16>
 800486c:	2302      	movs	r3, #2
 800486e:	e027      	b.n	80048c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	@ 0x24
 800487c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800489e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e02d      	b.n	8004940 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	@ 0x24
 80048f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f84f 	bl	80049c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e02d      	b.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	@ 0x24
 800496c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f811 	bl	80049c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049e4:	e031      	b.n	8004a4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049e6:	2308      	movs	r3, #8
 80049e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049ea:	2308      	movs	r3, #8
 80049ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	0e5b      	lsrs	r3, r3, #25
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	0f5b      	lsrs	r3, r3, #29
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a0e:	7bbb      	ldrb	r3, [r7, #14]
 8004a10:	7b3a      	ldrb	r2, [r7, #12]
 8004a12:	4911      	ldr	r1, [pc, #68]	@ (8004a58 <UARTEx_SetNbDataToProcess+0x94>)
 8004a14:	5c8a      	ldrb	r2, [r1, r2]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a1a:	7b3a      	ldrb	r2, [r7, #12]
 8004a1c:	490f      	ldr	r1, [pc, #60]	@ (8004a5c <UARTEx_SetNbDataToProcess+0x98>)
 8004a1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	7b7a      	ldrb	r2, [r7, #13]
 8004a30:	4909      	ldr	r1, [pc, #36]	@ (8004a58 <UARTEx_SetNbDataToProcess+0x94>)
 8004a32:	5c8a      	ldrb	r2, [r1, r2]
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a38:	7b7a      	ldrb	r2, [r7, #13]
 8004a3a:	4908      	ldr	r1, [pc, #32]	@ (8004a5c <UARTEx_SetNbDataToProcess+0x98>)
 8004a3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	08004b00 	.word	0x08004b00
 8004a5c:	08004b08 	.word	0x08004b08

08004a60 <memset>:
 8004a60:	4402      	add	r2, r0
 8004a62:	4603      	mov	r3, r0
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d100      	bne.n	8004a6a <memset+0xa>
 8004a68:	4770      	bx	lr
 8004a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6e:	e7f9      	b.n	8004a64 <memset+0x4>

08004a70 <__libc_init_array>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	4d0d      	ldr	r5, [pc, #52]	@ (8004aa8 <__libc_init_array+0x38>)
 8004a74:	4c0d      	ldr	r4, [pc, #52]	@ (8004aac <__libc_init_array+0x3c>)
 8004a76:	1b64      	subs	r4, r4, r5
 8004a78:	10a4      	asrs	r4, r4, #2
 8004a7a:	2600      	movs	r6, #0
 8004a7c:	42a6      	cmp	r6, r4
 8004a7e:	d109      	bne.n	8004a94 <__libc_init_array+0x24>
 8004a80:	4d0b      	ldr	r5, [pc, #44]	@ (8004ab0 <__libc_init_array+0x40>)
 8004a82:	4c0c      	ldr	r4, [pc, #48]	@ (8004ab4 <__libc_init_array+0x44>)
 8004a84:	f000 f818 	bl	8004ab8 <_init>
 8004a88:	1b64      	subs	r4, r4, r5
 8004a8a:	10a4      	asrs	r4, r4, #2
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	42a6      	cmp	r6, r4
 8004a90:	d105      	bne.n	8004a9e <__libc_init_array+0x2e>
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
 8004a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a98:	4798      	blx	r3
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	e7ee      	b.n	8004a7c <__libc_init_array+0xc>
 8004a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa2:	4798      	blx	r3
 8004aa4:	3601      	adds	r6, #1
 8004aa6:	e7f2      	b.n	8004a8e <__libc_init_array+0x1e>
 8004aa8:	08004b18 	.word	0x08004b18
 8004aac:	08004b18 	.word	0x08004b18
 8004ab0:	08004b18 	.word	0x08004b18
 8004ab4:	08004b1c 	.word	0x08004b1c

08004ab8 <_init>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr

08004ac4 <_fini>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr
